<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>XEP Editor README</title>
  <abstract>This document describes work processes followed by the XMPP Extensions Editor.</abstract>
  &LEGALNOTICE;
  <number>README</number>
  <status>Experimental</status>
  <type>Procedural</type>
  <sig>N/A</sig>
  <approver>N/A</approver>
  <dependencies>
    <spec>XEP-0001</spec>
    <spec>XEP-0053</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>N/A</shortname>
  &stpeter;
  <revision>
    <version>0.15</version>
    <date>2017-03-09</date>
    <initials>ssw</initials>
    <remark><p>Remove invalid step from advancing an XEP section</p></remark>
  </revision>
  <revision>
    <version>0.14</version>
    <date>2017-01-28</date>
    <initials>ssw</initials>
    <remark><p>Update superseding an XEP since references are now auto generated.</p></remark>
  </revision>
  <revision>
    <version>0.13</version>
    <date>2016-10-29</date>
    <initials>ssw</initials>
    <remark><p>Update the Last Call section.</p></remark>
  </revision>
  <revision>
    <version>0.12</version>
    <date>2016-07-12</date>
    <initials>ssw</initials>
    <remark><p>Update the accepting an XEP section.</p></remark>
  </revision>
  <revision>
    <version>0.11</version>
    <date>2016-05-16</date>
    <initials>ssw</initials>
    <remark><p>Make the updating an XEP section match current process.</p></remark>
  </revision>
  <revision>
    <version>0.10</version>
    <date>2016-01-21</date>
    <initials>asw</initials>
    <remark><p>Added reminders to remove &lt;interim&gt; elements.</p></remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2014-02-25</date>
    <initials>psa</initials>
    <remark><p>Modernized to reflect updated scripts and processes, as well as the existence of the XSF's Editor Team.</p></remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2009-11-19</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect newer processes and provide more complete coverage of XEP Editor and XMPP Registrar responsibilities.</p></remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2008-07-16</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect use of SVN.</p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2007-09-28</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect new scripts and use of mailserver.</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2005-05-26</date>
    <initials>psa</initials>
    <remark><p>Adjusted to reflect ProtoXEP status.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2005-03-16</date>
    <initials>psa</initials>
    <remark><p>Converted to XEP format; adjusted to reflect server move.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2004-10-22</date>
    <initials>psa</initials>
    <remark><p>Clarified schema handling.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2004-10-11</date>
    <initials>psa</initials>
    <remark><p>Defined XMPP Registrar processes.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2004-10-01</date>
    <initials>psa</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
</header>

<section1 topic='Overview' anchor='overview'>
<p>The XMPP Extensions Editor (or, for short, XEP Editor) manages the XMPP extensions process as defined in &xep0001;. In addition, the XEP Editor functions as the XMPP Registrar as defined in &xep0053;. Read those documents first, since this README focuses on mechanics instead of philosophy or policy.</p>
<p>Since the inception of the &XSF; in 2001 until early 2014, the &EDITOR; was Peter Saint-Andre.  In early 2014, the &XSF; formed a "work team" to dispatch the responsibilities of the XEP Editor and XMPP Registrar. This document describes most of the details about how those responsibilities are performed.</p>
</section1>

<section1 topic='XEP Editor Responsibilities' anchor='ed'>
<p>There are several XEP-related functions performed by the XEP Editor:</p>
<ol>
  <li>Accepting a XEP</li>
  <li>Updating a XEP</li>
  <li>Deferring a XEP</li>
  <li>Retracting a XEP</li>
  <li>Issuing a Last Call</li>
  <li>Counting Council Votes</li>
  <li>Advancing a XEP</li>
  <li>Deprecating a XEP</li>
  <li>Obsoleting a XEP</li>
  <li>XEP Maintenance</li>
  <li>List Administration</li>
</ol>
<p>These functions are specified below.</p>

<section2 topic='Accepting a XEP' anchor='accepting'>
<p>Periodically, people send email to editor@xmpp.org or submit pull requests with new proposals. Here is how to process such submissions.</p>
<ol>
  <li>Receive proposal from authors.</li>
  <li>Send a reply to the author(s) in order to verify that, if the proposal is accepted, they will cede rights to the protocol in accordance with the XSF's IPR policy <link url='https://xmpp.org/about/xsf/ipr-policy'>https://xmpp.org/about/xsf/ipr-policy</link>.</li>
  <li>Give it a descriptive filename that does <em>not</em> include the string 'xep' or a XEP number.</li>
  <li>Set the version to 0.0.1.</li>
  <li>Set the status to ProtoXEP.</li>
  <li>Locally convert XML to HTML and check the results for accuracy in accordance with normal XEP formatting (see &xep0143;).</li>
  <li>Check the XML file into the main branch of the XEP repository in the inbox/ subdirectory and then push the changes.</li>
  <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, perform an hg pull &amp;&amp; hg update, copy the protoxep file from the inbox/ subdirectory to the extensions/ directory, type 'xsltproc protoxepfile.xml &gt; /var/www/vhosts/xmpp.org/extensions/inbox/protoxepfile.html', and remove the file from the extensions/ directory.</li>
  <li>Run "inxep.py name approvingbody" script on the webserver (eg. "./inxep.py pars council"; see note about <link url='#lists'>List Administration</link>).</li>
  <li>Wait until the Council decides whether to accept the proposal as a XEP (this might involve poking the Council Chair, attending Council meetings, and monitoring the Council discussion list).</li>
  <li>If rejected, retain the XML file in git and the HTML file in the "inbox".</li>
  <li>
    <p>If accepted, do the following:</p>
    <ol>
      <li>Assign the XEP the next available number in the XEP series.</li>
      <li>Modify the &lt;number/&gt; element in the XML file.</li>
      <li>Set the version to 0.1 and the initials to "XEP Editor (psa)" where "psa" would be changed to your personal initials.</li>
      <li>Remove the &lt;interim/&gt; element from the XML file if it's included</li>
      <li>Set the status to Experimental.</li>
      <li>Check the file for egregious errors.</li>
      <li>Add a reference for the new XEP in the xep.ent file and check those changes into source control.</li>
      <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
      <li>Run the "archive.sh" script, which copies this published version to <link url='http://xmpp.org/extensions/attic/'>http://xmpp.org/extensions/attic/</link>.</li>
      <li>Run the "announce.py" script (see note about <link url='#lists'>List Administration</link>).</li>
      <li>Redirect the HTML file in the "inbox" to the new XEP URL (see existing examples on the webserver).</li>
    </ol>
  </li>
</ol>
</section2>

<section2 topic='Updating a XEP' anchor='updating'>
<p>Once a XEP has been published, it will be periodically updated in source control, and sometimes those changes are significant enough to warrant a new version (e.g., version 0.2 after 0.1). Often a request to release a new version will come from the document author, sometimes from the Council (e.g., after the XEP has reached version 1.0 or version 2.0 or when the status is changing from, say, Deprecated to Obsolete). Here is how to update a XEP.</p>
<ol>
  <li>Verify that the version number, status, and other information are correct.</li>
  <li>Compile the file locally and check the content for accuracy (including the correct date and version number).</li>
  <li>Check the changes into source control.</li>
  <li>Log into the webserver as the 'xsf' user, change directories to /home/xsf/xmpp-hg/extensions, run the "archive.sh" script to copy the previous XEP version to the "attic" (just in case the last editor team member forgot), type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
  <li>Run the "announce.py" script on the webserver (see note about <link url='#lists'>List Administration</link>).</li>
</ol>

<p>For example, to update XEP-0353 from version 0.1 to 0.2, you might do something like the following:</p>
<code><![CDATA[
$ sudo -u xsf -i
$ cd ~xsf/xmpp-hg/extensions
$ . /usr/local/virtualenv/gen/bin/activate
$ # or "export PATH=/usr/local/virtualenv/gen/bin:$PATH
$ ./archive.sh 0353 0.1
$ hg pull && hg update
$ ./gen.py xep-0353.xml
$ ./announce.py 0353
]]></code>
</section2>

<section2 topic='Deferring a XEP' anchor='deferring'>
<p>The status of a XEP shall be automatically changed to Deferred if a new version has not been submitted in 12 months, except if the XEP is actively in the Council queue for consideration of issuance of a Last Call. Here is the process.</p>
<ol>
  <li>Change the &lt;status/&gt; element to "Deferred" in the XML file.</li>
  <li>Check your changes into source control (note: do not modify the version number!).</li>
  <li>Run the "gen.py" script on the webserver.</li>
  <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
  <li>Run the "archive.sh" script, which copies this published version to <link url='http://xmpp.org/extensions/attic/'>http://xmpp.org/extensions/attic/</link>.</li>
  <li>Run the "deferred.py" script on the webserver (see note about <link url='#lists'>List Administration</link>).</li>
</ol>
</section2>

<section2 topic='Retracting a XEP' anchor='retracting'>
<p>Sometimes an author retracts a XEP because it is no longer deemed worthy of consideration. Here is the process.</p>
<ol>
  <li>Change the &lt;status/&gt; element to "Retracted" in the XML file.</li>
  <li>Modify the &lt;abstract/&gt; element with appropriate content (see existing Retracted XEPs).</li>
  <li>Add a new revision block with an incremented version number, explaining that the XEP has been Retracted and why (see existing Retracted XEPs).</li>
  <li>Check your changes into source control.</li>
  <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, run the "archive.sh" script to copy the previous XEP version to the "attic" (just in case the last editor team member forgot), type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
  <li>Run the "announce.py" script on the webserver (see note about <link url='#lists'>List Administration</link>).</li>
</ol>
</section2>

<section2 topic='Issuing a Last Call' anchor='lastcall'>
<p>The XMPP Council determines whether and when to issue a Last Call on an Experimental XEP. Here is the process.</p>
<ol>
  <li>Receive notice from the Council Chair that a Last Call shall be issued.</li>
  <li>Determine the ending date, which must be at least 14 days in the future (sometimes 3 weeks if a great deal of discussion is expected).</li>
  <li>Change the &lt;status/&gt; element to "Proposed" in the XML file.</li>
  <li>Check your changes into source control.</li>
  <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, run the "archive.sh" script to copy the previous XEP version to the "attic" (just in case the last editor team member forgot), type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
  <li>Run the "lastcall.py" script on the webserver, eg. "./lastcall.py 0300 2016-11-12".</li>
  <li>Review the XMPP Registrar Considerations section to ensure accuracy.</li>
</ol>
</section2>

<section2 topic='Counting Council Votes' anchor='councilvotes'>
<p>The XEP Editor is responsible for counting the votes of Council members. The process is as follows.</p>
<ol>
  <li>Monitor the Council list and Council meeting minutes for votes.</li>
  <li>Log into the website and modify the vote tally page linked to from &lt;<link url='http://xmpp.org/about-xmpp/xsf/xmpp-council/'>http://xmpp.org/about-xmpp/xsf/xmpp-council/</link>&gt;.</li>
  <li>When all Council members have voted, update the XEP accordingly (see below on Advancing a XEP).</li>
</ol>
</section2>

<section2 topic='Advancing a XEP' anchor='advancing'>
<p>When the Council approves a XEP, it advances to either Draft (Standards Track XEPs) or Active (other XEP types). Here is the process.</p>
<ol>
  <li>Change the &lt;status/&gt; element to "Active" or "Draft" as appropriate.</li>
  <li>Add a new revision block; set the version number to "1.0" and the initials to "XEP Editor (psa)" where "psa" would be changed to your personal initials (see existing XEPs for appropriate remarks).</li>
  <li>Remove the &lt;interim/&gt; element from the XML file if it's included</li>
  <li>If there are any XML schemas associated with the XEP, do the following:
    <ol>
      <li>Add an annotation to each schema (see existing examples).</li>
      <li>In the 'schemas' directory, create one .xsd file for each schema.</li>
      <li>For each schema, add a &lt;schemaloc/&gt; element to the XEP file.</li>
    </ol>
  </li>
  <li>Add the protocol namespace (if any) to the protocol namespaces registry and complete any other XMPP Registrar actions called for in the XEP (see below).</li>
  <li>Check your changes into source control.</li>
  <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, run the "archive.sh" script to copy the previous XEP version to the "attic" (just in case the last editor team member forgot), type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
  <li>Run the "announce.py" script on the webserver (see note about <link url='#lists'>List Administration</link>).</li>
</ol>
</section2>

<section2 topic='Deprecating a XEP' anchor='deprecating'>
  <p>The Council can decide to change the status of a XEP to Deprecated (e.g., when a new technology has been developed to supersede the old technology). Here is the process:</p>
<ol>
  <li>Add a new revision block; increment the version number and set the initials to "XEP Editor (psa)" where "psa" would be changed to your personal initials.</li>
  <li>Change the &lt;status/&gt; element to "Deprecated" in the XML file.</li>
  <li>If instructed to do so by the Council, add an &lt;expires/&gt; element to the header.</li>
  <li>Add a &lt;spec/&gt; child to the &lt;supersededby/&gt; element, pointing to the specification that supersedes this one.</li>
  <li>Check your changes into source control.</li>
  <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, run the "archive.sh" script to copy the previous XEP version to the "attic" (just in case the last editor team member forgot), type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
  <li>Run the "announce.py" script on the webserver (see note about <link url='#lists'>List Administration</link>).</li>
</ol>
</section2>

<section2 topic='Obsoleting a XEP' anchor='obsoleting'>
  <p>The Council can decide to change the status of a XEP from Deprecated to Obsolete. Here is the process:</p>
<ol>
  <li>Add a new revision block; increment the version number and set the initials to "XEP Editor (psa)" where "psa" would be changed to your personal initials.</li>
  <li>Change the &lt;status/&gt; element to "Obsolete" in the XML file.</li>
  <li>If the file includes an &lt;expires/&gt; element in the header, remove it.</li>
  <li>If appropriate, add a &lt;spec/&gt; child to the &lt;supersededby/&gt; element, pointing to the specification that supersedes this one.</li>
  <li>Check your changes into source control.</li>
  <li>Log into the webserver, change directories to /home/xsf/xmpp-hg/extensions, run the "archive.sh" script to copy the previous XEP version to the "attic" (just in case the last editor team member forgot), type 'hg pull' and 'hg update', and run the "gen.py" script to generate HTML and PDF files.</li>
  <li>Run the "announce.py" script on the webserver (see note about <link url='#lists'>List Administration</link>).</li>
</ol>
</section2>

<section2 topic='XEP Maintenance' anchor='maintenance'>
  <p>At any time (even after a XEP has advanced to Draft or Final), it is appropriate for the XEP Editor to correct small errors in XEPs (typographical errors, XML errors in examples, etc.).</p>
  <p>However, care must be taken in editing Draft and Final XEPs, because any material changes to such specifications need to be approved by the XMPP Council. See <cite>XEP-0001</cite> for details.</p>
  <p>The XEP Editor can choose to perform more advanced maintenance of XEPs, such as validation of schemas, checking of examples, and copy editing in accordance with the styleguide in <cite>XEP-0143</cite>. Such work is best done while a XEP is still Experimental.</p>
</section2>

<section2 topic='List Administration' anchor='lists'>
  <p>XEPs are discussed on the standards@xmpp.org email list, about which information is available at &lt;<link url='http://mail.jabber.org/mailman/listinfo/standards'>http://mail.jabber.org/mailman/listinfo/standards</link>&gt;. Traditionally the XEP Editor acted as an administrator for this list. In particular, email from editor@xmpp.org is held for approval on this list to prevent spammers from sending fake emails from the Editor. Before running the "announce.py" script, empty the queue of messages held for moderation; after running the script, approve the message generated by that script so that it is sent to the list.</p>
  <p>With the transition to the XSF Editor Team, the editor@xmpp.org address is also an email list, used by the team. Incoming messages need to be screened for legitimacy and approved as appropriate.</p>
</section2>

</section1>

<section1 topic='XMPP Registrar Responsibilities' anchor='reg'>

<section2 topic='Advancing a XEP' anchor='reg-advance'>
  <p>Registry files are contained in the 'registry' directory. In general, there are several files that might need to be updated when a XEP advances to Active or Draft. In particular, most XEPs specify one or more protocol namespaces, which need to be added to the namespaces.xml file in the 'registry' directory. Refer to the list of registries at http://xmpp.org/registrar/ in order to determine which other registries might need to be updated. The reg.ent file will probably need to be updated as well. Once the Registrar actions have been completed, update the text of the XEP's XMPP Registrar Considerations section accordingly (e.g., to change "shall include" to "includes").</p>
</section2>

<section2 topic='Creating a New Registry' anchor='reg-newreg'>
  <p>A XEP might call for one or more new registries to be created. If so, carefully review the XMPP Registrar Considerations section of the XEP before it advances to Draft or Active in order to provide appropriate feedback to the XEP author. (Alternatively, make the changes directly in the XEP file in consultation with the author.)</p>
  <p>When creating a new registry, it is best to copy the DTD, XML, and XSL files for an existing registry, then modify them in accordance with the definition of the new registry in the relevant XEP. The gen.sh script will need to be updated to reflect the existence of the new registry, as will the index file for the http://xmpp.org/registrar/ web page.</p>
  <p class='note'>Note: Registry entries are often a source of confusion and error. It is recommended for several members of the XSF Editor Team to review registry changes before pushing them to the website.</p>
  <p>Check all your changes into source control, update the registrar/ directory from source on the webserver, run the gen.sh script to update the XMPP Registrar web pages, and run the "announce.py" script to send an announcement to the Standards list (see note about <link url='#lists'>List Administration</link>).</p>
</section2>

<section2 topic='Updating an Existing Registry' anchor='reg-update'>
  <p>New versions of XEPs might provide modified registry data. The XEP Editor needs to be aware of changes to Draft and Final XEPs in order to make appropriate updates to existing registries. The registry itself shall not be changed until the new XEP version is approved by the XMPP Council.</p>
  <p>The XMPP Registrar also periodically receives requests for additions to existing registrations outside of XEPs, either directly to registrar@xmpp.org or indirectly via the standards@xmpp.org list. If the Registrar receives such a request directly, it shall send an email about the proposed registration to the standards@xmpp.org for public comment. If no objections are raised within a reasonable period of time, the Registrar shall update the relevant registry accordingly.</p>
</section2>

</section1>

<section1 topic='Tools' anchor='tools'>

<section2 topic='XML Processing' anchor='tools-xml'>
<p>In order to convert XML files into HTML and other formats, the XEP Editor currently uses the xsltproc tool, which is part of libxml2 (created by Daniel Veillard). This tool is extremely handy and it is recommended that use of xsltproc be continued, especially since the shell scripts (described below) make calls to xsltproc.</p>
</section2>

<section2 topic='XSL Transformations' anchor='tools-xsl'>
<p>Most of the "magic" behind creating the HTML-formatted XEPs, as well as the IETF-style reference files, is perfomed by XSLT stylesheets. The main file here is xep.xsl, although ref.xsl is used to create the reference files. A future version of this README might explain these files in more depth.</p>
</section2>

<section2 topic='Entity References' anchor='tools-refs'>
<p>The xep.ent file contains handy references that can be incorporated into any XEP XML document, thus providing a centralized location for various document references. The XEP Editor keeps this file up to date (e.g., by adding all new XEPs to it), and should be the only person who makes changes to the file.</p>
</section2>

<section2 topic='Python Scripts' anchor='tools-python'>
<p>Several Python scripts are under source control. These are:</p>
<ol>
  <li>
    <p>announce.py</p>
    <p>This script announces a new version of a XEP by sending a message to standards@xmpp.org (see note about <link url='#lists'>List Administration</link>).</p>
  </li>
  <li>
    <p>deferred.py</p>
    <p>This script updates the database and sends a message to standards@xmpp.org when the status of a XEP is changed to Deferred. Before running this script, make sure that you modify the &lt;status/&gt; element in the XEP itself and run the gen.py shell script.</p>
  </li>
  <li>
    <p>gen.py</p>
    <p>This script converts one XEP XML file into HTML and PDF, and updates the XEP "database". Run this script before announcing a new version. This script can also be used for minor edits to the current version.</p>
  </li>
  <li>
    <p>lastcall.py</p>
    <p>This script announces a Last Call for a XEP by updating the database and sending a message to standards@xmpp.org.</p>
  </li>
  <li>
    <p>protoxep.py</p>
    <p>This script announces availability of a new "proto-XEP" (i.e., a document not yet accepted as a XEP by the XMPP Council) by sending a message to standards@xmpp.org. Before running this script, place the new proto-XEP so that it is available at http://xmpp.org/extensions/inbox/ (normally this is done by running 'xsltproc inbox/docname.xml > /var/www/vhosts/xmpp.org/extensions/inbox/docname.html' from the editor's working SVN directory on the webserver).</p>
  </li>
</ol>
</section2>

<section2 topic='Shell Scripts' anchor='tools-shell'>
<p>Several shell scripts are under source control. These are:</p>
<ol>
  <li>
    <p>all.sh</p>
    <p>This script converts all XEP XML files into HTML and PDF. Use this if the xep.xsl file changes in ways that affect all XEPs. But make sure that SVN is synced up first -- you don't want to be publishing interim versions of XEPs!</p>
  </li>
  <li>
    <p>archive.sh</p>
    <p>This script archives the version of a XEP currently on the website. Run this script before publishing a new version!</p>
  </li>
</ol>
</section2>

</section1>

</xep>
