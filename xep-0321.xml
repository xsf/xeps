<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Remote Roster Management</title>
  <abstract>This document defines a way remote entities may manage user's roster to provide a simple way to keep rosters in sync.</abstract>
  &LEGALNOTICE;
  <number>0321</number>
  <status>Deferred</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0001</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0100</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  <author>
    <firstname>Sergey</firstname>
    <surname>Dobrov</surname>
    <email>binary@jrudevels.org</email>
    <jid>binary@jrudevels.org</jid>
  </author>
  <author>
    <firstname>Jan</firstname>
    <surname>Kalu&#382;a</surname>
    <email>hanzz.k@gmail.com</email>
    <jid>hanzz@njs.netlab.cz</jid>
  </author>
  <revision>
    <version>0.1</version>
    <date>2013-04-16</date>
    <initials>psa</initials>
    <remark><p>Initial published version approved by the XMPP Council.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2012-12-07</date>
    <initials>snd</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>It's often desirable for some XMPP based services to make it possible to manage user's roster to provide some contacts there. The most obvious example of such kind of service is a gateway to some legacy IM system (see &xep0100;). The current way that's recommended by the &xep0100; is to use the &xep0144; to synchronize items that's not sutiable in certain situations.</p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>This document addresses the following requirements:</p>
  <ol>
    <li>Make it possible for remote services or entities to manage user's roster by the same mechanisms that descibed in the &rfc6121;.</li>
    <li>Provide a way for user to control which services have permission to manage his roster.</li>
  </ol>
</section1>
<section1 topic='Glossary' anchor='glossary'>
  <ul>
    <li><strong>Remote entity</strong> — the entity that wants to modify user's roster.</li>
    <li><strong>User</strong> — the entity which roster the remote entity wants to have access to.</li>
    <li><strong>User's server</strong> — the XMPP server User connected to.</li>
    <li><strong>Roster</strong> — the list of User's contacts as defined in the &rfc6121;.</li>
  </ul>
</section1>
<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Remote entity asks for permission to manage user&apos;s roster' anchor='ask_permission'>
    <p>In order to be able to make any changes to the user&apos;s roster the remote entity MUST ask permission to do so first.</p>
    <p>NOTE: in order to be able to perform the query, the remote entity MUST have a presence subscription to the User</p>
    <example caption='Remote entity asks for permission'><![CDATA[
<iq from='icq.example.com' to='juliet@example.com' type='set' id='roster_1'>
  <query xmlns='urn:xmpp:tmp:roster-management:0' reason='Manage contacts in the ICQ contact list' type='request'/>
</iq>]]></example>
    <p>If the presence subscription is absent, the server MUST NOT proceed with the request but MUST respond with the "forbidden" error:</p>
    <example caption="The remote entity has no presence subscription"><![CDATA[
<iq from='juliet@example.com' to='icq.example.com' type='error' id='roster_1'>
  <error type='modify'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <text xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>You must have a presence subscription to be able to request remote roster management service.</text>
  </error>
</iq>]]></example>
    <p>The user's server SHOULD then generate a form request using &xep0004; to client in order to ask user if he's OK with granting the permission to the remote entity. The "challenge" form field is generated by the server and is used to identify the client's response. The server also MUST immediatly answer to the request IQ.</p>
    <p>NOTE: if the entity is already granted with the permission, the server SHOULD immediatly answer with a success response and skip querying the user.</p>
    <example caption='Server asks user for the permission'><![CDATA[
<message from='example.com'
         to='juliet@example.com'>
  <body>icq.example.com wants to be able to manage your roster with following reason:
    Manage contacts in the ICQ contact list
    Do you want to allow it? Send "yes 5439123" or "no 5439123" back, pleas.</body>
  <x xmlns='jabber:x:data' type='form'>
    <title>Roster management permission request</title>
    <instructions>icq.example.com wants to be able to manage your roster with following reason:
      Manage contacts in the ICQ contact list.
      Do you allow it?</instructions>
    <field type='hidden' var='challenge'><value>5439123</value></field>
    <field type='hidden' var='FORM_TYPE'>
      <value>urn:xmpp:tmp:roster-management:0</value>
    </field>
    <field type='boolean'
            label='Allow icq.example.com to edit roster?'
            var='answer'>
      <value>1</value>
    </field>
  </x>
</message>]]></example>
    <p>The client can answer by submit the form or with a text message response:</p>
    <example caption='Client responds with to the data form'><![CDATA[
<message from='juliet@example.com/home'
         to='example.com'
         xml:lang='en'>
  <x xmlns='jabber:x:data' type='submit'>
    <field var='FORM_TYPE'>
      <value>urn:xmpp:tmp:roster-management:0</value>
    </field>
    <field var='challenge'><value>5439123</value></field>
    <field var='answer'><value>1</value></field>
  </x>
</message>]]></example>
    <example caption='Client responds with a text message response'><![CDATA[
<message from='juliet@example.com/home'
         to='example.com'
         xml:lang='en'>
  <body>yes 5439123</body>
</message>]]></example>
    <section3 topic='The remote entity is allowed to manage roster' anchor='pemission_granted'>
      <p>If the user allowed the roster management then the server MUST inform the remote entity that it has been granted the permission:</p>
      <example caption='The server informs the remote entity that it&apos;s allowed to manage the User&apos;s roster'><![CDATA[
<iq from='juliet@example.com' to='icq.example.com' type='set' id='roster_2'>
  <query xmlns='urn:xmpp:tmp:roster-management:0' type="allowed"/>
</iq>]]></example>
    </section3>
    <section3 topic='The remote entity is allowed to manage roster' anchor='pemission_granted'>
      <p>If the user disallowed the roster management then the server MUST inform the remote entity that it hasn&apos;t been granted the permission:</p>
      <example caption='The server informs the remote entity that it&apos;s allowed to manage the User&apos;s roster'><![CDATA[
<iq from='juliet@example.com' to='icq.example.com' type='set' id='roster_2'>
  <query xmlns='urn:xmpp:tmp:roster-management:0' type="rejected"/>
</iq>]]></example>
    </section3>
    <section3 topic="Reject the permission to manage roster">
      <p>In order to reject the permission to manage roster it's enough to reject entity's presence subscription:</p>
      <example caption='The user rejects entity&apos;s presence subscription'><![CDATA[
<presence to='icq.ecample.com' type='unsubscribed'/>]]></example>
      <p>If the presence subscription is restored then the permission is needed to be rerequested as defined above.</p>
    </section3>
  </section2>
  <section2 topic='The remote entity requests current user&apos;s roster' anchor='request_roster'>
      <p>The remote entity being granted the permission to manage roster can request it from the User's server using usual jabber:iq:roster protocol to be able to edit it:</p>
      <example caption='The remote entity requests current roster'><![CDATA[
<iq from='icq.example.com' to='juliet@example.com' type='get' id='roster_5'>
  <query xmlns='jabber:iq:roster'/>
</iq>]]></example>
      <p>The server MUST then answer with User's roster including there only the items that belongs to the entity&apos;s hostname:</p>
      <example caption='The server responds with the roster'><![CDATA[
<iq to='icq.exampel.com' from='juliet@example.com' type='result' id='roster_5'>
  <query xmlns='jabber:iq:roster'>
    <item jid='123456789@icq.example.com'
          name='Romeo'
          subscription='both'>
      <group>Friends</group>
    </item>
    <item jid='554323654@icq.example.com'
          name='Mercutio'
          subscription='from'>
      <group>Friends</group>
    </item>
    <item jid='997665667@icq.example.com'
          name='Benvolio'
          subscription='both'>
      <group>Friends</group>
    </item>
  </query>
</iq>]]></example>
  </section2>
  <section2 topic='The user updates roster' anchor='user_update'>
    <p>If client updates roster and this update affects the remote entity&apos;s contacts (i.e. belongs to it's hostname) then the server MUST forward these items to the remote entity:</p>
    <example caption='The user updates roster'><![CDATA[
<iq from='juliet@example.com/chamber' type='set' id='roster_3'>
  <query xmlns='jabber:iq:roster'>
    <item jid='123456789@icq.example.net'
          name='Romeo'
          subscription='both'>
      <group>Friends</group>
      <group>Lovers</group>
    </item>
  </query>
</iq>]]></example>
    <example caption='The server sends push roster request to the remote entity'><![CDATA[
<iq from='juliet@example.com' to='icq.example.com' type='set' id='roster_3'>
  <query xmlns='jabber:iq:roster'>
    <item jid='123456789@icq.example.net'
          name='Romeo'
          subscription='both'>
      <group>Friends</group>
      <group>Lovers</group>
    </item>
  </query>
</iq>]]></example>
  </section2>
  <section2 topic='The remote entity updates the user&apos;s roster' anchor='entity_update'>
    <p>The remote entity can also send the push query to the roster with the same semantics as specified for the jabber:iq:roster protocol described in the &rfc6121;:</p>
    <example caption='The remote entity sends push roster request'><![CDATA[
<iq to='juliet@example.com' type='set' id='roster_3'>
  <query xmlns='jabber:iq:roster'>
    <item jid='123456789@icq.example.net'
          name='Romeo'
          subscription='both'>
      <group>Friends</group>
      <group>Lovers</group>
    </item>
  </query>
</iq>]]></example>
    <p>The server MUST then inform the remote entity of success or an error and in the case of success also forward the push request to all connected User's resources.</p>
    <p>If the entity tries to make changes into the items it's not allowed to, the server MUST NOT do any changes in the User's roster but respond to the entity with an error:</p>
    <example caption='The server responds with an error'><![CDATA[
<iq from='juliet@example.com' type='set' id='roster_3'>
  <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  <text xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>You have tried to modify the item you don't allowed to.</text>
</iq>]]></example>
  </section2>
  <section2 topic='Client requests list of components with permissions to edit his roster'>
   <p>User can ask the server to provide a list of components or servers which have permissions to edit their roster.</p>
    <example caption='User asks the server to get list of components which can edit their roster'><![CDATA[
<iq from='juliet@example.com/home' to='icq.example.com' type='get' id='roster_5'>
  <query xmlns='urn:xmpp:tmp:roster-management:0'/>
</iq>
]]></example>
	<p>In this case, server responds with list of components or servers which can edit user's roster.</p>
    <example caption='Server responds with list of componentss which can edit user&apos;s roster'><![CDATA[
<iq from='juliet@example.com/home' to='icq.example.com' type='result' id='roster_5'>
  <query xmlns='urn:xmpp:tmp:roster-management:0'>
      <item jid='icq.example.com' reason='Manage ICQ contacts.'/>
      <item jid='j2j.example.com' reason='Manage Jabber gateway contacts.'/>
   </query>
</iq>
]]></example>
   <p>Eventually, user can reject permission granted to component to edit their roster.</p>

    <example caption='User rejects permissions to edit his roster'><![CDATA[
<iq from='juliet@example.com/home' to='icq.example.com' type='set' id='roster_6'>
  <query xmlns='urn:xmpp:tmp:roster-management:0' type="reject"/>
</iq>
]]></example>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:tmp:roster-management:0'
    xmlns='urn:xmpp:tmp:roster-management:0'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-XXXX: http://www.xmpp.org/extensions/xep-xxxx.html
    </xs:documentation>
  </xs:annotation>

  <xs:element name='query'>
    <xs:complexType>
      <xs:attribute name='type' use='required'>
        <xs:simpleType base='xs:NMTOKEN'>
          <xs:enumeration value='request'/>
          <xs:enumeration value='allowed'/>
          <xs:enumeration value='rejected'/>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name='reason' use='optional' type='xs:string'/>
      <xs:sequence minOccurs='0'>
        <xs:element ref='item' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='item'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='jid' type='fullJIDType' use='required'/>
          <xs:attribute name='reason' type='xs:string' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

</xs:schema>
]]></code>
</section1>
</xep>
