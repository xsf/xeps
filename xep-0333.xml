<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Chat Markers</title>
  <abstract>This specification describes a solution of marking the last received, displayed and acknowledged message in a chat.</abstract>
  &LEGALNOTICE;
  <number>0333</number>
  <status>Proposed</status>
  <lastcall>2017-02-22</lastcall>
  <lastcall>2017-02-11</lastcall>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0001</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  <author>
    <firstname>Spencer</firstname>
    <surname>MacDonald</surname>
    <email>im@spencermacdonald.com</email>
    <jid>im@spencermacdonald.com</jid>
  </author>
  <revision>
    <version>0.2.1</version>
    <date>2015-10-28</date>
    <initials>XEP Editor (mam)</initials>
    <remark><p>Fixing typo ("cannot" repeated twice) (JC Brand).</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2013-09-05</date>
    <initials>sdm</initials>
    <remark><p>Moved Thread outside of the Chat Marker.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2013-07-11</date>
    <initials>psa</initials>
    <remark><p>Initial published version approved by the XMPP Council.</p></remark>
  </revision>
  <revision>
    <version>0.0.4</version>
    <date>2013-07-06</date>
    <initials>sdm</initials>
    <remark>
      <p>Noted that Chat Markers is a heuristic solution.</p>
      <p>Added markable element.</p>
    </remark>
  </revision>
  <revision>
    <version>0.0.3</version>
    <date>2013-06-20</date>
    <initials>sdm</initials>
    <remark>
      <p>Changed read Chat Marker to displayed.</p>
      <p>Removed stamp from Chat Marker.</p>
      <p>Added thread to Chat Marker.</p>
      <p>Changed namespace to allow for versioning.</p>
    </remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2013-06-11</date>
    <initials>sdm</initials>
    <remark><p>Change to a message based protocol.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2013-05-24</date>
    <initials>sdm</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>The concept of delivery and read receipts has been popularised by other messaging services such as iMessage, Google Hangouts and Blackberry Messenger. 
  These services provide a visual indication of when a message has been delivered to any of the recipients resources and (optionally) when it has been read. 
  These visual indications (referred to herein as "Chat Markers") are synced between all of the sender's 
  and recipient's resources automatically, so the state of a chat is always consistent. 
  If one or more of the resources is not connected, it can fetch Chat Markers from the Message Archive upon reconnecting.</p>
	<p>&xep0184; currently provides delivery receipts on a per message basis, 
	but it does not provide any mechanism for the user to indicate that they have read or acknowledged the message. 
	As delivery receipts are sent on a per message basis it would require multiple messages to "sync up" up delivery receipts between resources.</p>
  <p>Moreover by using &xep0085; you could infer that a message has been read by the recipient, if they become active at any point after the message has been delivered, but again it would require multiple messages to "sync up" chat states between resources.</p>
	<p>This XEP outlines an efficient message based protocol to provide this functionally using Chat Markers.</p>
  <p class='box'><em>Note: Chat Markers do not mark each individual message, nor do they assume a reliable transport. This means that Chat Markers can only provide a heuristic solution, but this is often satisfactory for the majority of use cases.</em></p>
</section1>

<section1 topic='Terminology' anchor='terms'>
  <p>The term "active chat" refers to a chat that a user is currently active in. See &xep0085;.</p>
  <p>The term "system notification" refers to a notification (typically a preview) that is displayed separately to a Chat.</p>
  <p>The term "read" in the context of iMessage, Google Hangouts and Blackberry Messenger, directly maps to the displayed element in the Chat Marker namespace.</p>
  <p>The term "markable message" refers to the stanza for which the original sender would like to receive a Chat Marker.</p>
  <p>The term "Chat Marker" refers to the stanza by which the recipient replies to a "markable message" with a marker.</p>
</section1>

<section1 topic='Requirements' anchor='reqs'>
  <p>This document addresses the following requirements:</p>
  <ol>
    <li>Enable a client to mark a message as markable.</li>
    <li>Enable a client to mark the last received message in a chat.</li>
    <li>Enable a client to mark the last displayed message in a chat.</li>
    <li>Enable a client to mark the last acknowledged message in a chat.</li>
    <li>Enable a client to fetch and set Chat Markers regardless of wether the other users in a chat are online.</li>
  </ol>
</section1>

<section1 topic='Determining support' anchor='disco'>
	<p>If an entity supports the Chat Markers protocol, it MUST report that by including a &xep0030;
	 feature of "urn:xmpp:chat-markers:0" in response to disco#info requests:</p>
<example caption='Client queries for server features'>
<![CDATA[
<iq type='get' id='disco1' to='capulet.lit' from='juliet@capulet.lit/balcony'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]>
</example>

<example caption='Entity responds with features'>
<![CDATA[
<iq type='result' id='disco1' from='capulet.lit' to='juliet@capulet.lit/balcony'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='urn:xmpp:chat-markers:0'/>
    ...
  </query>
</iq>
]]>
</example>

	<p>Support can also be determined via &xep0115;, a.k.a. "caps".</p>
</section1>

<section1 topic='When to send Chat Markers and markable messages' anchor='when'>
  <section2 topic='Bare JID' anchor='when-bare'>
    <p>If the sender knows only the recipient's bare JID, it cannot determine (via &xep0030; or &xep0115;) whether the intended recipient supports the Chat Markers protocol. In this case, the sender MAY send a Chat Marker or markable message.</p>
  </section2>
  <section2 topic='Full JID' anchor='when-full'>
    <p>If the sender knows a full JID for the recipient (e.g., via presence), it SHOULD attempt to determine (via service disco or entity capabilities) whether the client at that full JID supports the Chat Markers protocol before attempting to send a Chat Marker or markable message.</p>
    <p>If the sender determines that the recipient's client does not support the Chat Markers protocol then it SHOULD NOT send Chat Markers or markable messages.</p>
    <p>If the sender determines that the recipient's client supports the Chat Markers protocol then it MAY send a Chat Marker or markable message to that full JID.</p>
  </section2>
  <section2 topic='Chat Marker' anchor='when-chat-marker'>
    <p>To prevent looping, an entity MUST NOT send a Chat Maker to mark up to a Chat Marker.</p>
  </section2>
</section1>

<section1 topic='Protocol Format' anchor='format'>
  <p>Chat Markers use a dedicated protocol extension qualified by the 'urn:xmpp:chat-markers:0' namespace.</p>
  <p>There are 4 allowable elements in the namespace, the first 'markable' indicates that a message can be marked with a Chat Marker and is therefore a "markable message".</p>
  <p>The 3 other allowable elements in this namespace are used to mark a message (in order of significance):</p>
  <ul>
    <li>received -- the message has been received by a client.</li>
    <li>displayed -- the message has been displayed to a user in a active chat and not in a system notification.</li>
    <li>acknowledged -- the message has been acknowledged by some user interaction e.g. pressing an acknowledgement button.</li>
  </ul>

  <p>The Chat Marker MUST have an 'id' which is the 'id' of the message being marked.</p>
  <p>The Chat Marker message stanza MUST have a 'thread' child element if the message has been received, displayed or acknowledged in the context of a thread.</p>
  <p>A Chat Marker Indicates that all messages up to and including that message 'id' have been marked. If a thread is supplied, a Chat Marker is only valid in the context of that thread.</p>
  
<example caption='Example Content Message with a markable Chat Marker'>
<![CDATA[      
<message
    from='northumberland@shakespeare.lit/westminster'
    id='message-1'
    to='kingrichard@royalty.england.lit/throne'>
  <thread>sleeping</thread>
  <body>My lord, dispatch; read o'er these articles.</body>
  <markable xmlns='urn:xmpp:chat-markers:0'/>
</message>
]]>
</example>

<p class='box'>Note: A sender MUST include an 'id' attribute on every markable message.</p>

<p>If recipient does not support the Chat Markers protocol it SHOULD NOT return an error.</p>

<example caption='Example Message marked with a recieved Chat Marker'>
<![CDATA[      
<message
    from='kingrichard@royalty.england.lit/throne'
    id='message-2'
    to='northumberland@shakespeare.lit/westminster'>
  <thread>sleeping</thread>
  <received xmlns='urn:xmpp:chat-markers:0' 
               id='message-1'/>
</message>
]]>
</example>
  <p>When the recipient sends a Chat Marker, it SHOULD ensure that the message stanza contains only the Chat Marker child element and optionally (when appropriate) a thread child element. Naturally, intermediate entities might add other extension elements to the message when routing or delivering the receipt message, e.g., a &lt;delay/&gt; element as specified in &xep0203;.</p>
</section1>

<section1 topic='Requirements' anchor='requirements'>
  <p>Clients SHOULD use &xep0280; to support multiple online resources.</p>
  <p>Clients SHOULD use &xep0136; or &xep0313; to support offline updating of Chat Markers. Chat Markers SHOULD be archived, so they can be fetched and set regardless of whether the other users in a chat are online.</p>
  <p>Messages MUST have an 'id' to use Chat Markers.</p>
  <p>Messages MUST include the 'markable' element to use Chat Markers.</p>
  <p>Chat Markers MUST only move forward. If a Chat Maker is received for an earlier message than the current Chat Marker, it MUST be ignored by the client.
  </p>
  <p>Chat Markers for unknown messages MUST be ignored by the client. A client MAY store the Chat Marker incase the associated message is retrieved later.
  </p>
</section1>

<section1 topic='Business Rules' anchor='rules'>
  <section2 topic='Optimizations' anchor='chatstates'>
    <p>Less Significant Chat Markers SHOULD only be sent if they are later than the more significant Chat Marker i.e. if a Message has been marked as displayed, 
      a received Chat Marker should only be sent if it has a later timestamp than the displayed Chat Marker.</p>
    <p>To avoid sending redundant Chat Markers while retrieving archived messages, Chat Markers SHOULD only be sent after retrieving the most recent message for a chat.</p>
    <p>Only Messages that can be displayed in a chat SHOULD be markable.</p>
  </section2>
  <section2 topic='Never Auto Acknowledge' anchor='never-auto-acknowledge'>
    <p>Clients MUST NOT mark a message as acknowledged without any user interaction.</p>
  </section2>
  <section2 topic='Marking Sent Messages' anchor='marking-sent-messages'>
    <p>Clients MAY mark a sent or received message, as Chat Markers are inclusive of of both previously sent and received messages.</p>
  </section2>
  <section2 topic='Interaction with Delivery Receipts' anchor='receipts'>
    <p>Chat Markers MAY be used alongside Delivery Receipts.</p>
  </section2>
  <section2 topic='Interaction with Chat States' anchor='chatstates'>
    <p>Chat Markers MAY be used alongside Chat States.</p>
  </section2>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>A user may not wish to disclose that they have received, displayed or acknowledge a message.</p>
  <p>It is possible for a sender to leak its presence when updating Chat Markers; 
    therefore, a sender SHOULD NOT send Chat Markers to recipients who are not otherwise authorized to view its presence.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with the Internet Assigned Numbers Authority (IANA).</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
	<p>This specification defines the following XML namespace:</p>
    <ul>
      <li>'urn:xmpp:chat-markers:0'</li>
    </ul>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code>
<![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema attributeFormDefault="unqualified" 
  elementFormDefault="qualified" 
  targetNamespace="urn:xmpp:chat-markers:0" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema">
    
  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0333: http://xmpp.org/extensions/xep-0333.html
    </xs:documentation>
  </xs:annotation>
  
  <xs:element name="markable">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="received">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute type="xs:string" name="id"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="displayed">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute type="xs:string" name="id"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  
  
  <xs:element name="acknowledged">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute type="xs:string" name="id"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  
</xs:schema>
]]>
</code>
</section1>
</xep>
