<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
  <header>
    <title>Jingle HTTP Transport Method</title>
    <abstract>This specification defines two Jingle transport methods for establishing HTTP connections for either uploading or downloading data.</abstract>
    &LEGALNOTICE;
    <number>0370</number>
    <status>Experimental</status>
    <type>Standards Track</type>
    <sig>Standards</sig>
    <approver>Council</approver>
     <dependencies>
      <spec>XMPP Core</spec>
      <spec>XEP-0166</spec>
    </dependencies>
    <supersedes/>
    <supersededby/>
    <shortname>NOT_YET_ASSIGNED</shortname>
    &lance;
    <revision>
      <version>0.1</version>
      <date>2016-01-12</date>
      <initials>XEP Editor (mam)</initials>
      <remark><p>Initial published version approved by the XMPP Council.</p></remark>
    </revision>
    <revision>
      <version>0.0.2</version>
      <date>2016-01-07</date>
      <initials>ljts</initials>
      <remark><p>Renamed &lt;uploaded/&gt; to &lt;completed/&gt;, and made it a child of the &lt;transport/&gt; element in transport-info events.</p></remark>
    </revision>
    <revision>
      <version>0.0.1</version>
      <date>2015-07-30</date>
      <initials>ljts</initials>
      <remark><p>First draft.</p></remark>
    </revision>
  </header>

  <section1 topic='Introduction' anchor='intro'>
    <p>&xep0166; defines a framework for negotiating and managing out-of-band data sessions over XMPP. In order to provide a flexible framework, the base Jingle specification defines neither data transport methods nor application formats, leaving that up to separate specifications.</p>

    <p>The current document defines two transport methods for establishing and managing data exchanges between XMPP entities using the Hyper Text Transfer Protocol (HTTP, see &rfc2616;); one method is for sharing via pulling data from an HTTP URI (http-download), and the other is for sharing via pushing data to an HTTP URI (http-upload).</p>
  </section1>

  <section1 topic='Requirements' anchor='reqs'>
    <p>Historically, &xep0066; has been used to trigger downloading files via HTTP, as well as initiating the use of any other known URI scheme. However, it has several limitations:</p>
    <ul>
      <li>It only allows for the downloading of files via HTTP, not uploading.</li>
      <li>It can not specify any additional headers that might be necessary for downloading files (authentication tokens, etc).</li>
      <li>The allowance of any URI scheme makes it too unwieldy to be integrated into Jingle the way SOCKS5 Bytestreams and In-Band Bytestreams were (see &xep0260; and &xep0261;).</li>
    </ul>
    <p>As such, this document defines two Jingle mechanisms designed to meet the following requirements:</p>
    <ul>
      <li>Allow for both uploading and downloading of data via HTTP.</li>
      <li>Allow additional HTTP headers to be specified.</li>
      <li>Restrict the URI scheme to HTTP/HTTPS.</li>
    </ul>
  </section1>

  <section1 topic='Jingle Conformance' anchor='conformance'>
   <p>In accordance with Section 12 of <cite>XEP-0166</cite>, this document specifies the following information related to both the Jingle http-download and http-upload transport methods:</p>
   <ol>
     <li><p>The transport negotiation process for http-download is defined in the <link url='#download'>Negotiating HTTP Download</link> section of this document, and the negotation process for http-upload is defined in the <link url='#upload'>Negotiating HTTP Upload</link> section of this document.</p></li>
     <li><p>The semantics of the &TRANSPORT; element are defined in the <link url='#download'>Negotiating HTTP Download</link> and <link url='#upload'>Negotiating HTTP Upload</link> sections of this document.</p></li>
     <li><p>Successful negotiation of both the http-download and http-upload methods results in use of a streaming transport method suitable for use in Jingle application types where packet loss cannot be tolerated (e.g., file transfer).</p></li>
     <li><p>Multiple components are not supported by http-download or http-upload.</p></li>
   </ol>
  </section1>

  <section1 topic='Negotiating HTTP Download' anchor='download'>
    <p>Negotiating HTTP downloads is done by using a &TRANSPORT; element with the 'urn:xmpp:jingle:transports:http:0' namespace, &VNOTE;. This element MAY include &lt;candidate/&gt; elements which represent URIs where data can be downloaded. Each &lt;candidate/&gt; element MUST include a 'uri' attribute, and MAY contain &lt;header/&gt; elements whose 'name' attribute is an HTTP header and whose text content is the HTTP header value.</p>
    <code><![CDATA[
<transport xmlns='urn:xmpp:jingle:transports:http:0'>
  <candidate uri='https://files.montague.example/ERUN8970'>
    <header name='authorization'>Bearer 7472327205ffb74d10b11363044d8c24e3ddba12</header>
  </candidate>
</transport>]]></code>
    <p>Multiple candidates MAY be provided, indicating that there are multiple URIs from which the data can be retrieved (e.g. multiple candidates could be included to list the primary URI of a file along with several known mirrors).</p>
    <code><![CDATA[
<transport xmlns='urn:xmpp:jingle:transports:http:0'>
  <candidate uri='https://files.montague.example/ERUN8970' />
  <candidate uri='https://mirror1.montague.example/ERUN8970' />
  <candidate uri='https://mirror2.montague.example/ERUN8970' />
</transport>]]></code>
    <p>The generation of candidates is based on the Jingle content senders, and only the parties specified to send data SHOULD provide candidates.</p>
    <p>Upon receiving an HTTP download candidate, parties that are to receive data (based on the Jingle content senders) SHOULD use an HTTP GET request to the candidate URI to fetch the data.</p>
    <p>Entities MAY initially provide an empty set of candidates if a suitable download URI is not yet known; advertising candidates later is done with transport-info actions.</p>

    <table caption='Summary of Roles in Jingle HTTP Download'>
      <tr>
        <th>Content Creator</th>
        <th>Content Senders</th>
        <th>Who Sends Download Candidates</th>
        <th>Who performs HTTP GET</th>
      </tr>
      <tr>
        <td rowspan='4'>initiator</td>
        <td>initiator</td>
        <td>initiator</td>
        <td>responder</td>
      </tr>
      <tr>
        <td>responder</td>
        <td>responder</td>
        <td>initiator</td>
      </tr>
      <tr>
        <td>both</td>
        <td>both</td>
        <td>both</td>
      </tr>
      <tr>
        <td>none</td>
        <td>none</td>
        <td>none</td>
      </tr>
      <tr>
        <td rowspan='4'>responder</td>
        <td>initiator</td>
        <td>initiator</td>
        <td>responder</td>
      </tr>
      <tr>
        <td>responder</td>
        <td>responder</td>
        <td>initiator</td>
      </tr>
      <tr>
        <td>both</td>
        <td>both</td>
        <td>both</td>
      </tr>
      <tr>
        <td>none</td>
        <td>none</td>
        <td>none</td>
      </tr>
    </table>
  </section1>

  <section1 topic='Negotiating HTTP Upload' anchor='upload'>
    <p>Negotiating HTTP uploads is done by using a &TRANSPORT; element with the 'urn:xmpp:jingle:transports:http:upload:0' namespace, &VNOTE;. This element MAY include a  &lt;candidate/&gt; element which represents a URI where data can be uploaded. The &lt;candidate/&gt; element MUST include a 'uri' attribute, and MAY contain &lt;header/&gt; elements whose 'name' attribute is an HTTP header and whose text content is the HTTP header value.</p>
    <code><![CDATA[
<transport xmlns='urn:xmpp:jingle:transports:http:upload:0'>
  <candidate uri='https://files.montague.example/ERUN8970'>
    <header name='authorization'>Bearer 7472327205ffb74d10b11363044d8c24e3ddba12</header>
  </candidate>
</transport>]]></code>
    <p>The generation of candidates is based on the Jingle content senders, and only the parties specified to receive data SHOULD provide candidates.</p>
    <p>Upon receiving an HTTP upload candidate, parties that are to send data (based on the Jingle content senders) SHOULD use an HTTP PUT request to the candidate URI, where the request body is the data to be transferred.</p>

    <table caption='Summary of Roles in Jingle HTTP Upload'>
      <tr>
        <th>Content Creator</th>
        <th>Content Senders</th>
        <th>Who Sends Upload Candidates</th>
        <th>Who Performs HTTP PUT</th>
      </tr>
      <tr>
        <td rowspan='4'>initiator</td>
        <td>initiator</td>
        <td>responder</td>
        <td>initiator</td>
      </tr>
      <tr>
        <td>responder</td>
        <td>initiator</td>
        <td>responder</td>
      </tr>
      <tr>
        <td>both</td>
        <td>both</td>
        <td>both</td>
      </tr>
      <tr>
        <td>none</td>
        <td>none</td>
        <td>none</td>
      </tr>
      <tr>
        <td rowspan='4'>responder</td>
        <td>initiator</td>
        <td>responder</td>
        <td>initiator</td>
      </tr>
      <tr>
        <td>responder</td>
        <td>initiator</td>
        <td>responder</td>
      </tr>
      <tr>
        <td>both</td>
        <td>both</td>
        <td>both</td>
      </tr>
      <tr>
        <td>none</td>
        <td>none</td>
        <td>none</td>
      </tr>
    </table>

    <p>See <link url='#upload-complete'>Upload Complete</link> for signaling that the upload process has been completed.</p>
  </section1>

  <section1 topic='Informational Messages' anchor='info'>
    <section2 topic='Upload Complete'>
      <p>A common case for using http-upload is to delegate the storage of the uploaded data to an external hosting service, which means that the receiver might not have the direct ability to know when the uploaded data is ready.</p>
      <p>As such, when an upload transfer is used, the party uploading content SHOULD signal when the upload has completed by sending a Jingle transport-info event that specifies the content for which uploading has completed, and includes a &lt;transport/&gt; element qualified by the 'urn:xmpp:jingle:transports:http:upload:0' namespace, which in turn contains a &lt;completed /&gt; element.</p>
      <example caption='Signaling that the upload has completed'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='uw72g176'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='transport-info'>
    <content creator='initiator' name='file-upload'>
      <transport xmlns='urn:xmpp:jingle:transports:http:upload:0'>
        <completed />
      </transport>
    </content>
  </jingle>
</iq>]]></example>
    </section2>
  </section1>

  <section1 topic='Examples'>
    <section2 topic='Offering a File using HTTP Download'>
      <p>Here, Romeo is offering to send a file to Juliet, so he includes a download URI candidate with his session-initiate.</p>
      <example caption='Offering a file with a download URI'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='nzu25s8'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer' senders='initiator'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4'>
        <file>
          <date>1969-07-21T02:56:15Z</date>
          <desc>This is a test. If this were a real file...</desc>
          <media-type>text/plain</media-type>
          <name>test.txt</name>
          <range/>
          <size>6144</size>
          <hash xmlns='urn:xmpp:hashes:1' algo='sha-1'>552da749930852c69ae5d2141d3766b1</hash>
        </file>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:http:0'>
        <candidate uri='https://files.montague.example/test.txt' />
      </transport>
    </content>
  </jingle>
</iq>]]></example>
      <p>Juliet accepts the offer, and then performs an HTTP GET to retrieve the file.</p>
      <example caption='Accepting an offered file using HTTP download'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='nzu25s8'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-accept'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer' senders='initiator'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4' />
      <transport xmlns='urn:xmpp:jingle:transports:http:0' />
    </content>
  </jingle>
</iq>]]></example>
    </section2>

    <section2 topic='Requesting a File using HTTP Download'>
      <p>Here Romeo is requesting Juliet to send a file by sharing a download URI.</p>
      <example caption='Requesting a file and download URI'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='nzu25s8'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-request' senders='responder'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4'>
        <file>
          <hash xmlns='urn:xmpp:hashes:1' algo='sha-1'>552da749930852c69ae5d2141d3766b1</hash>
        </file>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:http:0' />
    </content>
  </jingle>
</iq>]]></example>
      <p>Juliet accepts the request, and includes a download URI in her session-accept.</p>
      <example caption='Returning download URI'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='nzu25s8'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-accept'
          sid='851ba2'>
    <content creator='initiator' name='a-file-request' senders='responder'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4' />
        <file>
          <date>1969-07-21T02:56:15Z</date>
          <media-type>text/plain</media-type>
          <name>test.txt</name>
          <range/>
          <size>6144</size>
          <hash xmlns='urn:xmpp:hashes:1' algo='sha-1'>552da749930852c69ae5d2141d3766b1</hash>
        </file>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:http:0'>
        <candidate uri='https://files.capulet.example/test.txt' />
      </transport>
    </content>
  </jingle>
</iq>]]></example>
      <p>Romeo then retrieves the file using an HTTP GET request.</p>
    </section2>

    <section2 topic='Offering a File using HTTP Upload'>
      <p>In this case, Romeo is offering a file to Juliet but wishes to upload it to her.</p>
      <example caption='Offering to upload a file'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='nzu25s8'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer' senders='initiator'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4'>
        <file>
          <date>1969-07-21T02:56:15Z</date>
          <desc>This is a test. If this were a real file...</desc>
          <media-type>text/plain</media-type>
          <name>test.txt</name>
          <range/>
          <size>6144</size>
          <hash xmlns='urn:xmpp:hashes:1' algo='sha-1'>552da749930852c69ae5d2141d3766b1</hash>
        </file>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:http:upload:0' />
    </content>
  </jingle>
</iq>]]></example>
      <p>Juliet accepts, and provides a candidate with an upload URI that includes an authorization header.</p>
      <example caption='Accepting the session and providing an upload URI'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='nzu25s8'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-accept'
          sid='851ba2'>
    <content creator='initiator' name='a-file-request' senders='responder'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4' />
      <transport xmlns='urn:xmpp:jingle:transports:http:upload:0'>
        <candidate uri='https://files.capulet.example/ERIE32430'>
          <header name='authorization'>Bearer 7472327205ffb74d10b11363044d8c24e3ddba12</header>
        </candidate>
      </transport>
    </content>
  </jingle>
</iq>]]></example>
      <p>Romeo now uses an HTTP PUT to upload his file. Once the upload is complete, he informs Juliet so she knows the file is ready for to read.</p>
      <example caption='Signaling that the upload has completed'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='uw72g176'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='transport-info'
          sid='851ba2'>
    <content creator='initiator' name='file-upload'>
      <transport xmlns='urn:xmpp:jingle:transports:http:upload:0'>
        <completed />
      </transport>
    </content>
  </jingle>
</iq>]]></example>
    </section2>

    <section2 topic='Requesting a File using HTTP Upload'>
      <p>Here Romeo asks Juliet to upload a file.</p>
      <example caption='Offering a file with a download URI'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='nzu25s8'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer' senders='initiator'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4'>
        <file>
          <hash xmlns='urn:xmpp:hashes:1' algo='sha-1'>552da749930852c69ae5d2141d3766b1</hash>
        </file>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:http:upload:0'>
        <candidate uri='https://files.montague.example/test.txt' />
      </transport>
    </content>
  </jingle>
</iq>]]></example>
      <p>Juliet accepts the session, and begins uploading the file data with an HTTP PUT request.</p>
      <example caption='Accepting the session'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='nzu25s8'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='session-accept'
          sid='851ba2'>
    <content creator='initiator' name='a-file-request' senders='responder'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:4' />
        <file>
          <date>1969-07-21T02:56:15Z</date>
          <media-type>text/plain</media-type>
          <name>test.txt</name>
          <range/>
          <size>6144</size>
          <hash xmlns='urn:xmpp:hashes:1' algo='sha-1'>552da749930852c69ae5d2141d3766b1</hash>
        </file>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:http:upload:0'>
    </content>
  </jingle>
</iq>]]></example>

      <p>Once the upload is complete, she informs Romeo that she has completed the upload so that he knows he can access the data he requested.</p>
      <example caption='Signaling that the upload has completed'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='uw72g176'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:1'
          action='transport-info'
          sid='851ba2'>
    <content creator='initiator' name='file-upload'>
      <transport xmlns='urn:xmpp:jingle:transports:http:upload:0'>
        <completed />
      </transport>
    </content>
  </jingle>
</iq>]]></example>
    </section2>
  </section1>

  <section1 topic='Determining Support' anchor='support'>
    <p>To advertise its support for the Jingle HTTP Transport Method, when replying to &xep0030; information requests an entity MUST return URNs for any version of this protocol that the entity supports -- e.g., "urn:xmpp:jingle:transports:http:0" for this version &VNOTE;.</p>
    <example caption="Service discovery information request"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='uw72g176'
    to='juliet@capulet.lit/balcony'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]></example>
    <example caption="Service discovery information response"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='uw72g176'
    to='romeo@montague.lit/orchard'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='urn:xmpp:jingle:1'/>
    <feature var='urn:xmpp:jingle:transports:http:0'/>
    <feature var='urn:xmpp:jingle:transports:http:upload:0'/>
  </query>
</iq>]]></example>
    <p>In order for an application to determine whether an entity supports this protocol, where possible it SHOULD use the dynamic, presence-based profile of service discovery defined in &xep0115;. However, if an application has not received entity capabilities information from an entity, it SHOULD use explicit service discovery instead.</p>
  </section1>

  <section1 topic='Security Considerations' anchor='security'>
    <p>HTTP URI candidates SHOULD use the "https://" URI scheme instead of "http://", and entities MAY refuse to process URIs that are not "https://".</p>
    <p>Certain HTTP headers can cause unintended behaviour, such as using the 'Upgrade' header to trigger a conversion to WebSocket (&rfc6455;).</p>
  </section1>

  <section1 topic='IANA Considerations' anchor='iana'>
    <p>No interaction with &IANA; is required as a result of this document.</p>
  </section1>

  <section1 topic='XMPP Registrar Considerations' anchor='registrar'>
    <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
      <p>This specification defines the following XML namespaces:</p>
      <ul>
        <li>urn:xmpp:jingle:transports:http:0</li>
        <li>urn:xmpp:jingle:transports:http:upload:0</li>
        <li>urn:xmpp:jingle:transports:http:info:0</li>
      </ul>
      <p>The &REGISTRAR; includes the foregoing namespace in its registry of protocol namespaces at &NAMESPACES;, as described in Section 4 of &xep0053;.</p>
    </section2>
    <section2 topic='Namespace Versioning' anchor='registrar-versioning'>
      &NSVER;
    </section2>
    <section2 topic='Jingle Transport Methods' anchor='registrar-content'>
    <p>The &REGISTRAR; includes "http-download" in its registry of Jingle transport methods at &JINGLETRANSPORTS;. The registry submission is as follows:</p>
      <code><![CDATA[
<transport>
  <name>http-download</name>
  <desc>
    A method for negotiating data exchange via HTTP URI retrieval.
  </desc>
  <type>streaming</type>
  <doc>XEP-XXXX</doc>
</transport>]]></code>
    <p>The &REGISTRAR; includes "http-upload" in its registry of Jingle transport methods at &JINGLETRANSPORTS;. The registry submission is as follows:</p>
      <code><![CDATA[
<transport>
  <name>http-upload</name>
  <desc>
    A method for negotiating data exchange via uploading to HTTP URIs.
  </desc>
  <type>streaming</type>
  <doc>XEP-XXXX</doc>
</transport>]]></code>
    </section2>
  </section1>

  <section1 topic='XML Schema' anchor='schema'>
    <section2 topic='urn:xmpp:jingle:transports:http:0'>
      <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:jingle:transports:http:0'
    xmlns='urn:xmpp:jingle:transports:http:0'
    elementFormDefault='qualified'>

  <xs:element name='transport'>
    <xs:complexType>
      <xs:all minOccurs='0'>
        <xs:element name='candidate' type='httpSlotType' maxOccurs='unbounded' />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:complexType name='httpSlotType'>
    <xs:all minOccurs='0'>
      <xs:element ref='header' maxOccurs='unbounded' />
    </xs:all>
    <xs:attribute name='uri' type='xs:anyURI' use='required' />
  </xs:complexType>

  <xs:element name='header'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute name='name' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

</xs:schema>]]></code>
    </section2>

    <section2 topic='urn:xmpp:jingle:transports:http:upload:0'>
      <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:jingle:transports:http:upload:0'
    xmlns='urn:xmpp:jingle:transports:http:upload:0'
    elementFormDefault='qualified'>

  <xs:element name='transport'>
    <xs:complexType>
      <xs:all minOccurs='0'>
        <xs:element name='completed' maxOccurs='1' />
        <xs:element name='candidate' type='httpSlotType' maxOccurs='unbounded' />
      </xs:all>
    </xs:complexType>
  </xs:element>

  <xs:complexType name='httpSlotType'>
    <xs:all minOccurs='0'>
      <xs:element ref='header' maxOccurs='unbounded' />
    </xs:all>
    <xs:attribute name='uri' type='xs:anyURI' use='required' />
  </xs:complexType>

  <xs:element name='header'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute name='name' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

</xs:schema>]]></code>
    </section2>
  </section1>
</xep>
