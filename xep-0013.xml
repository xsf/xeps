<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Flexible Offline Message Retrieval</title>
  <abstract>This specification defines an XMPP protocol extension for flexible, POP3-like handling of offline messages. The protocol enables a connecting client to retrieve its offline messages on login in a controlled fashion, without receiving a flood of messages. Messages can also be left on the server for later retrieval.</abstract>
  &LEGALNOTICE;
  <number>0013</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0082</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>offline</shortname>
  <schemaloc>
    <url>http://www.xmpp.org/schemas/offline.xsd</url>
  </schemaloc>
  &stpeter;
  <author>
    <firstname>Craig</firstname>
    <surname>Kaes</surname>
    <email>ckaes@jabber.com</email>
    <jid>ckaes@corp.jabber.com</jid>
  </author>
  <revision>
    <version>1.2</version>
    <date>2005-07-14</date>
    <initials>psa</initials>
    <remark>Added use case for retrieving number of messages; defined registar considerations more completely.</remark>
  </revision>
  <revision>
    <version>1.1</version>
    <date>2004-01-22</date>
    <initials>psa</initials>
    <remark>Editorial revisions.</remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2003-09-09</date>
    <initials>psa</initials>
    <remark>Per a vote of the Jabber Council, advanced status to Draft.</remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2003-08-25</date>
    <initials>psa</initials>
    <remark>More changes to address Council feedback: removed bandwidth rationale in requirements; added protocol flow section; adjusted semantics for node values (opaque, but dictionary ordering allowed). Also added &lt;fetch/&gt; and &lt;purge/&gt; elements.</remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2003-08-21</date>
    <initials>psa</initials>
    <remark>Changes to address Council feedback: added error codes; enhanced the security considerations; clarified the nature of the node IDs and removed the protocol URI string (leaving only the timestamp).</remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2003-06-10</date>
    <initials>psa</initials>
    <remark>Slight fixes to XEP-0082 reference and XML schema.</remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2003-04-28</date>
    <initials>psa</initials>
    <remark>Added reference to XEP-0082; changed timestamp format to use milliseconds rather than ten-thousandths of a second; made several small editorial changes throughout.</remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2003-02-27</date>
    <initials>psa</initials>
    <remark>Major overhaul: clarified requirements, incorporated disco, simplified and updated the protocol, specified syntax and semantics for nodes, defined business rules, and added XML schema.</remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2002-10-02</date>
    <initials>cak</initials>
    <remark>Reworked to exclude XDBID performace hack, thereby maximizing palatability.  Removed all changes made by psa.</remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2002-10-02</date>
    <initials>psa</initials>
    <remark>Changed type and added information about scope.</remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2002-01-11</date>
    <initials>cak</initials>
    <remark>Initial version</remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>Although not required to do so by &xmppcore; and &xmppim;, many existing Jabber/XMPP instant messaging servers will store messages received while a user is offline and deliver them when the user is next online. Such messages are commonly called "offline messages". The current means of retrieving one's offline messages is simple: one sends available presence to the server and, as a consequence, the server sends a one-time "flood" of all the messages that have been stored while one was offline. This simplification has the following deficiencies:</p>
  <ol>
    <li><p>It can be overwhelming, which is undesirable for the vacationer or heavy user. Many individuals upon returning to work from a weeklong vacation spend the first few hours wading through the dozens, even hundreds, of emails that they received during their absence. Unlucky, however, is this user who then logs onto their Jabber server and is bombarded by hundreds of instant messages, possibly in scores of popup dialogs, simultaneously. Should their client crash, they have lost all communication that occurred while they were away.</p></li>
    <li><p>It can be difficult to integrate with web-based email clients, which is undesirable for some portals. Several large portals are currently trying to blur the distinction between IM and email -- providing both through one web interface. With offline retrieval semantics so vastly different between the two, this is quite difficult.</p></li>
  </ol>
  <p>What is needed is a flexible semantic for offline message handling, similar to POP3 in the email world (see &rfc1939;). This would enable the wireless user to view header information for all offline messages and select only those from their boss and important clients for viewing. It would enable the vacationer to read and delete their messages one at a time, minimizing the possibility of losing all correspondence. And it would provide for seamless integration with existing web-based email clients.</p>
  <p>In particular, such a protocol should support the following use cases:</p>
    <ol>
      <li>Client determines server support for this protocol.</li>
      <li>Client requests number of messages.</li>
      <li>Client requests message "header" information (thereby choosing flexible offline message retrieval as opposed to old-fashioned "flood" mode).</li>
      <li>Client retrieves specific messages.</li>
      <li>Client removes specific messages.</li>
      <li>Client retrieves all messages.</li>
      <li>Client removes all messages.</li>
    </ol>
</section1>
<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Discovering Server Support' anchor='discover'>
    <p>In order to discover whether one's server supports this protocol, one uses &xep0030;.</p>
    <example caption='User Requests Service Discovery Information'><![CDATA[
<iq type='get' to='montague.net'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <example caption='Server Reply to Discovery Request'><![CDATA[
<iq type='result'
    from='montague.net'
    to='romeo@montague.net/orchard'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='http://jabber.org/protocol/offline'/>
  </query>
</iq>
]]></example>
    <p>If the server supports this protocol, it MUST return a &lt;feature/&gt; element in the disco result with the 'var' attribute set to the namespace name for this protocol: 'http://jabber.org/protocol/offline'.</p>
  </section2>
  <section2 topic='Requesting Number of Messages' anchor='request-number'>
    <p><cite>RFC 1939</cite> includes a feature (the "STAT" command) that enables a user to determine how many messages are waiting to be retrieved (without retrieving all of the headers). Such a feature would be helpful in Jabber/XMPP as well, especially if the client is constrained with regard to storage capacity or available bandwidth.</p>
    <p>In order to determine the number of messages in the offline message queue, the user sends a disco#info request without a 'to' address (i.e., implicitly to the user himself) and with the disco node specified as 'http://jabber.org/protocol/offline':</p>
    <example caption='User Requests Information About Offline Message Node'><![CDATA[
<iq type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='http://jabber.org/protocol/offline'/>
</iq>
]]></example>
    <p>If the server supports retrieval of the number of messages, it MUST include &xep0128; data specifying the number of messages:</p>
    <example caption='Server Returns Information About Offline Message Node, Including Number of Messages'><![CDATA[
<iq type='result' to='romeo@montague.net/orchard'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='http://jabber.org/protocol/offline'>
    <identity
        category='automation'
        type='message-list'/>
    <feature var='http://jabber.org/protocol/offline'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>http://jabber.org/protocol/offline</value>
      </field>
      <field var='number_of_messages'>
        <value>66</value>
      </field>
    </x>
  </query>
</iq>
]]></example>
    <p>Upon receiving a service discovery request addressed to a node of "http://jabber.org/protocol/offline" (either a disco#info request as in this use case or a disco#items request as in the next use case), the server MUST NOT send a flood of offline messages if the user subsequently sends initial presence to the server during this session. Thus the user is now free to send initial presence (if desired) and to engage in normal IM activities while continuing to read through offline messages. However, once the user sends presence, the user's server MUST deliver in-session messages as usual; this document applies to offline messages only. In addition, if the user authenticates and provides presence for another resource while the first (non-flood) resource still has an active session, the server MUST NOT flood the second resource with the offline message queue.</p>
  </section2>
  <section2 topic='Requesting Message Headers' anchor='request-headers'>
    <p>In order to retrieve headers for all of the messages in the queue, the user sends a disco#items request without a 'to' address (i.e., implicitly to the user himself) and with the disco node specified as 'http://jabber.org/protocol/offline'.</p>
    <example caption='User Requests Offline Message Headers'><![CDATA[
<iq type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='http://jabber.org/protocol/offline'/>
</iq>
]]></example>
    <p>The server now MUST return headers for all of the user's offline messages. So that the user may determine whether to view a full message, the header information provided MUST include the full Jabber ID of the sender (encoded in the 'name' attribute) and a unique identifier for the message within the user's "inbox" (encoded in the 'node' attribute), so that the user may appropriately manage (view or remove) the message.</p>
    <example caption='Server Provides Offline Message Headers'><![CDATA[
<iq type='result' to='romeo@montague.net/orchard'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='http://jabber.org/protocol/offline'>
    <item
        jid='romeo@montague.net'
        node='2003-02-27T22:49:17.008Z'
        name='mercutio@shakespeare.lit/pda'/>
    <item
        jid='romeo@montague.net'
        node='2003-02-27T22:52:37.225Z'
        name='juliet@capulet.com/balcony'/>
    <item
        jid='romeo@montague.net'
        node='2003-02-27T22:52:51.270Z'
        name='juliet@capulet.com/balcony'/>
    <item
        jid='romeo@montague.net'
        node='2003-02-27T22:53:03.421Z'
        name='juliet@capulet.com/balcony'/>
    <item
        jid='romeo@montague.net'
        node='2003-02-27T22:53:13.925Z'
        name='juliet@capulet.com/balcony'/>
  </query>
</iq>
]]></example>
    <p>If the requester is a JID other than an authorized resource of the user (i.e., the user@host of the requester does not match the user@host of the user), the server MUST return a &forbidden; error. If the requester is authorized but the node does not exist, the server MUST return an &notfound; error. If there are no offline messages for this user, the server MUST return an empty query as defined in XEP-0030. (For information about the syntax of error conditions, refer to &xep0086;.)</p>
    <p>The syntax and semantics of the attributes are as follows:</p>
    <ul>
      <li>The 'jid' attribute is the Jabber ID with which the item nodes are associated, i.e., the user himself.</li>
      <li>The 'name' attribute is the full JID of the sender as received in the 'from' address of the message itself.</li>
      <li>The 'node' attribute is a unique identifier for the message. The value SHOULD be considered opaque, but applications MAY perform character-by-character dictionary ordering on the values. This enables applications to implement ordering on messages, such as that shown above, wherein the node values are UTC timestamps (if timestamps are used, they MUST conform to the 'Datetime' profile defined in &xep0082;).</li>
    </ul>
  </section2>
  <section2 topic='Retrieving Specific Messages' anchor='retrieve-specific'>
    <p>Messages are viewed based on the value of the 'node' attribute as provided for each item returned by the server in the header information. A user MAY request one or more messages in the same IQ get.</p>
    <example caption='User Requests Offline Messages'><![CDATA[
<iq type='get' id='view1'>
  <offline xmlns='http://jabber.org/protocol/offline'>
    <item action='view'
          node='2003-02-27T22:52:37.225Z'/>
  </offline>
</iq>
]]></example>
    <p>If the requester is a JID other than an authorized resource of the user, the server MUST return a &forbidden; error. If the requester is authorized but the node does not exist, the server MUST return an &notfound; error. Otherwise, the server MUST send the requested message(s) plus an IQ result:</p>
    <example caption='Server Provides Offline Messages'><![CDATA[
<message to='romeo@montague.net' from='juliet@capulet.com/balcony'>
  <body>O Romeo, Romeo! wherefore art thou Romeo?</body>
  <offline xmlns='http://jabber.org/protocol/offline'>
    <item node='2003-02-27T22:52:37.225Z'/>
  </offline>
</message>

<iq type='result' to='user@domain/resource' id='view1'/>
]]></example>
    <p>In order to distinguish incoming messages, each message MUST contain the node value. It is RECOMMENDED for the server to include &xep0091; information in the message.</p>
  </section2>
  <section2 topic='Removing Specific Messages' anchor='remove-specific'>
    <p>A server MUST NOT remove a message simply because it has been requested by and delivered to the user; instead, the user must specifically request to remove a message. This further implies that the user's offline message queue SHOULD NOT be automatically cleared out by the server if there are offline messages remaining when the user's session ends. However, an implementation or deployment MAY remove messages according to its own algorithms (e.g., storage timeouts based on a "first in first out" rule) or policies (e.g., message queue size limits) if desired.</p>
    <p>As with viewing, messages are removed based on the value of the 'node' attribute as provided for each item returned by the server in the header information. The user MAY request the removal of one or more messages in the same IQ set.</p>
    <example caption='User Requests Removal of Offline Messages'><![CDATA[
<iq type='set' id='remove1'>
  <offline xmlns='http://jabber.org/protocol/offline'>
    <item action='remove'
          node='2003-02-27T22:49:17.008Z'/>
    <item action='remove'
          node='2003-02-27T22:52:37.225Z'/>
  </offline>
</iq>
]]></example>
    <p>If the requester is a JID other than an authorized resource of the user, the server MUST return a &forbidden; error. If the requester is authorized but the node does not exist, the server MUST return a &notfound; error. Otherwise, the server MUST remove the messages and inform the user:</p>
    <example caption='Server Informs User of Removal'><![CDATA[
<iq type='result' to='romeo@montague.net/orchard' id='remove1'/>
]]></example>
  </section2>
  <section2 topic='Retrieving All Messages' anchor='retrieve-all'>
    <p>The user retrieves all message by sending the "fetch" command:</p>
    <example caption='User Retrieval of All Offline Messages'><![CDATA[
<iq type='get' id='fetch1'>
  <offline xmlns='http://jabber.org/protocol/offline'>
    <fetch/>
  </offline>
</iq>
]]></example>
    <p>If the requester is a JID other than an authorized resource of the user, the server MUST return a &forbidden; error. If the requester is authorized but the node does not exist, the server MUST return a &notfound; error. Otherwise, the server MUST retrieve all messages and inform the user:</p>
    <example caption='Server Sends All Messages and Informs User of Successful Fetch'><![CDATA[
<message to='romeo@montague.net' from='juliet@capulet.com/balcony'>
  <body>O Romeo, Romeo! wherefore art thou Romeo?</body>
  <offline xmlns='http://jabber.org/protocol/offline'>
    <item node='2003-02-27T22:52:37.225Z'/>
  </offline>
</message>

<iq type='result' to='romeo@montague.net/orchard' id='fetch1'/>
]]></example>
    <p>A client MAY retrieve all messages without first requesting message headers. In this case, the server MUST return all of the user's offline messages and also MUST NOT send a flood of offline messages if the user subsequently sends initial presence to the server during this session. That is, the semantics here are the same as for requesting message headers.</p>
  </section2>
  <section2 topic='Removing All Messages' anchor='remove-all'>
    <p>The user removes all message by sending the "purge" command:</p>
    <example caption='User Requests Removal of Offline Messages'><![CDATA[
<iq type='set' id='purge1'>
  <offline xmlns='http://jabber.org/protocol/offline'>
    <purge/>
  </offline>
</iq>
]]></example>
    <p>If the requester is a JID other than an authorized resource of the user, the server MUST return a &forbidden; error. If the requester is authorized but the node does not exist, the server MUST return a &notfound; error. Otherwise, the server MUST remove all messages and inform the user:</p>
    <example caption='Server Informs User of Successful Purge'><![CDATA[
<iq type='result' to='romeo@montague.net/orchard' id='purge1'/>
]]></example>
  </section2>
</section1>
<section1 topic='Protocol Flow' anchor='flow'>
  <p>This section shows the flow of protocol between client (C:) and server (S:) for the existing (flood) scenario and the improved (POP3-like) scenario.</p>
    <code><![CDATA[
C: <stream:stream ...>

S: <stream:stream ...>

C: authentication (SASL in XMPP, non-SASL in older systems)

S: acknowledge successful authentication

C: <presence/>

S: send message flood to Client

C: receive flood, send and receive messages, etc.

... and so on]]></code>
    <p>The semantics change with POP-like offline message handling, and server behavior changes as well...</p>
    <code><![CDATA[
C: <stream:stream ...>

S: <stream:stream ...>

C: authentication (SASL in XMPP, non-SASL in older systems)

S: acknowledge successful authentication

C: request message headers

S: send message headers to Client

NOTE: Server now MUST NOT flood Client with offline messages.

C: <presence/>

NOTE: Server does not flood Client with offline messages, but
      sends in-session messages as usual.

C: request and remove offline messages, send and receive messages, etc.

... and so on]]></code>
</section1>
<section1 topic='Security Considerations' anchor='sec'>
  <p>A server MUST NOT deliver a user's offline messages to any JID except one of the user's authorized resources.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>The &REGISTRAR; includes 'http://jabber.org/protocol/offline' in its registry of protocol namespaces.</p>
  </section2>
  <section2 topic='Service Discovery Identities' anchor='registrar-disco-identity'>
    <p>The XMPP Registrar includes "automation" in its registry of Service Discovery categories for use for any entities and nodes that provide automated or programmed interaction. This document specifies the following new types for the "automation" category:</p>
    <table caption='Types for Category "automation"'>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>message-list</td>
        <td>The node for the offline message queue; valid only for the node "http://jabber.org/protocol/offline".</td>
      </tr>
      <tr>
        <td>message-node</td>
        <td>A node for a specific offline message if service discovery is provided for messages.</td>
      </tr>
    </table>
    <p>The registry submission is as follows:</p>
    <code caption='Registry Submission'><![CDATA[
    <type>
      <name>message-list</name>
      <desc>
        The node for the offline message queue; valid only for the node
        "http://jabber.org/protocol/offline"
      </desc>
      <doc>XEP-0013</doc>
    </type>
    <type>
      <name>message-node</name>
      <desc>
        A node for a specific offline message if service discovery is
        provided for messages
      </desc>
      <doc>XEP-0013</doc>
    </type>
  </category>
]]></code>
  </section2>
  <section2 topic='Well-Known Service Discovery Nodes' anchor='registrar-disco-nodes'>
    <p>The XMPP Registrar includes "http://jabber.org/protocol/offline" in its registry of well-known Service Discovery nodes.</p>
  </section2>
  <section2 topic='Field Standardization' anchor='registrar-formtype'>
    <p>&xep0068; defines a process for standardizing the fields used within Data Forms qualified by a particular namespace. There is one uses of such forms in offline message retrieval as described in the <link url='#request-number'>Requesting Number of Messages</link> section of this XEP. The registry submission is as follows:</p>
    <code caption='Registry Submission'><![CDATA[
<form_type>
  <name>http://jabber.org/protocol/offline</name>
  <doc>XEP-0013</doc>
  <desc>
    Service Discovery extension for number of messages
    in an offline message queue.
  </desc>
  <field
      var='number_of_messages'
      type='text-single'
      label='N/A'/>
</form_type>
]]></code>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/offline'
    xmlns='http://jabber.org/protocol/offline'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0013: http://www.xmpp.org/extensions/xep-0013.html
    </xs:documentation>
  </xs:annotation>

  <xs:element name='offline'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='item' minOccurs='1' maxOccurs='unbounded'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='item'>
    <xs:complexType>
      <xs:attribute name='action' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='remove'/>
            <xs:enumeration value='view'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name='jid' type='xs:string' use='optional'/>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

</xs:schema>
]]></code>
</section1>
</xep>
