<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Stanza Forwarding</title>
  <abstract>This document defines a protocol to forward a stanza from one entity to another.</abstract>
  &LEGALNOTICE;
  <number>0297</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>forward</shortname>
  <schemaloc>
    <url>http://xmpp.org/schemas/forward.xsd</url>
  </schemaloc>
  &mwild;
  &ksmith;
  <revision>
    <version>1.0</version>
    <date>2013-10-02</date>
    <initials>psa</initials>
    <remark><p>Per a vote of the XMPP Council, advanced status to Draft.</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2013-06-05</date>
    <initials>mw</initials>
    <remark>
      <p>Incorporated Last Call feedback, including; clarify that client handling of non-message stanzas, add a disco feature, remove references to deferred XEPs, tighten up the schema to allow only stanzas to be forwarded.</p>
    </remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2012-07-05</date>
    <initials>mw</initials>
    <remark>
    	<p>Added recommendation that forwarded messages as part of another specification should be nested under an element of that protocol's namespace.</p>
    	<p>Adapted text to indicate that stanzas other than messages may be forwarded. Updated title to reflect this.</p>
    </remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2011-07-11</date>
    <initials>ks</initials>
    <remark><p>Made security considerations more explicit.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2011-07-06</date>
    <initials>psa</initials>
    <remark><p>Corrected XML namespace to reflect official publication.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2011-04-11</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2011-03-22</date>
    <initials>mw/ks</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>There are many situations is which an entity needs to forward a previously sent stanza to another entity, such as forwarding an interesting message to a friend, or a server forwarding stored messages from an archive. Here we specify a simple encapsulation method for such forwards. This format can be used in other specifications requiring the forwarding of stanzas, or used in isolation for a user to forward a message to another user (rather like email forwards).</p>
</section1>

<section1 topic='Requirements' anchor='requirements'>
  <p>Several properties are desirable when forwarding stanzas:</p>
  <ul>
    <li>The original sender and receiver should be identified.</li>
    <li>Most extension payloads should be included (not only a message &lt;body/&gt;).</li>
    <li>It should be possible to annotate the stanza (e.g. with a timestamp) without ambiguity as to the original stanza contents.</li>
    <li>It should allow features such as encryption or signing of the original stanza to survive the forwarding.</li>
  </ul>
</section1>

<section1 topic='Forwarding a stanza'>
  <section2 topic='Overview'>
  <p>Let us suppose that a Romeo receives a message from Juliet:</p>
    <example caption='Receiving a message'><![CDATA[
      <message from='juliet@capulet.lit/orchard'
               id='0202197'
               to='romeo@montague.lit'
               type='chat'>
        <body>Yet I should kill thee with much cherishing.</body>
        <mood xmlns='http://jabber.org/protocol/mood'>
            <amorous/>
        </mood>
      </message>
]]></example>

  <p>To forward this to Mercutio, Romeo would send a new message with a &lt;forwarded/&gt; payload of namespace 'urn:xmpp:forward:0'.</p>
    <example caption='Forwarding a message'><![CDATA[
      <message to='mercutio@verona.lit' from='romeo@montague.lit/orchard' type='chat' id='28gs'>
        <body>A most courteous exposition!</body>
        <forwarded xmlns='urn:xmpp:forward:0'>
          <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>
          <message from='juliet@capulet.lit/orchard'
                   id='0202197'
                   to='romeo@montague.lit'
                   type='chat'
                   xmlns='jabber:client'>
              <body>Yet I should kill thee with much cherishing.</body>
              <mood xmlns='http://jabber.org/protocol/mood'>
                  <amorous/>
              </mood>
          </message>
        </forwarded>
      </message>
]]></example>
  </section2>
  <section2 topic='Business rules'>
    <ol>
      <li><p>Forwarded stanzas SHOULD include all relevant child elements of the original stanza by default.  However, an implementation MAY omit elements it deems irrelevant and safe to discard. An example would be omitting &xep0085; elements from &lt;message&gt; stanzas which typically do not make sense outside the context of a conversation session. However it should be noted that removing such elements can invalidate any digital signature on a stanza. If preserving a signature is important in the context this extension is used then child elements SHOULD NOT be removed.</p></li>
      <li><p>The forwarding entity SHOULD add a &lt;delay/&gt; child to the &lt;forwarded/&gt; element to indicate to the recipient the date/time that the forwarding entity received the original stanza. The format of this element is described in &xep0203;.</p></li> <li><p>The namespace of the forwarded stanza MUST be preserved (this is typically 'jabber:client').  If no 'xmlns' is set for the stanza then as per XML namespacing rules it would inherit the 'urn:xmpp:forward:0' namespace, which is wrong.</p></li>
      <li><p>When this extension is employed simply for a user to forward a given message to a contact, the outer &lt;message/&gt; SHOULD contain a body (even if empty) and a receiving client should pay particular attention to ensure it renders both the sender's text and the forwarded message unambiguously.</p></li>
      <li><p>When a forwarded stanza forms part of an encapsulating protocol, the &lt;forwarded/&gt; element SHOULD be a child of a tag of that protocol, and SHOULD NOT be included as a direct child of the transmitted stanza.</p></li>
    </ol>
  </section2>
</section1>
<section1 topic="Determining Support" anchor="support">
  <p>Clients that implement this specification to display simple forwarded messages (i.e. those not part of another extension)
    SHOULD indicate their support via the 'urn:xmpp:forward:0' feature.</p>
    <example caption='Client requests features of a contact'><![CDATA[
<iq xmlns='jabber:client'
    type='get'
    from='romeo@montague.lit/orchard'
    to='juliet@capulet.lit/balcony'
    id='info1'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]></example>
    <example caption='Contact responds with forwarding feature'><![CDATA[
<iq xmlns='jabber:client'
    type='result'
    to='romeo@montague.net/orchard'
    from='juliet@capulet.lit/balcony'
    id='info1'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
...
    <feature var='urn:xmpp:forward:0'/>
...
  </query>
</iq>]]></example>
  <p>Senders SHOULD NOT forward messages using this protocol to recipients that have not indicated support for it. However they may still
    format the forward as plain text inside the &lt;body&gt; of a standard message stanza for compatibility with clients lacking support.
    Such a plain text version SHOULD NOT be included in a stanza using this extension (e.g. as a 'fallback'), as receiving entities are
    expected to display the &lt;body&gt; of a message as well as any forwarded stanza therein.
  </p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>The &REGISTRAR; includes 'urn:xmpp:forward:0' in its registry of protocol namespaces (see &NAMESPACES;).</p>
  </section2>
  <section2 topic='Protocol Versioning' anchor='registrar-versioning'>
    &NSVER;
  </section2>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>Forwarding stanzas can reveal information about the original sender, including possible presence leaks as well as the stanza payloads themselves. Any extensions using this format must therefore consider the implications of this.</p>
  <p>Forwarding can either be used as-is, or in the context of another specification, with different security considerations as described below.</p>
  <section2 topic='As-is' anchor='as-is-sc'>
  <p>Receipt of a forwarded stanza from a third-party does not guarantee that the original stanza was actually received, or that the content has not been modified, by the forwarder. Integrity of the original stanza can only be determined through cryptographic signatures for example, which are beyond the scope of this specification.</p>
  <p>Considering the above an end-user client should take special care in its rendering of forwarded stanzas, such as forwarded messages, to ensure that the user cannot mistake it for a message received directly from the original sender.</p>
  <p>An entity SHOULD NOT trust that forwards are genuine when receiving them unprovoked (i.e. outside the scope of another specification).</p>
  <p>Forwarded stanzas MUST NOT be processed as if they were non-forwarded stanzas. Furthermore a client SHOULD ignore non-&lt;message&gt;
  stanzas that are not embedded within another extension.</p>
  </section2>
  <section2 topic='Extensions' anchor='extensions-sc'>
  <p>While security considerations are ultimately dependent upon the specifications using the format defined herein, forwarding introduces scope for stanza forgery such that authors of derivative specifications will need to address security considerations themselves. These need to cover which entities a client should accept forwards from, and which entities those are permitted to forward stanzas for. For example, a specification may choose to only trust forwards if they are received from the user's client, another client on the bare JID, or the user's server.</p>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:forward:0'
    xmlns='urn:xmpp:forward:0'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0297: http://www.xmpp.org/extensions/xep-0297.html
    </xs:documentation>
  </xs:annotation>

  <xs:import namespace='jabber:client'
             schemaLocation='http://xmpp.org/schemas/jabber-client.xsd'/>
  <xs:import namespace='jabber:server'
             schemaLocation='http://xmpp.org/schemas/jabber-server.xsd'/>
  <xs:import namespace='urn:xmpp:delay'
             schemaLocation='http://xmpp.org/schemas/delay.xsd'/>

  <xs:element name='forwarded'>
    <xs:complexType>
      <xs:sequence xmlns:delay='urn:xmpp:delay'
                   xmlns:client='jabber:client'
                   xmlns:server='jabber:server'>
        <xs:element ref='delay:delay' minOccurs='0' maxOccurs='1' />
        <xs:choice minOccurs='0' maxOccurs='1'>
          <xs:choice>
            <xs:element ref='client:message'/>
            <xs:element ref='client:presence'/>
            <xs:element ref='client:iq'/>
          </xs:choice>
          <xs:choice>
            <xs:element ref='server:message'/>
            <xs:element ref='server:presence'/>
            <xs:element ref='server:iq'/>
          </xs:choice>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</xs:schema>
]]></code>
</section1>
<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to Kim Alvefur, Jefry Lagrange, Matt Miller, Peter Saint-Andre, Kurt Zeilenga, and Florian Zeitz for their feedback.</p>
</section1>
</xep>
