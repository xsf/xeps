<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>User Avatar</title>
  <abstract>This document defines an XMPP protocol extension for exchanging user avatars, which are small images or icons associated with human users. The protocol specifies payload formats for both avatar metadata and the image data itself. The payload formats are typically transported using the personal eventing profile of XMPP publish-subscribe as specified in XEP-0163.</abstract>
  &LEGALNOTICE;
  <number>0084</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0163</spec>
  </dependencies>
  <supersedes>
    <spec>XEP-0008</spec>
    <spec>XEP-0153</spec>
  </supersedes>
  <supersededby/>
  <shortname>avatar</shortname>
  <schemaloc>
    <ns>data</ns>
    <url>http://www.xmpp.org/schemas/avatar-data.xsd</url>
  </schemaloc>
  <schemaloc>
    <ns>metadata</ns>
    <url>http://www.xmpp.org/schemas/avatar-metadata.xsd</url>
  </schemaloc>
  &stpeter;
  &pgmillard;
  &temas;
  &xvirge;
  <revision>
    <version>1.1.1</version>
    <date>2016-07-09</date>
    <initials>XEP Editor: ssw</initials>
    <remark><p>Fix namespace in example (thanks to Huan Nguyen for pointing out the error).</p></remark>
  </revision>
  <revision>
    <version>1.1</version>
    <date>2008-11-05</date>
    <initials>psa</initials>
    <remark><p>For consistency with other PEP payload formats, changed stop semantics to use an empty &lt;metadata/&gt; element rather than a &lt;stop/&gt; child element.</p></remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2007-11-07</date>
    <initials>psa</initials>
    <remark><p>Per a vote of the XMPP Council, advanced status to Draft; concurrently, the XMPP Registrar issued the urn:xmpp:avatar:data and urn:xmpp:avatar:metadata namespaces.</p></remark>
  </revision>
  <revision>
    <version>0.12</version>
    <date>2007-08-31</date>
    <initials>psa</initials>
    <remark><p>Clarified HTTP publishing; completed copy edit.</p></remark>
  </revision>
  <revision>
    <version>0.11</version>
    <date>2007-07-25</date>
    <initials>psa</initials>
    <remark><p>Removed image size requirements.</p></remark>
  </revision>
  <revision>
    <version>0.10</version>
    <date>2007-06-18</date>
    <initials>psa</initials>
    <remark><p>Changed height and width attributes from required to recommended; updated security considerations to reflect problems with SHA-1; further specified datatypes.</p></remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2007-02-01</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect pubsub and PEP changes; added implementation notes about multiple resources and avatar synchronization; modified experimental namespaces to conform to XEP-0053.</p></remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2006-06-19</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect pubsub and PEP changes; added implementation notes about multiple resources and avatar synchronization.</p></remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2006-01-17</date>
    <initials>psa</initials>
    <remark><p>Updated to use PEP.</p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2005-04-13</date>
    <initials>psa</initials>
    <remark><p>Major modification per list discussion: specified that metadata may include the same avatar in multiple alternate formats; allowed pointers to third-party avatars not available via pubsub or HTTP; changed pixel size restrictions; specified that bytes, content-type, height, id, and width are required metadata; changed type attribute to content-type; made explicit that URLs can be http: or https: URIs; more fully specified protocol, updated the examples, updated the schemas.</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2005-03-28</date>
    <initials>psa/pgm</initials>
    <remark><p>Friendly fork per Council discussion: allowed data to be stored in a pubsub data repository or at a URL accessible via HTTP; also split text into publisher and subscriber use cases, specified requirements, added more examples, etc.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2003-05-20</date>
    <initials>tjm</initials>
    <remark><p>Lessen the image requirements. Include the content type in info.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2003-05-08</date>
    <initials>tjm</initials>
    <remark><p>Drastic change to use two nodes on pubsub, allowing for hash updates independently of the data. This makes client caching much easier. Allow only PNG and MNG currently.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2003-05-07</date>
    <initials>tjm</initials>
    <remark><p>Clarified the use of "current" as the item id. Fixed some example errors. Made the interaction with disco more clear. The reason to use pubsub is made more clear as well.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2003-05-07</date>
    <initials>tjm</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>Many communication applications allow for the association of a small image or icon with a user of that application. Usually, such an "avatar" is not intended to be an accurate picture of the user's actual physical appearance, but rather a representation (often fanciful) of the user's desired self-image or a transient state of the user (such as a mood or activity). This document defines a way to incorporate avatars into current Jabber/XMPP systems by layering this functionality on top of the XMPP &xep0060; extension ("pubsub"), specifically the &xep0163; subset ("PEP"), which is designed for use in the context of XMPP instant messaging and presence systems that conform to &rfc3921;.</p>
  <p>The protocol defined herein uses two pubsub nodes: one node for "metadata" about the avatar state (called the "metadata node") and one for the avatar data itself (called the "data node"). This separation of metadata from data conserves bandwidth and enables both the publisher and the subscriber to cache the avatar data. (For example, a user might toggle between two or three avatars, in which case the user's contacts can display a locally cached version of the images without having to retrieve or receive the full image each time.)</p>
  <p>This protocol also allows storage of avatar data at a URL accessible via HTTP (see &rfc2616;). <note>By "accessible via HTTP" is meant that the data is available at an http: or https: URI.</note> This can be helpful as a fallback mechanism if a pubsub-aware data repository is not available. It also makes it possible for avatar images to be hosted on public websites (e.g., an end-user-oriented community site) and retrieved from that site rather than handled directly by the publishing client in any fashion.</p>
  <p>Finally, this protocol also enables XMPP applications to optionally integrate with third-party services that host user avatars (e.g., online gaming systems and virtual worlds).</p>
  <p>It is intended that this specification will supersede both &xep0008; and &xep0153; once the PEP subset of XMPP publish-subscribe is implemented and deployed widely enough.</p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>This document addresses the following use cases for avatar publishers:</p>
  <ol>
    <li>Publishing avatar data</li>
    <li>Updating metadata about the current avatar</li>
    <li>Disabling avatars</li>
  </ol>
  <p>This document addresses the following use cases for avatar subscribers:</p>
  <ol>
    <li>Discovering avatar availability</li>
    <li>Receiving notification of avatar changes</li>
    <li>Retrieving avatar data via pubsub</li>
    <li>Retrieving avatar data via HTTP</li>
  </ol>
</section1>
<section1 topic='Basic Process Flow' anchor='process'>
  <p>The process for publishing and updating user avatars is as follows:</p>
  <ol>
    <li>User publishes avatar data for "image/png" content-type to data node and optionally publishes other content-types to HTTP URLs.</li>
    <li>User publishes notification of updated avatar to metadata node, with ItemID that matches SHA-1 hash of image data for "image/png" content-type (note: this is a hash of the image data itself, not the base64-encoded version).</li>
    <li>Subscribers receive notification.</li>
    <li>Optionally (and if necessary), subscribers retrieve avatar data identified by ItemID from data node using pubsub retrieve-items feature (or via HTTP).</li>
    <li>Optionally, user disables avatar display.</li>
  </ol>
  <p>This process flow is described more fully in the following sections.</p>
  <p>Note: Before publishing avatar data and metadata, the user MUST determine if his or her server supports the PEP subset of pubsub by following the procedures specified in <cite>XEP-0163</cite>, since such support simplifies avatar publication. The following examples assume the availability of a PEP service.</p>
  <section2 topic='User Publishes Data' anchor='process-pubdata'>
    <p>Before updating the avatar metadata node, the publisher MUST make sure that the avatar data is available at the data node or URL. When publishing the avatar data to the data node, the publisher MUST ensure that the value of the pubsub ItemID is a SHA-1 hash of the data for the "image/png" content-type (this is used by the subscriber to determine if a locally cached copy can be displayed).</p>
    <p>The following example illustrates the XML structure to be sent when publishing avatar data to the data node.</p>
    <example caption='Publishing avatar data to data node'><![CDATA[
<iq type='set' from='juliet@capulet.lit/chamber' id='publish1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:avatar:data'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'>
        <data xmlns='urn:xmpp:avatar:data'>
          qANQR1DBwU4DX7jmYZnncm...
        </data>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <example caption='Pubsub service replies with success'><![CDATA[
<iq type='result' to='juliet@capulet.lit/chamber' id='publish1'/>
]]></example>
    <p>If the avatar will be made available via HTTP instead of a pubsub data node, the publisher MUST either verify that the avatar exists at the HTTP URL or publish it via standard HTTP methods (such methods are out of scope for this specification; refer to <cite>RFC 2616</cite>).</p>
  </section2>
  <section2 topic='User Publishes Metadata Notification' anchor='process-pubmeta'>
    <p>Whenever the publisher wishes to change its current avatar, it MUST update the metadata node. As with the data node, the publisher MUST ensure that the value of the pubsub ItemID is a SHA-1 hash of the data for the "image/png" content-type (the match between the ItemID of the data node and metadata node is used by the subscriber to determine if a locally cached copy can be displayed).</p>
    <p>The following example shows metadata specifying avatar data that is available in only one format ("image/png") and accessible only at the data node.</p>
    <example caption='Publishing avatar metadata'><![CDATA[
<iq type='set' from='juliet@capulet.lit/chamber' id='publish2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:avatar:metadata'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'>
        <metadata xmlns='urn:xmpp:avatar:metadata'>
          <info bytes='12345'
                id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'
                height='64'
                type='image/png'
                width='64'/>
        </metadata>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <p>The following example shows metadata specifying avatar data that is available at an HTTP URL.</p>
    <example caption='Publishing avatar metadata'><![CDATA[
<iq type='set' from='juliet@capulet.lit/chamber' id='publish2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:avatar:metadata'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'>
        <metadata xmlns='urn:xmpp:avatar:metadata'>
          <info bytes='23456'
                height='64'
                id='357a8123a30844a3aa99861b6349264ba67a5694'
                type='image/gif'
                url='http://avatars.example.org/happy.gif'
                width='64'/>
        </metadata>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
  </section2>
  <section2 topic='Subscribers Receive Metadata Notification' anchor='process-subnotify'>
    <p>The user's virtual pubsub service would then send the metadata notification to entities that have subscribed to the user's metadata node or contacts who have advertised an interest in receiving avatar metadata by including a &xep0115; feature of "urn:xmpp:avatar:metadata+notify".</p>
    <example caption='Subscribers receive avatar metadata notification'><![CDATA[
<message to='romeo@montague.lit/home' from='juliet@capulet.lit'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:avatar:metadata'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'>
        <metadata xmlns='urn:xmpp:avatar:metadata'>
          <info bytes='12345'
                height='64'
                id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'
                type='image/png'
                width='64'/>
        </metadata>
      </item>
    </items>
  </event>
  <addresses xmlns='http://jabber.org/protocol/address'>
    <address type='replyto' jid='juliet@capulet.lit/chamber'/>
  </addresses>
</message>
]]></example>
    <p>As shown, depending on node configuration, the item may include &xep0033; information about the publishing resource (see <cite>XEP-0060</cite> for details).</p>
  </section2>
  <section2 topic='Subscribers Retrieve Data' anchor='process-subretrieve'>
    <p>Upon receiving the notification, each subscriber SHOULD determine if it has a locally cached copy of that avatar (which it can do by searching for an image identified by the ItemID). If the subscriber already has a locally cached copy of the avatar image, it MUST NOT retrieve the image data.</p>
    <p>If the subscriber does not have a locally cached copy of the avatar image, it SHOULD retrieve the data. It can do this by sending a pubsub retrieve-items request to the data node, specifying the appropriate ItemID.</p>
    <example caption='Subscriber requests last item by ItemID'><![CDATA[
<iq type='get'
    from='romeo@montague.lit/home'
    to='juliet@capulet.lit'
    id='retrieve1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:avatar:data'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'/>
    </items>
  </pubsub>
</iq>
]]></example>
    <p>The PEP service running at the user's server then SHOULD return the avatar data.</p>
    <example caption='PEP service returns avatar data'><![CDATA[
<iq type='result'
    from='juliet@capulet.lit'
    to='romeo@montague.lit/home'
    id='retrieve1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:avatar:data'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'>
        <data xmlns='urn:xmpp:avatar:data'>
          qANQR1DBwU4DX7jmYZnncm...
        </data>
      </item>
    </items>
  </pubsub>
</iq>
]]></example>
    <p>If the &lt;info/&gt; element sent to the metadata node possesses a 'url' attribute, the avatar data is hosted at a URL. Therefore, in order to retrieve the avatar image data for that content-type, the requesting entity MUST send an HTTP request to the specified URL. Methods for doing so are out of scope for this specification (see <cite>RFC 2616</cite>).</p>
  </section2>
  <section2 topic='Publisher Disables Avatar Publishing' anchor='pub-disable'>
    <p>In order to temporarily disable avatar publishing, the user publishes an empty &lt;metadata/&gt; element to the metadata node.</p>
    <example caption='Temporarily disabling avatar publishing'><![CDATA[
<iq type='set' from='juliet@capulet.lit/chamber' id='publish3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:avatar:metadata'>
      <item>
        <metadata xmlns='urn:xmpp:avatar:metadata'/>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <p>As before, subscribers to the metadata node would then receive the notification.</p>
    <example caption='Subscribers receive avatar metadata notification'><![CDATA[
<message to='romeo@montague.lit/home' from='juliet@capulet.lit'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:avatar:metadata'>
      <item>
        <metadata xmlns='urn:xmpp:avatar:metadata'/>
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>Note: In an earlier version of this specification, the user indicated that it wanted to disable publishing by sending a &lt;metadata/&gt; element containing a &lt;stop/&gt; child element. For consistency with other PEP payload formats, support for the &lt;stop/&gt; element is <em>deprecated</em>.</p>
  </section2>
</section1>
<section1 topic='Protocol Syntax' anchor='proto'>
  <p>The PEP subset of pubsub requires that there shall exist a one-to-one relationship between namespaces and nodes. Because the protocol defined herein stipulates the use of two nodes (one for avatar data and one for avatar metadata), we define two namespaces, each with a corresponding root element:</p>
  <ul>
    <li>&lt;data xmlns='urn:xmpp:avatar:data'/&gt;</li>
    <li>&lt;metadata xmlns='urn:xmpp:avatar:metadata'/&gt;</li>
  </ul>
  <p>These are further specified below.</p>
  <section2 topic='Data Element' anchor='proto-data'>
    <p>The &lt;data/&gt; element is used to communicate the avatar data itself, and only for the "image/png" content-type (support for which is REQUIRED).</p>
    <code><![CDATA[
<data xmlns='urn:xmpp:avatar:data'>
  IMAGE DATA
</data>
]]></code>
    <p>The XML character data MUST represent the image data for the avatar with a content-type of "image/png", Base64-encoded in accordance with Section 4 of &rfc4648;. (Note: Line feeds SHOULD NOT be added but MUST be accepted.)</p>
    <p>The &lt;data/&gt; element MUST NOT possess any attributes.</p>
    <p>Support for the &lt;data/&gt; element is REQUIRED.</p>
  </section2>
  <section2 topic='Metadata Element' anchor='proto-meta'>
    <p>The &lt;metadata/&gt; element is used to communicate information about the avatar. There are two allowable children of the &lt;metadata/&gt; element:</p>
    <ul>
      <li>&lt;info/&gt;</li>
      <li>&lt;pointer/&gt;</li>
    </ul>
    <p>These are further specified below.</p>
    <p>In addition, the &lt;metadata/&gt; element MAY be empty (i.e., contain no child elements); this form is used to disable avatar publishing.</p>
    <section3 topic='Info Element' anchor='proto-info'>
      <p>The &lt;info/&gt; child element is used to communicate avatar metadata. Support for the &lt;info/&gt; element is REQUIRED.</p>
      <code><![CDATA[
<metadata xmlns='urn:xmpp:avatar:metadata'>
  <info bytes='size-of-image-data-in-bytes'
        height='image-height-in-pixels'
        id='SHA-1-hash-of-image-data'
        type='content-type-of-image-data'
        url='HTTP-URL-for-image-data'
        width='image-width-in-pixels'/>
</metadata>
]]></code>
      <p>The &lt;info/&gt; child element MUST be empty.</p>
      <p>The defined attributes of the &lt;info/&gt; element are specified in the following table.</p>
      <table caption='Info Attributes'>
        <tr>
          <th>Name</th>
          <th>Definition</th>
          <th>Inclusion</th>
        </tr>
        <tr>
          <td>bytes</td>
          <td>The size of the image data in bytes.</td>
          <td>REQUIRED</td>
        </tr>
        <tr>
          <td>height</td>
          <td>The height of the image in pixels.</td>
          <td>RECOMMENDED</td>
        </tr>
        <tr>
          <td>id</td>
          <td>A hash of the image data for the specified content-type, where the hash is produced in accordance with the SHA-1 algorithm as specified in &rfc3174; (with binary output).</td>
          <td>REQUIRED</td>
        </tr>
        <tr>
          <td>type</td>
          <td>The IANA-registered content type of the image data.</td>
          <td>REQUIRED</td>
        </tr>
        <tr>
          <td>url</td>
          <td>The http: or https: URL at which the image data file is hosted; this attribute MUST NOT be included unless the image data file can be retrieved via HTTP.</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>width</td>
          <td>The width of the image in pixels</td>
          <td>RECOMMENDED</td>
        </tr>
      </table>
      <p>The &lt;metadata/&gt; root element MAY contain more than one &lt;info/&gt; element. Each &lt;info/&gt; element MUST specify metadata for the same avatar image but in alternate content-types (e.g., "image/png", "image/gif", and "image/jpeg"), and one of the formats MUST be "image/png" to ensure interoperability. The value of the 'type' attribute MUST be an IANA-registered content type of type "image" or "video". <note>The IANA registry of content types is located at &lt;<link url='http://www.iana.org/assignments/media-types/'>http://www.iana.org/assignments/media-types/</link>&gt;.</note> Support for the "image/png" content type is REQUIRED. Support for the "image/gif" and "image/jpeg" content types is RECOMMENDED. Support for any other content type is OPTIONAL.</p>
    </section3>
    <section3 topic='Pointer Element' anchor='proto-pointer'>
      <p>The &lt;pointer/&gt; child element is used to point to an avatar that is not published via pubsub or HTTP, but rather is provided by a third-party service such as an online gaming system or virtual world.</p>
      <code><![CDATA[
<metadata xmlns='urn:xmpp:avatar:metadata'>
  <pointer>
    ... APPLICATION-SPECIFIC DATA ...
  </pointer>
</metadata>
]]></code>
      <p>The &lt;pointer/&gt; element MAY possess the following attributes if the publishing application has the relevant information:</p>
      <ul>
        <li><em>bytes</em> -- The size of the image data in bytes.</li>
        <li><em>height</em> -- The height of the image in pixels.</li>
        <li><em>id</em> -- The SHA-1 hash of the image data for the specified content-type.</li>
        <li><em>type</em> -- The IANA-registered content type of the image data.</li>
        <li><em>width</em> -- The width of the image in pixels.</li>
      </ul>
      <p>The content of the &lt;pointer/&gt; element MUST be a properly-namespaced child element that specifies information about how to retrieve the avatar from the third-party service. The structure for any such child element is out of scope for this document.</p>
      <p>Even if the &lt;pointer&gt; element is included, it MUST be preceded by at least one instance of the &lt;info/&gt; element so that implementations that do not support the &lt;pointer/&gt; element can display a "fallback" format of the avatar (at a minimum, "image/png").</p>
      <p>Support for the &lt;pointer/&gt; element is OPTIONAL.</p>
    </section3>
  </section2>
</section1>
<section1 topic='Additional Examples' anchor='examples'>
  <section2 topic='Metadata With Multiple Content-Types' anchor='examples-multiple'>
    <p>The following example shows metadata specifying avatar data that is available in multiple formats ("image/png", "image/gif", and "image/mng"), where the "image/png" content-type is available only at the data node and the other content-types are available HTTP URLs.</p>
    <example caption='Publishing avatar metadata (multiple formats)'><![CDATA[
<iq type='set' from='juliet@capulet.lit/chamber' id='publish3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:avatar:metadata'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'>
        <metadata xmlns='urn:xmpp:avatar:metadata'>
          <info bytes='12345'
                height='64'
                id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'
                type='image/png'
                width='64'/>
          <info bytes='12345'
                height='64'
                id='e279f80c38f99c1e7e53e262b440993b2f7eea57'
                type='image/png'
                url='http://avatars.example.org/happy.png'
                width='64'/>
          <info bytes='23456'
                height='64'
                id='357a8123a30844a3aa99861b6349264ba67a5694'
                type='image/gif'
                url='http://avatars.example.org/happy.gif'
                width='64'/>
          <info bytes='78912'
                height='64'
                id='03a179fe37bd5d6bf9c2e1e592a14ae7814e31da'
                type='image/mng'
                url='http://avatars.example.org/happy.mng'
                width='64'/>
        </metadata>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <p>In the foregoing example, the image encapsulated in the "image/png" content type is available both at a pubsub data node and at an HTTP URL; therefore it is included twice (the second time with a 'url' attribute).</p>
  </section2>
  <section2 topic='Metadata With Pointer' anchor='examples-pointer'>
    <p>The following example shows metadata specifying avatar data that is available in "image/png" at the data node and also with a pointer to an external service.</p>
    <example caption='Publishing avatar metadata (with pointer)'><![CDATA[
<iq type='set' from='juliet@capulet.lit/chamber' id='publish4'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:avatar:metadata'>
      <item id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'>
        <metadata xmlns='urn:xmpp:avatar:metadata'>
          <info bytes='12345'
                height='64'
                id='111f4b3c50d7b0df729d299bc6f8e9ef9066971f'
                type='image/png'
                width='64'/>
          <pointer>
            <x xmlns='http://example.com/virtualworlds'>
              <game>Ancapistan</game>
              <character>Kropotkin</character>
            </x>
          </pointer>
        </metadata>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
  </section2>
</section1>
<section1 topic='Service Discovery' anchor='disco'>
  <section2 topic='Discovering Avatar Availability' anchor='disco-sub'>
    <p>The pubsub "auto-subscribe" and "filtered-notifications" features enable a contact to automatically subscribe to a user's avatar. However, a contact can also explicitly determine if another user publishes avatars using this protocol by sending a &xep0030; items ("disco#items") request to the user's bare JID &LOCALBARE;.</p>
    <example caption='Disco items request'><![CDATA[
<iq type='get'
    from='romeo@montague.lit/orchard'
    to='juliet@capulet.lit'
    id='items1'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>
]]></example>
    <p>If the user publishes avatar data to an PEP node, the result MUST contain the appropriate items.</p>
    <example caption='Disco items result'><![CDATA[
<iq type='result'
    from='juliet@capulet.lit'
    to='romeo@montague.lit/orchard'
    id='items1'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='juliet@capulet.lit' node='urn:xmpp:avatar:data'/>
    <item jid='juliet@capulet.lit' node='urn:xmpp:avatar:metadata'/>
  </query>
</iq>
]]></example>
    <p>The contact then MAY subscribe to the metadata node following the protocol specified in <cite>XEP-0060</cite>. However, the contact SHOULD NOT subscribe to the data node (instead, it SHOULD simply retrieve items from that node when needed, as described above).</p>
  </section2>
</section1>
<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Multiple Resources' anchor='impl-resources'>
    <p>If a user has multiple online resources at the same time, each resource MAY publish a different avatar. The PEP service SHOULD include the "replyto" address of the publishing resource as shown above in order to facilitate differentiation between per-resource avatars.</p>
  </section2>
  <section2 topic='Avatar Synchronization' anchor='impl-sync'>
    <p>When a user logs in with a new resource and before publishing an avatar, its client SHOULD retrieve its last published avatar, either automatically by sending presence with the appropriate entity capabilities information (see <cite>XEP-0115</cite>) or using the "retrieve-items" method described in <cite>XEP-0060</cite>.</p>
  </section2>
  <section2 topic='Image Handling' anchor='impl-images'>
    <p>It is the responsibility of the receiving application to determine which avatar format to retrieve (e.g., "image/gif" rather than "image/png") and to determine the appropriate method for retrieval (e.g., HTTP rather than pubsub).</p>
    <p>The receiving application SHOULD NOT scale up an image when displaying it.</p>
    <p>If an avatar is not available for a contact, the receiving application MAY display the contact's photo, e.g., as provided in the contact's vCard (see &xep0054;) or other profile information.</p>
  </section2>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>See <cite>XEP-0060</cite> and <cite>XEP-0163</cite> regarding security considerations related to the underlying transport protocol.</p>
  <p>It is possible that output of the SHA-1 hashing algorithm can result in collisions; however, the use of SHA-1 in producing a hash of the avatar data is not security-critical.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document makes use of IANA-registered content types, but requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='ns'>
    <p>The &REGISTRAR; includes "urn:xmpp:avatar:data" and "urn:xmpp:avatar:metadata" in its registry of protocol namespaces (see &NAMESPACES;).</p>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <section2 topic='Data Namespace' anchor='schema-data'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:avatar:data'
    xmlns='urn:xmpp:avatar:data'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0084: http://www.xmpp.org/extensions/xep-0084.html
    </xs:documentation>
  </xs:annotation>

  <xs:element name='data' type='xs:base64Binary'/>

</xs:schema>
]]></code>
  </section2>
  <section2 topic='Metadata Namespace' anchor='schema-metadata'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:avatar:metadata'
    xmlns='urn:xmpp:avatar:metadata'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0084: http://www.xmpp.org/extensions/xep-0084.html
    </xs:documentation>
  </xs:annotation>

  <xs:element name='metadata'>
    <xs:complexType>
      <xs:choice>
        <xs:sequence minOccurs='0' maxOccurs='1'>
          <xs:element ref='info' minOccurs='1' maxOccurs='unbounded'/>
          <xs:element ref='pointer' minOccurs='0' maxOccurs='unbounded'/>
        </xs:sequence>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='info'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='bytes' type='xs:unsignedShort' use='required'/>
          <xs:attribute name='height' type='xs:unsignedByte' use='optional'/>
          <xs:attribute name='id' type='xs:string' use='required'/>
          <xs:attribute name='type' type='xs:string' use='required'/>
          <xs:attribute name='url' type='xs:anyURI' use='optional'/>
          <xs:attribute name='width' type='xs:unsignedByte' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='pointer'>
    <xs:complexType>
      <xs:sequence>
        <xs:any namespace='##other'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
]]></code>
  </section2>
</section1>
<section1 topic='Author Note' anchor='authornote'>
  <p>Peter Millard, a co-author of this specification from version 0.1 through version 0.7, died on April 26, 2006. The remaining authors are thankful for his work on user avatars.</p>
</section1>
</xep>
