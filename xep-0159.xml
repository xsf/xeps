<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Spim-Blocking Control</title>
  <abstract>This document defines an XMPP protocol extension that enables clients to control how their servers may block spim that is addressed to them. It specifies a default privacy list fall-through action.</abstract>
  &LEGALNOTICE;
  <number>0159</number>
  <status>Deferred</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0016</spec>
    <spec>XEP-0030</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>TO BE ASSIGNED</shortname>
  &ianpaterson;
  &stpeter;
  <revision>
    <version>0.3</version>
    <date>2006-07-11</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect move of privacy rules to XEP-0016; modified provisional namespaces to adhere to XMPP Registrar policies; completed editorial review.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-10-30</date>
    <initials>ip</initials>
    <remark><p>Added reference to Server-Based Privacy Rules.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2005-09-14</date>
    <initials>ip</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2005-09-08</date>
    <initials>ip</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <section2 topic='Motivation' anchor='intro-motive'>
    <p>The appearance of large public IM services based on &xmppcore; and &xmppim; makes it desirable to implement protocols that <em>discourage</em> the sending of large quantities of instant messaging spam (a.k.a. "spim"). Spim could be generated by XMPP clients connected to legitimate servers or by XMPP servers with virtual clients, where the malicious entities are hosted on networks of "zombie" machines. Spim is defined here as any type of unsolicited XMPP stanza sent by a "robot" and delivered to a human, including messages and subscription requests. Spim has the potential to disrupt people even more than spam, because each message interrupts the receiver (humans typically filter SPAM in batch mode).</p>
    <p>Spim blocking is more efficiently performed on the receiving server for several reasons:</p>
    <ul>
      <li>The sending server may be controlled by the spimmer.</li>
      <li>Client implementations are simplified.</li>
      <li>Client-to-server bandwidth is saved.</li>
      <li>Consistency with the stanza blocking protocol specified in &xep0016;.</li>
      <li>The use of interactive spim recognition techniques (like &xep0158;) does not leak information about the destination client's presence.</li>
      <li>If the destination client is not online when the stanza is sent, then all spim would need to be stored by the server until the user comes back online to decide if it is spim.</li>
      <li>Furthermore, if the sending client is no longer online when the stanza is received, then it would not be possible for the receiving client to use interactive spim recognition techniques.</li>
    </ul>
    <p>However, no automated spim recognition techniques work perfectly all the time. This document is designed to give users control over the spim recognition their servers perform on their behalf.</p>
  </section2>
  <section2 topic='Requirements' anchor='intro-requirements'>
    <p>Clients should be able to:</p>
    <ul>
      <li>disable spim recognition for senders that have been falsely identified as spimmers</li>
      <li>stop spim from senders that spim recognition is failing to block</li>
      <li>exempt from spim recognition stanzas sent by:
        <ul>
          <li>specific users</li>
          <li>users of specific domains</li>
          <li>members of specific roster groups</li>
          <li>presence subscribers</li>
        </ul>
      </li>
      <li>rely on the server to automatically exempt from spim recognition stanzas sent by other existing correspondents</li>
    </ul>
  </section2>
  <section2 topic='Approach' anchor='intro-approach'>
    <p>The stanza blocking protocol defined in <cite>XEP-0016</cite> enables a client to control <em>explicitly</em> which senders its server must block stanzas from. Such explicit blocking is suitable for privacy control, but not for filtering spim.</p>
    <p>This document contradicts an <em>assumption</em> expressed in the standard blocking protocol in order to extend client control to spim blocking. More specifically, it simply defines a spim recognition privacy-list fall-through action that is different from the 'allow' default assumed in <cite>XEP-0016</cite>. <note>The language used in <cite>XEP-0016</cite> appears to be deliberately vague (informative rather than normative) in order to permit other default fall-through actions. The protocol defined in this document is therefore (arguably) compatible with <cite>XEP-0016</cite>.</note></p>
  </section2>
  <section2 topic='Note on Spim Recognition' anchor='intro-recognition'>
    <p>The various spim recognition procedures that may be employed by the server are beyond the scope of this document. No single measure can differentiate all spim perfectly. It is RECOMMENDED that servers implement a combination of complementary spim recognition techniques (and other anti-spim techniques <note>Other examples of anti-spim policies and protocols include: requiring a user to pass a robot challenge before registering a new account, invite-only and/or out-of-band user account registration, providing a standard protocol for reporting spim to both the servers involved, server-to-server connection dialback, karma (client-to-server and server-to-server), legal agreements not to send spim during user account registration, and IP blocking.</note>).</p>
    <p>For example, a server could employ traffic and reputation analysis to filter the majority of spim, and use <cite>CAPTCHA Forms</cite> to identify the remainder (feeding what it learns back to the traffic and reputation analysis).</p>
  </section2>
</section1>

<section1 topic='Discovery' anchor='disco'>
  <p>A client MAY confirm that its server supports Spim-Blocking Control using &xep0030;.</p>
  <example caption='Initial Service Discovery Information Request'><![CDATA[
<iq type='get'
    from='victim@mydomain.com/laptop'
    to='mydomain.com'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
  <example caption='Server Indicates Support'><![CDATA[
<iq type='result'
    from='mydomain.com'
    to='victim@mydomain.com/laptop'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='im' type='server'/>
    ...
    <feature var='http://www.xmpp.org/extensions/xep-0159.html#node'/>
    ...
  </query>
</iq>
]]></example>
</section1>

<section1 topic='Spim Blocking' anchor='spim'>
  <p>This section specifies <em>server</em> functionality <em>not</em> defined in <cite>XEP-0016</cite>. This document will not reach Draft status until <cite>Server-Based Privacy Rules</cite> has been modified to permit this functionality.</p>
  <section2 topic='Correspondents Lists' anchor='spim-correspondents'>
    <p>A server that supports this protocol MAY maintain a separate <note>If the server were to maintain a single unified list of the correspondents of all its users, then spimmers would only need to pass a single spim recognition test before being allowed to send spim to <em>all</em> the server's users.</note> list of each user's correspondents. Each list contains all the bare JIDs the user has either sent a stanza to or received a stanza from (over the past few weeks or months).</p>
    <p>Note: When it blocks a stanza, the server MUST NOT add the 'from' attribute of the stanza to the correspondents list.</p>
    <p>Note: The lists of correspondents have a very different function from rosters. Edits are initiated by the server not the client, allowing the lists to be completely transparent to clients.</p>
  </section2>
  <section2 topic='Fall-Through Procedure' anchor='spim-action'>
    <p>The server SHOULD perform the following procedures whenever it receives a stanza that falls through the active privacy list of the user it is addressed to without being either allowed or denied:</p>
    <ol>
      <li>If the server maintains correspondents lists, and if the bare JID in the 'from' attribute of the received stanza is on the addressed user's correspondents list, then the server SHOULD allow the stanza to be delivered to the user.</li>
      <li>Otherwise, the server SHOULD perform one or more spim recognition procedures (not defined in this document).</li>
      <li>Depending on the result of those procedures, it SHOULD then either allow, deny or delay the delivery of the stanza without informing the sender.</li>
    </ol>
  </section2>
  <section2 topic='Delay Procedure' anchor='spim-delay'>
    <p>When a spim recognition procedure delays delivery of a stanza the server SHOULD store it temporarily.</p>
    <p>While delivery is being delayed:</p>
    <ul>
      <li>The server SHOULD allow or deny delivery of the stanza immediately (and without informing the sender) when any subsequent changes to the user's privacy list, correspondents list or roster explicitly either allow or deny the delivery of the stanza. <note>For example, the first time a stanza is delivered the correspondents list will change, typically triggering the immediate delivery of any other delayed stanzas.</note></li>
      <li>The server MAY allow or deny delivery of the stanza at any time (for reasons not defined in this document).</li>
    </ul>
    <p>Once delivery of a stanza has been delayed for an implementation-specific length of time, or an implementation-specific number of stanzas from the same sender (or same sending server) are being delayed, the server SHOULD deny delivery of the stanza without informing the sender.</p>
    <p>A good example of a delayed spim recognition procedure is when servers use the <cite>CAPTCHA Forms</cite> protocol to confirm whether or not a client is a spim robot before denying or allowing the delivery of a stanza from a <em>new correspondent</em>. <note>The very occasional inconvenience of responding to a challenge is small and perfectly acceptable -- especially when compared to the countless robot-generated interruptions people might otherwise have to filter every day.</note> <note>If a human user fails such a robot challenge then his client SHOULD give him the option to resend the stanza immediately.</note></p>
  </section2>
</section1>

<section1 topic='Configuring Privacy Lists' anchor='privacy'>
  <p>This informative section requires no client or server functionality beyond that defined in <cite>XEP-0016</cite>.</p>
  <section2 topic='Exempting Trusted Groups from Spim Blocking' anchor='privacy-exempt'>
    <section3 topic='Users on Roster' anchor='privacy-exempt-users'>
      <p>The client SHOULD use the 'subscription' type to exclude all JIDs on the user's roster from spim blocking (see the items with order 20, 30 and 40 in the example below).</p>
    </section3>
    <section3 topic='Transports' anchor='privacy-exempt-transports'>
      <p>At least in the medium term, clients that use non-XMPP protocols cannot be expected to support interactive spim recognition techniques (like <cite>CAPTCHA Forms</cite>). So, if its server uses interactive techniques, the client MAY use the 'jid' type to ensure its server does not block stanzas arriving from the transports the user has registered with (see the item with order 50 in the example below).</p>
    </section3>
    <section3 topic='Users of Trusted Servers' anchor='privacy-exempt-servers'>
      <p>If a user believes spim will not be sent by users of a particular server (e.g. the user's own corporate server), then the client MAY use the 'jid' type to exclude all these users from spim blocking (see the item with order 60 in the example below).</p>
    </section3>
    <example caption='Exempting Users from Spim Blocking'><![CDATA[
<iq type='set' from='victim@mydomain.com/laptop'>
  <query xmlns='jabber:iq:privacy'>
    <list name='normal'>
      ...
      <item type='subscription'
            value='both'
            action='allow'
            order='20'/>
      <item type='subscription'
            value='to'
            action='allow'
            order='30'/>
      <item type='subscription'
            value='from'
            action='allow'
            order='40'/>
      ...
      <item type='jid'
            value='yahoo.transport.org'
            action='allow'
            order='50'/>
      ...
      <item type='jid'
            value='mydomain.com'
            action='allow'
            order='60'/>
      ...
    </list>
  </query>
</iq>
]]></example>
  </section2>

  <section2 topic='Exempting Individual Users from Spim Blocking' anchor='legacy'>
    <p>No spim recognition techniques are perfect. Senders are sometimes falsely identified as spim bots. (For example, when a server sends <cite>CAPTCHA Forms</cite>, but the client does not support that protocol.)</p>
    <p>In these cases the user MAY ask out-of-band the person he is trying to communicate with to allow communications in one of the following ways:</p>
    <ul>
      <li>simply send him a message, so her server adds him to her correspondents list</li>
      <li>add his JID to her active privacy list with action='allow'</li>
      <li>add him to her roster (either in a group whose stanzas are allowed in her active privacy list, or with a subscription type that is allowed <note>The subscription type SHOULD never be 'none' because <cite>XEP-0016</cite> specifies that, for the purposes of blocking, all JIDs not on the roster also have the subscription type 'none'.</note>)</li>
    </ul>
  </section2>

  <section2 topic='Explicitly Blocking Spim' anchor='privacy-block'>
    <p>If stanzas from a spim robot running on a zombie domain somehow manage to get past the server's spim recognition then the client MAY use the 'jid' type to block one or all JIDs from the domain. (<cite>XEP-0016</cite> already enables this functionality.)</p>
    <example caption='Blocking Spim from a Specific Domain'><![CDATA[
<iq type='set' from='victim@mydomain.com/laptop'>
  <query xmlns='jabber:iq:privacy'>
    <list name='normal'>
      ...
      <item type='jid'
            value='spimmer.com'
            action='deny'
            order='70'/>
      ...
    </list>
  </query>
</iq>
]]></example>
  </section2>

  <section2 topic='Completely Disabling Spim Blocking' anchor='privacy-disable'>
    <p>A client MAY disable server-side spim blocking by ensuring the default fall-through action is never applied. It does this simply by including an explicit fall-through item in its active privacy list.</p>
    <example caption='Client Disables Spim Blocking'><![CDATA[
<iq type='set' from='victim@mydomain.com/laptop'>
  <query xmlns='jabber:iq:privacy'>
    <list name='normal'>
      ...
      <item action='allow' order='999'/>
    </list>
  </query>
</iq>
]]></example>
    <p>Note: Before a server with existing accounts deploys this protocol, it MAY ensure all users' privacy lists have an explicit fall-through item. As a result, spim recognition would be disabled until users choose to switch it on.</p>
  </section2>
</section1>

<section1 topic='Security Considerations' anchor='sec'>
  <p>If a server implements this protocol and its security is compromised, then the attacker may be able to access the list of all previous correspondants for every user. People are unable to delete their own lists and they may not even be aware that they exist. So servers MUST ensure they protect this sensitive information very carefully.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;. </p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Well-Known Service Discovery Node' anchor='node'>
    <p>Until this specification advances to a status of Draft, its associated service discovery node shall be "http://www.xmpp.org/extensions/xep-00158.html#node"; upon advancement of this specification, the &REGISTRAR; shall issue a permanent identifier in accordance with the process defined in Section 4 of &xep0053;.</p>
  </section2>
</section1>
</xep>
