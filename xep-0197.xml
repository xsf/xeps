<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>User Viewing</title>
  <abstract>This document defines an XMPP protocol extension for communicating information about the television shows, movies, or other videos that a user watches.</abstract>
  &LEGALNOTICE;
  <number>0197</number>
  <status>Deferred</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0163</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  &stpeter;
  <author>
    <firstname>Kevin</firstname>
    <surname>Hoekman</surname>
    <email>kevin.hoekman@pandora.be</email>
    <jid>kevinh@jabber.org</jid>
  </author>
  <revision>
    <version>0.3</version>
    <date>2008-09-25</date>
    <initials>psa</initials>
    <remark><p>Modified namespace in accordance with protocol versioning policies.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2007-10-03</date>
    <initials>psa</initials>
    <remark><p>Updated in accordance with XEP-0163.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-08-30</date>
    <initials>psa</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2006-08-28</date>
    <initials>psa/kh</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>&xep0060; and &xep0163; can be used to publish a wide variety of "extended presence" information about users. This document specifies an extended presence payload format that communicates information about the television shows, movies, or other videos that a user watches. This information may be of interest to a user's contacts and can also be used in social networking applications (e.g., IPTV systems).</p>
</section1>
<section1 topic='Protocol' anchor='protocol'>
  <section2 topic='Container Element and Child Elements' anchor='protocol-elements'>
    <p>Information about video viewing is provided by the user (or automated integration with video systems) and is propagated on the network by the user's client. The information container for video viewing data is a &lt;video/&gt; element that is qualified by the 'urn:xmpp:viewing:0' namespace. The video information itself is provided as the XML character data of the following children of the &lt;video/&gt; element:</p>
    <table caption='Child Elements'>
      <tr>
        <th>Element</th>
        <th>Description</th>
        <th>Example</th>
        <th>Datatype</th>
      </tr>
      <tr>
        <td>author</td>
        <td>The author of the program</td>
        <td>Robert Duncan</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>cast</td>
        <td>The cast members of the program</td>
        <td>Trace Beaulieu, Frank Conniff, Joel Hodgson, Jim Mallon, Kevin Murphy, Michael J. Nelson, Mary Jo Pehl</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>channel_name</td>
        <td>The name of the channel showing the program</td>
        <td>Sci-Fi Channel</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>description</td>
        <td>A description of the program</td>
        <td>Terror From The Year 5000</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>duration</td>
        <td>The duration of the program (in seconds)</td>
        <td>1800</td>
        <td>xs:positiveInteger</td>
      </tr>
      <tr>
        <td>end_time</td>
        <td>The end time of the program</td>
        <td>2006-08-29T03:30Z</td>
        <td>xs:dateTime</td>
      </tr>
      <tr>
        <td>episode</td>
        <td>The episode number of the program</td>
        <td>807</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>program_name</td>
        <td>The name of the program</td>
        <td>Mystery Science Theater 3000</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>program_type</td>
        <td>The type of the program</td>
        <td>Comedy</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>start_time</td>
        <td>The start time of the program</td>
        <td>2006-08-29T03:00Z</td>
        <td>xs:dateTime</td>
      </tr>
      <tr>
        <td>subprogram_type</td>
        <td>The type of the sub-program (e.g., outtakes on an extended DVD)</td>
        <td>Cast interview</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>uri</td>
        <td>A URI for the video or relevant service</td>
        <td>http://www.mst3kinfo.com/</td>
        <td>xs:anyURI</td>
      </tr>
      <tr>
        <td>user_comment</td>
        <td>A user's free-form comments about the program</td>
        <td>This is one of my favorite episodes! MST3K forever!</td>
        <td>xs:string</td>
      </tr>
      <tr>
        <td>user_rating</td>
        <td>The user's personal rating of the program (on a scale of 1 to 10, with 10 being highest)</td>
        <td>9</td>
        <td>xs:string</td>
      </tr>
    </table>
    <p>All elements are OPTIONAL.</p>
    <p>NOTE: The datatypes specified above are defined in &w3xmlschema2;.</p>
  </section2>
  <section2 topic='Transport Mechanism' anchor='protocol-transport'>
    <p>When a user starts watching a video, its client may publish that fact to a PEP node whose NodeID is "urn:xmpp:viewing:0" &NSNOTE; or to a generic pubsub node. Because viewing information is not pure presence information and can change independently of the user's availability, it SHOULD NOT be provided as an extension to the &PRESENCE; stanza type.</p>
    <example caption='User Publishes Viewing Information'><![CDATA[
<iq type='set' from='stpeter@jabber.org/work' id='viewing1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:viewing:0'>
      <item id='8eaa8ae16651455376dab4eae45772337e9ec372'>
        <video xmlns='urn:xmpp:viewing:0'>
          <name>Mystery Science Theater 3000</name>
          <episode>807</episode>
          <description>Terror From The Year 5000</description>
          <uri>http://www.mst3kinfo.com/</uri>
        </video>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <p>The viewing information is then delivered to all subscribers:</p>
    <example caption='Viewing Information is Delivered to All Subscribers'><![CDATA[
<message from='stpeter@jabber.org' to='maineboy@jabber.org'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:viewing:0'>
      <item id='8eaa8ae16651455376dab4eae45772337e9ec372'>
        <video xmlns='urn:xmpp:viewing:0'>
          <name>Mystery Science Theater 3000</name>
          <episode>807</episode>
          <description>Terror From The Year 5000</description>
          <uri>http://www.mst3kinfo.com/</uri>
        </video>
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>When the user stops watching the video, the user's client SHOULD send an empty &lt;video/&gt; element with the same ItemID:</p>
    <example caption='User Publishes Stop Information'><![CDATA[
<iq type='set' from='stpeter@jabber.org/work' id='viewing2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:viewing:0'>
      <item id='8eaa8ae16651455376dab4eae45772337e9ec372'>
        <video xmlns='urn:xmpp:viewing:0'/>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <example caption='Stop Information is Delivered to All Subscribers'><![CDATA[
<message from='stpeter@jabber.org' to='maineboy@jabber.org'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:viewing:0'>
      <item id='8eaa8ae16651455376dab4eae45772337e9ec372'>
        <video xmlns='urn:xmpp:viewing:0'/>
      </item>
    </items>
  </event>
</message>
]]></example>
  </section2>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>The videos that a user watches may be sensitive. A client MUST provide a way for a user to configure which videos or types of videos will not be published (e.g., via user preferences).</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>This specification defines the following XML namespace:</p>
    <ul>
      <li>urn:xmpp:viewing:0</li>
    </ul>
    <p>Upon advancement of this specification from a status of Experimental to a status of Draft, the &REGISTRAR; shall add the foregoing namespace to the registry located at &NAMESPACES;, as described in Section 4 of &xep0053;.</p>
  </section2>
  <section2 topic='Namespace Versioning' anchor='registrar-versioning'>
    &NSVER;
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:viewing:0'
    xmlns='urn:xmpp:viewing:0'
    elementFormDefault='qualified'>

  <xs:element name='room'>
    <xs:complexType>
      <xs:sequence minOccurs='0'>
        <xs:element name='author' type='xs:string' minOccurs='0'/>
        <xs:element name='cast' type='xs:string' minOccurs='0'/>
        <xs:element name='channel_name' type='xs:string' minOccurs='0'/>
        <xs:element name='description' type='xs:string' minOccurs='0'/>
        <xs:element name='duration' type='xs:positiveInteger' minOccurs='0'/>
        <xs:element name='end_time' type='xs:dateTime' minOccurs='0'/>
        <xs:element name='episode' type='xs:string' minOccurs='0'/>
        <xs:element name='program_name' type='xs:string' minOccurs='0'/>
        <xs:element name='program_type' type='xs:string' minOccurs='0'/>
        <xs:element name='start_time' type='xs:dateTime' minOccurs='0'/>
        <xs:element name='subprogram_type' type='xs:string' minOccurs='0'/>
        <xs:element name='uri' type='xs:anyURI' minOccurs='0'/>
        <xs:element name='user_comment' type='xs:string' minOccurs='0'/>
        <xs:element name='user_rating' type='xs:string' minOccurs='0'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</xs:schema>
]]></code>
</section1>
</xep>
