<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
  <header>
    <title>Event Logging over XMPP</title>
    <abstract>This specification provides a common framework for sending events to event logs over XMPP networks.</abstract>
    &LEGALNOTICE;
    <number>0337</number>
    <status>Experimental</status>
    <type>Standards Track</type>
    <sig>Standards</sig>
    <approver>Council</approver>
    <dependencies>
      <spec>XMPP Core</spec>
      <spec>XEP-0001</spec>
    </dependencies>
    <supersedes/>
    <supersededby/>
    <shortname>eventlogging</shortname>
    &peterwaher;
    <revision>
      <version>0.2</version>
      <date>2015-11-09</date>
      <initials>pw</initials>
      <remark>
        <p>Updated contact information.</p>
        <p>Updated example JIDs to example.org</p>
      </remark>
    </revision>
    <revision>
      <version>0.1</version>
      <date>2014-01-08</date>
      <initials>psa</initials>
      <remark><p>Initial published version approved by the XMPP Council.</p></remark>
    </revision>
    <revision>
      <version>0.0.2</version>
      <date>2013-12-02</date>
      <initials>pw</initials>
      <remark>
        <p>Addressed pre-publication feedback from the XMPP Council.</p>
      </remark>
    </revision>
    <revision>
      <version>0.0.1</version>
      <date>2013-11-10</date>
      <initials>pw</initials>
      <remark>
        <p>First draft.</p>
      </remark>
    </revision>
  </header>
    <section1 topic='Introduction' anchor='intro'>
        <p>
            This XEP provides a common framework for sending events over an XMPP network. These events can then be logged in event logs or analyzed by network monitors
            to analyze the status or operation of the network and its participants.
        </p>
        <p>
            The basic principle behind interoperable event logging over XMPP is the definition of a common XML element defining the event. This payload is then sent in
            a normal message stanza (i.e. with <strong>type='normal'</strong>) to the recipient. The recipient in turn, if it understands the payload, can choose to store it in an event log, forward it or
            analyze it accordingly.
        </p>
        <p>
            There are various event log packages available, but none yet defined for XMPP or using a well-defined and known XML format. Therefore, this document defines
            such an XML format. This format is able to store <link url='https://tools.ietf.org/html/rfc5424'>Syslog</link> <note>
                RFC-5424: The Syslog Protocol &lt;<link url='https://tools.ietf.org/html/rfc5424'>https://tools.ietf.org/html/rfc5424</link>&gt;
            </note> compliant event information, even though the <link url='https://tools.ietf.org/html/rfc5424'>Syslog</link> event model has been somewhat extended.
            Also, in the use of the facility attribute, this XEP does not have the same restrictions compared to the <link url='https://tools.ietf.org/html/rfc5424'>Syslog</link> specification.
        </p>
        <p>
            This document does not restrict the use of event messages to directed message stanzas alone. It may be envisioned that some would like to publish event information through
            &xep0060; or other mechanisms. It is not in the scope of this document to specify such transports however, as it only deals with direct messages, but a brief list is provided
            in the <link url='#transportoptions'>Security Considerations</link> section.
        </p>
    </section1>
    <section1 topic='Glossary' anchor='glossary'>
        <p>The following table lists common terms and corresponding descriptions.</p>
        <dl>
            <di>
                <dt>Event</dt>
                <dd>A piece of information describing an event in time.</dd>
            </di>
            <di>
                <dt>Event ID</dt>
                <dd>An attribute providing a machine readable ID to the type of event in question without having to parse the message text itself.</dd>
            </di>
            <di>
                <dt>Event Level</dt>
                <dd>Provides an additional level on the previous classification (Minor, Medium, Major).</dd>
            </di>
            <di>
                <dt>Event Type</dt>
                <dd>Coarse classification of the event (Debug, Informational, Notice, Warning, Error, Critical, Alert, Emergency).</dd>
            </di>
            <di>
                <dt>Facility</dt>
                <dd>What type of device, server, application, etc., is sending the message. </dd>
            </di>
            <di>
                <dt>Message</dt>
                <dd>A (human readable) text message describing what has occurred.</dd>
            </di>
            <di>
                <dt>Module</dt>
                <dd>
                    The module reporting the event. Larger software packages are often divided into modules. Keeping track of which modules report which events can be useful when
                    analyzing system performance.
                </dd>
            </di>
            <di>
                <dt>Object</dt>
                <dd>The object to which the event message refers to, on which the current action is performed.</dd>
            </di>
            <di>
                <dt>Stack Trace</dt>
                <dd>
                    Exact position in the code from which the event was reported or where the error occurred. Reporting it in a separate attribute unclutters the message, and removes the need
                    to define custom tags.
                </dd>
            </di>
            <di>
                <dt>Subject</dt>
                <dd>The subject causing the event to take place or performing the action (for instance, user, process, etc.)</dd>
            </di>
            <di>
                <dt>Tag</dt>
                <dd>A custom tag or parameter attached to an event. Each tag has a name and a value and an optional data type.</dd>
            </di>
            <di>
                <dt>Timestamp</dt>
                <dd>When the event occurred.</dd>
            </di>
        </dl>
    </section1>
    <section1 topic='Use Cases' anchor='usecases'>
        <section2 topic='Sending a simple event message' anchor='simpleevent'>
            <p>
                The following example shows how to send a simple event using a normal message to an event log. Only two parameters are required:
                The timestamp of the message goes into the <strong>timestamp</strong> attribute, and the actual messages goes into a child element
                named <strong>message</strong>. This event will be treated as a <strong>Minor Informational</strong> event by the recipient.
            </p>
            <example caption='Simple event message'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T15:52:23Z'>
         <message>Something happened.</message>
      </log>
   </message>]]>
            </example>
        </section2>
        <section2 topic='Sending a multi-line event message' anchor='multilinemessage'>
            <p>
                The following example shows how to send a multi-line event.
            </p>
            <example caption='Multi-line event message'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' timestamp='2013-11-12T11:47:12Z'>
         <message>10 objects deleted:
Object 1
...
Object 10</message>
      </log>
   </message>]]>
            </example>
        </section2>
        <section2 topic='Specifying type and level' anchor='typelevel'>
            <p>
                The following example shows how an event message can be categorized with an event type and level.
            </p>
            <example caption='Specifying type and level'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T15:54:55Z' type='Warning' level='Major'>
         <message>Low on memory.</message>
      </log>
   </message>]]>
            </example>
        </section2>
        <section2 topic='Specifying object and subject' anchor='objectsubject'>
            <p>
                The following example shows how an event message can be further enhanced by providing object and subject information.
            </p>
            <example caption='Specifying object and subject'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T15:58:12Z' type='Informational' level='Major' object='Towel' subject='Arthur Dent'>
         <message>Object deleted.</message>
      </log>
   </message>]]>
            </example>
        </section2>
        <section2 topic='Specifying an event ID' anchor='eventids'>
            <p>
                The following example shows how to send an event message with an event ID that can be singled out later to be analyzed by administrators, for instance.
            </p>
            <example caption='Specifying an event ID'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' id='LoginFailed' timestamp='2013-11-10T16:04:45Z' type='Warning' level='Minor' object='user1' subject='10.0.0.1'>
         <message>User attempted to login but provided incorrect password.</message>
      </log>
   </message>]]>
            </example>
        </section2>
        <section2 topic='Tagging events with custom information' anchor='tags'>
            <p>
                The following example shows how to tag an event using custom information in a way that is easy to interpret and process.
            </p>
            <example caption='Tagging events with custom information'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T16:07:01Z' type='Informational' level='Minor'>
         <message>Current resources.</message>
         <tag name='RAM' value='1655709892' type='xs:long'/>
         <tag name='CPU' value='75.45' type='xs:double'/>
         <tag name='HardDrive' value='163208757248' type='xs:long'/>
      </log>
   </message>]]>
            </example>
            <p><strong>Note:</strong> Any <strong>tag</strong> elements must come after the <strong>message</strong> element.</p>
        </section2>
        <section2 topic='Specifying program module' anchor='modules'>
            <p>
                The following example shows how module information can be provided in events to more easily be able to single out information
                relating to the same application running on different machines.
            </p>
            <example caption='Specifying program module'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T16:17:56Z' type='Error' level='Major' object='object1' subject='user1' module='application1'>
         <message>Something horrible happened.</message>
      </log>
   </message>]]>
            </example>
        </section2>
        <section2 topic='Sending debug information' anchor='debug'>
            <p>
                The following example shows how to send a debug message with a stack trace, module and custom information.
            </p>
            <example caption='Sending debug information'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T16:12:25Z' type='Debug' level='Major' module='My new application' stackTrace='file1, line 1, ...'>
         <message>Something is rotten in the state of Denmark.</message>
         <tag name='a' value='1' type='xs:int'/>
         <tag name='b' value='10' type='xs:int'/>
         <tag name='s' value='Hello World!' type='xs:string'/>
         <stackTrace>File1, Line1, ...
File2, Line2, ...
...</stackTrace>
      </log>
   </message>]]>
            </example>
            <p><strong>Note:</strong> Any <strong>stackTrace</strong> element must come after the <strong>message</strong> element and any <strong>tag</strong> elements.</p>
        </section2>
        <section2 topic='Sending multiple events' anchor='multipleevents'>
            <p>
                The following example shows how multiple events can be sent in a single message. The receiver should interpret this as two different events having been received.
            </p>
            <example caption='Sending multiple events'>
                <![CDATA[
   <message from='device@example.org/device' to='eventlog@example.org' type='normal' xml:lang='en'>
      <log  xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T15:52:23Z'>
         <message>Something happened.</message>
      </log>
      <log  xmlns='urn:xmpp:eventlog' timestamp='2013-11-10T15:54:23Z'>
         <message>Something else happened.</message>
      </log>
   </message>]]>
            </example>
        </section2>
    </section1>
    <section1 topic='Determining Support' anchor='support'>
        <p>If an entity supports the reception of events as specified herein, it MUST advertise that fact by returning a feature of "urn:xmpp:eventlog" in response to &xep0030; information requests.</p>
        <example caption="Service discovery information request">
            <![CDATA[
<iq type='get'
    from='device@example.org/device'
    to='eventlog@example.org'
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]>
        </example>
        <example caption="Service discovery information response">
            <![CDATA[
<iq type='result'
    from='eventlog@example.org'
    to='device@example.org/device'
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='urn:xmpp:eventlog'/>
    ...
  </query>
</iq>]]>
        </example>
        <p>
            In order for an application to determine whether an entity supports this protocol, where possible it SHOULD use the dynamic, presence-based profile of service discovery defined
            in &xep0115;. However, if an application has not received entity capabilities information from an entity, it SHOULD use explicit service discovery instead.
        </p>
    </section1>
    <section1 topic='Implementation Notes' anchor='impl'>
        <section2 topic='Event Type' anchor='eventtype'>
            <p>
                The following table lists possible event types that can be used. If none is specified for an event, it is assumed that the event is <strong>Informational</strong>.
                It is largely based on the severity levels of <link url='https://tools.ietf.org/html/rfc5424'>Syslog</link>.
            </p>
            <table caption='Event Types'>
                <tr>
                    <th>Type</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>Debug</td>
                    <td>Developers can ask applications to send debug messages during development or testing to more easily see what happens in a system.</td>
                </tr>
                <tr>
                    <td>Informational</td>
                    <td>An informational message describing a normal event.</td>
                </tr>
                <tr>
                    <td>Notice</td>
                    <td>Represents a significant condition or change that administrators should be aware of.</td>
                </tr>
                <tr>
                    <td>Warning</td>
                    <td>A warning condition. If not taken into account, the condition could turn into an error.</td>
                </tr>
                <tr>
                    <td>Error</td>
                    <td>An error condition. A condition has been detected that is considered to be an error or a fault.</td>
                </tr>
                <tr>
                    <td>Critical</td>
                    <td>A critical condition. An error so great that it could escalate into something graver if not addressed.</td>
                </tr>
                <tr>
                    <td>Alert</td>
                    <td>An alert condition. Action must be taken immediately.</td>
                </tr>
                <tr>
                    <td>Emergency</td>
                    <td>System is unusable.</td>
                </tr>
            </table>
        </section2>
        <section2 topic='Event Level' anchor='eventlevel'>
            <p>
                Given an Event Type, an event level can provide additional information about the extent or importance of the event (a second dimension).
            </p>
            <table caption='Event Levels'>
                <tr>
                    <th>Level</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>Minor</td>
                    <td>Minor events, concerning normal operating procedures.</td>
                </tr>
                <tr>
                    <td>Medium</td>
                    <td>Medium events.</td>
                </tr>
                <tr>
                    <td>Major</td>
                    <td>More substantial events or events that are affecting larger parts of the system.</td>
                </tr>
            </table>
        </section2>
        <section2 topic='Event ID' anchor='eventid'>
            <p>
                Using Event IDs, the application can provide a machine understandable classification of the event. Examples could be "Login"-events, "ConnectionProblem"-events, etc.
                It is easier to group, parse or interpret events and their tags if you know what type of event it is. Event IDs are manufacturer specific, and only provide a means
                to more easily extract subsets of events for processing without having to parse message texts (which should be allowed to be localizable).
            </p>
            <p>
                <strong>Note:</strong> To avoid problems when running applications using different locales, event IDs should never be localized.
            </p>
        </section2>
        <section2 topic='Object' anchor='object'>
            <p>
                An event is often linked to an object, e.g. on which object an action was performed, or which object is reporting a condition. The object field permits
                the tagging of objects in a common way. It is later easy to extract all events relating to a specific object by using this attribute.
            </p>
        </section2>
        <section2 topic='Subject' anchor='subject'>
            <p>
                An event is often also linked to a subject, i.e. who or what performed a given action resulting in the event or condition. The subject field permits
                the tagging of subjects in a common way. It is later easy to extract all events relating to a specific subject by using this attribute.
            </p>
        </section2>
        <section2 topic='Facility' anchor='facility'>
            <p>
                Facility can be either a facility in the network sense or in the system sense. This document does not restrict its use to the possible choices defined by
                other protocols such as <link url='https://tools.ietf.org/html/rfc5424'>Syslog</link>, and leaves it open. However, it is left as a special attribute since
                it is important in monitoring applications.
            </p>
        </section2>
        <section2 topic='Module' anchor='module'>
            <p>
                A module is part of a larger software package. Using the module attribute makes it easier to attribute events to specific parts of a distributed
                application and analyze them separately.
            </p>
        </section2>
        <section2 topic='Stack Trace' anchor='stacktrace'>
            <p>
                Stack Traces can be important information to developers and correlate events to actual locations in the code that generated the event. This document
                does not specify any particular format for stack traces.
            </p>
        </section2>
        <section2 topic='Tag' anchor='tag'>
            <p>
                Any event can have a custom set of tags attached to it. A tag is required to have a name and a value. It can also optionally specify a data type.
                Data types are specified using Qualified Names (QNames). If possible, they should adhere to the list of
                <link url='http://xmpp.org/registrar/xdv-datatypes.html'>Data Forms Validation Datatypes</link> <note>
                    Data Forms Validation Datatypes &lt;<link url='http://xmpp.org/registrar/xdv-datatypes.html'>http://xmpp.org/registrar/xdv-datatypes.html</link>&gt;
                </note> that is maintained by the XMPP Registrar.
            </p>
            <p>
                <strong>Note:</strong> To avoid problems when running applications using different locales, tag names should never be localized.
            </p>
        </section2>
        <section2 topic='Normalized tables' anchor='normalizedtables'>
            <p>
                If persisting received events in a database, care should be taken if normalized tables are used for storage of tags names and values, event IDs, objects, subjects,
                facilities and modules. If this is the case, the receiver should look for types of values that can be incompatible with normalized tables (such as floating point values or numbers
                in general, GUIDs, resource names in JIDs etc.) and replace them with some descriptive text and append the corresponding value in the message text instead. This to avoid problems with indexes in
                databases because of devices implemented by third parties.
            </p>
            <p>
                It is still valid to send information like sequence numbers, unique GUIDs, measurements, resource names in JIDs etc. in tag names and values, but such information
                should be avoided in event IDs, objects, subjects, facilities and modules, as they can cause problems further down the line.
            </p>
        </section2>
        <section2 topic='Multi-line messages and stack traces' anchor='multilinemessagesstacktraces'>
            <p>
                The messag text and stack trace parts of an event message lie as simple type valued child elements (xs:string). This allows for simple encoding of multi-line text
                information into these two parameters. However, do not indent new lines when serializing multi-line text to these parameters to make the XML look nicer. The recipient
                cannot know what whitespace is indenting and what is part of the actual information.
            </p>
        </section2>
    </section1>
    <section1 topic='Internationalization Considerations' anchor='i18n'>
        <section2 topic='Time Zones' anchor='timezones'>
            <p>
                All timestamps and dateTime values use the XML data type xs:dateTime to specify values. These values include a date, an optional time and an optional time zone.
            </p>
            <p>
                <strong>Note:</strong> If time zone is not available, it is supposed to be undefined. The recipient of an event message without time zone information
                should assume the sender has the same time zone as the received, if not explicitly configured otherwise on the recipient side.
            </p>
            <p>
                If devices report time zone, this information should be propagated throughout the system. Otherwise, comparing timestamps from different time zones will be impossible.
            </p>
        </section2>
        <section2 topic='xml:lang' anchor='lang'>
            <p>
                Event messages SHOULD contain an <strong>xml:lang</strong> attribute on the message stanza to specify the language
                used in message texts, etc. If language information is not available, e.g. if relaying messages are not created by the device itself,
                the <strong>xml:lang</strong> attribute can be omitted.
            </p>
        </section2>
    </section1>
    <section1 topic='Security Considerations' anchor='security'>
        <section2 topic='Zero configuration' anchor='zeroconf'>
            <p>
                Even though this document permits zero-configuration of devices to event logs, this might not always be the best option. Event information might be sensitive
                and should not be sent to anybody just because they support the event log feature as defined in this document.
            </p>
        </section2>
        <section2 topic='Sensitive information' anchor='sensitiveinfo'>
            <p>
                <strong>Never</strong> log information that should be handled securely or encrypted, such as passwords.
            </p>
        </section2>
        <section2 topic='Transport options' anchor='transportoptions'>
            <p>
                The following subsections lists different transport options together with security considerations for each one.
            </p>
            <section3 topic='Direct messages'>
                <p>
                    This document explicitly describes how to send event messages in direct messages. If sensitive information is being sent,
                    end-to-end encryption should be considered.
                </p>
            </section3>
            <section3 topic='Publish/Subscribe'>
                <p>
                    Event messages could be published using <link url='http://xmpp.org/extensions/xep-0060.html'>Publish-Subscribe</link>. But, even more care should
                    be taken to log only information that can be published openly. If there's risk for sensitive information to be logged, the publish/subscribe pattern
                    should be avoided.
                </p>
            </section3>
        </section2>
    </section1>
    <section1 topic='IANA Considerations' anchor='iana'>
        <p>This document requires no interaction with &IANA;.</p>
    </section1>
    <section1 topic='XMPP Registrar Considerations' anchor='registrar'>
        <p>
            The <link url="#schema">protocol schema</link> needs to be added to the list of <link url="http://xmpp.org/resources/schemas/">XMPP protocol schemas</link>.
        </p>
    </section1>
    <section1 topic='XML Schema' anchor='schema'>
        <code>
            <![CDATA[
    <?xml version='1.0' encoding='UTF-8'?>
    <xs:schema
        xmlns:xs='http://www.w3.org/2001/XMLSchema'
        targetNamespace='urn:xmpp:eventlog'
        xmlns='urn:xmpp:eventlog'
        elementFormDefault='qualified'>

        <xs:element name='log'>
            <xs:complexType>
                <xs:sequence>
                    <xs:element name='message' type='xs:string' minOccurs='1' maxOccurs='1'/>
                    <xs:element name='tag' minOccurs='0' maxOccurs='unbounded'>
                        <xs:complexType>
                            <xs:attribute name='name' type='xs:string' use='required'/>
                            <xs:attribute name='value' type='xs:string' use='required'/>
                            <xs:attribute name='type' type='xs:QName' use='optional' default='xs:string'/>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name='stackTrace' type='xs:string' minOccurs='0' maxOccurs='1'/>
                </xs:sequence>
                <xs:attribute name='timestamp' type='xs:dateTime' use='required'/>
                <xs:attribute name='id' type='xs:string' use='optional'/>
                <xs:attribute name='type' type='EventType' use='optional' default='Informational'/>
                <xs:attribute name='level' type='EventLevel' use='optional' default='Minor'/>
                <xs:attribute name='object' type='xs:string' use='optional'/>
                <xs:attribute name='subject' type='xs:string' use='optional'/>
                <xs:attribute name='facility' type='xs:string' use='optional'/>
                <xs:attribute name='module' type='xs:string' use='optional'/>
            </xs:complexType>
        </xs:element>

        <xs:simpleType name='EventType'>
            <xs:restriction base='xs:string'>
                <xs:enumeration value='Debug'/>
                <xs:enumeration value='Informational'/>
                <xs:enumeration value='Notice'/>
                <xs:enumeration value='Warning'/>
                <xs:enumeration value='Error'/>
                <xs:enumeration value='Critical'/>
                <xs:enumeration value='Alert'/>
                <xs:enumeration value='Emergency'/>
            </xs:restriction>
        </xs:simpleType>

        <xs:simpleType name='EventLevel'>
            <xs:restriction base='xs:string'>
                <xs:enumeration value='Major'/>
                <xs:enumeration value='Medium'/>
                <xs:enumeration value='Minor'/>
            </xs:restriction>
        </xs:simpleType>

    </xs:schema>]]>
        </code>
    </section1>
    <section1 topic='Acknowledgements' anchor='ack'>
        <p>Thanks in alphabetical order to Dave Cridland, Joachim Lindborg, Karin Forsell, Ludovic Bocquet, Markus Kohlhase, Matthew Wild, Mike Taylor, Philipp Hancke, Robert Kosten, Steffen Larsen, and Yusuke DOI for all valuable feedback.</p>
    </section1>
</xep>
