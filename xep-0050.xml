<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Ad-Hoc Commands</title>
  <abstract>This document defines an XMPP protocol extension for advertising and executing application-specific commands, such as those related to a configuration workflow. Typically the commands contain data forms (XEP-0004) in order to structure the information exchange.</abstract>
  &LEGALNOTICE;
  <number>0050</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>commands</shortname>
  <schemaloc>
    <url>http://www.xmpp.org/schemas/commands.xsd</url>
  </schemaloc>
  &linuxwolf;
  <revision>
    <version>1.2.2</version>
    <date>2016-12-03</date>
    <initials>XEP Editor (ssw, fs)</initials>
    <remark>Mark 'note' element's 'type' attribute as optional in the schema. Introduce 'Acknowledgements' section.</remark>
  </revision>
  <revision>
    <version>1.2.1</version>
    <date>2015-10-15</date>
    <initials>XEP Editor (mam)</initials>
    <remark>Corrected text regarding "xml:lang" is an attribute not an element (Christian Schudt).</remark>
  </revision>
  <revision>
    <version>1.2</version>
    <date>2005-06-30</date>
    <initials>psa</initials>
    <remark>Corrected typos and other small errors.</remark>
  </revision>
  <revision>
    <version>1.1.1</version>
    <date>2004-01-02</date>
    <initials>lw</initials>
    <remark>Cleaned up errors in schema; added more clarifications about actions</remark>
  </revision>
  <revision>
    <version>1.1</version>
    <date>2003-12-30</date>
    <initials>lw</initials>
    <remark>More strict usage of the terms "requester" and "responder"; added explicit flow-control information; cleaned up i18n and l10n based on IETF efforts</remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2003-05-19</date>
    <initials>psa</initials>
    <remark>Per a vote of the Jabber Council, advanced status to Draft.</remark>
  </revision>
  <revision>
    <version>0.13</version>
    <date>2003-04-28</date>
    <initials>lw</initials>
    <remark>More clarity on security; added notes about i18n and l10n; included xml:lang in XML-Schema.</remark>
  </revision>
  <revision>
    <version>0.12</version>
    <date>2003-04-22</date>
    <initials>lw</initials>
    <remark>Fixed typos; removed references to &PRESENCE;; added more security condiderations; added notes about &lt;command/&gt; child precedence.</remark>
  </revision>
  <revision>
    <version>0.11</version>
    <date>2003-02-20</date>
    <initials>lw</initials>
    <remark>Created XML Schema.</remark>
  </revision>
  <revision>
    <version>0.10</version>
    <date>2003-02-20</date>
    <initials>lw</initials>
    <remark>Relaxed and clarified &lt;command/&gt; payload requirements; Fixed minor errors in examples.</remark>
  </revision>
  <revision>
    <version>0.9.1</version>
    <date>2003-02-12</date>
    <initials>lw</initials>
    <remark>Fixed disco examples to reflect specification text.</remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2003-02-09</date>
    <initials>lw</initials>
    <remark>Added "Implementation Notes" section; Removed syntax requirements for disco &lt;item/&gt; "node" attributes; Added "disclaimer" with regards to "node" values; Added clarifications regarding predefined/required commands; Added clarifications for command payloads; Added clarifications for command success versus failure; Added clarifications on "sessionid"; Fixed "x:data" errors.</remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2003-01-26</date>
    <initials>lw</initials>
    <remark>Fixed minor grammatical errors; Changed some MUSTs to SHOULDs.</remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2003-01-22</date>
    <initials>lw</initials>
    <remark>Added disco node syntax for commands; Expanded "XMPP Registrar" section.</remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2003-01-21</date>
    <initials>lw</initials>
    <remark>Consistency in the usage of the "x-commands" short name; Added "Discovering Support" usecase; made other disco usage more "disco-like".</remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2003-01-18</date>
    <initials>lw</initials>
    <remark>Fixed minor errors; Removed "complete" action value from &lt;command/&gt;; Removed &lt;list/&gt; in favor of disco.</remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2002-11-05</date>
    <initials>lw</initials>
    <remark>Fixed minor errors with examples; Changed position of DTD to be more consistent with other XEPs by this author; Added details for "disco" support; Added section on "Security Considerations", "IANA Considerations", and "JANA Considerations".</remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2002-10-11</date>
    <initials>lw</initials>
    <remark>Fixed minor errors with examples; Changed from using &lt;query/&gt; and &lt;x/&gt; to &lt;list/&gt; for command lists; Made the "cancel" use-case more explicit.</remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2002-10-10</date>
    <initials>lw</initials>
    <remark>Changed namespace from "jabber:x:commands" to "http://jabber.org/protocol/commands"; Changed execution to use &lt;iq/&gt; instead of any packet element; Changed execution to contain extensions; Reorganized for better clarity; Corrected spelling and grammar errors.</remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2002-10-08</date>
    <initials>lw</initials>
    <remark>Initial release.</remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>This document specifies an XMPP protocol extension that enables an entity to initiate a command session where there is no preferred namespace. It also specifies a protocol extension for describing the types of ad hoc sessions, similar in concept to a menu.</p>
  <section2 topic='Motivation' anchor='motivation'>
    <p>The motivation for such a protocol comes from the desire to expand Jabber technologies outside the domain of instant messaging. Similar to web applications, these "Jabber applications" are systems in which, via a compliant Jabber client, a user (or automated process) can interact with the application. The client need not be specially-written in order to take advantage of this Jabber application.</p>
    <p>This mechanism allows for a larger base of Jabber entities to participate as part of larger application architectures.  Although specialized clients would be preferred in many environments, this protocol allows for applications to have a wider audience (i.e., any compliant Jabber client).</p>
  </section2>
  <section2 topic='Concepts' anchor='concepts'>
      <p>The namespace governing this protocol is "http://jabber.org/protocol/commands" (hereafter referred to as x-commands). This namespace relies on the  &IQ; element for execution, and can use the &MESSAGE; element for announcing command lists. This protocol depends on &xep0030; for reporting and announcing command lists. This namespace is intended to complement &xep0004; (jabber:x:data), but is not necessarily dependent upon it.</p>
  </section2>
  <section2 topic='Prerequisites' anchor='prerequisites'>
    <p>Support of x-commands implies support for "jabber:x:data" (although this requirement may be replaced and/or amended with a requirement to support &xep0020; by performing the appropriate negotations before executing commands). x-commands provides a bootstrap for performing ad-hoc "jabber:x:data" processes, while the data itself is conveyed using "jabber:x:data".</p>
    <p>The x-commands namespace is not designed to replace machine-to-machine oriented RPC systems such as &xep0009;, where the two entities fully understand the command's purpose and behavior prior to execution. x-commands is oriented more for human interaction, where the user agent (such as a compliant Jabber client) most likely has no prior knowledge of the command's purpose and behavior.</p>
  </section2>
</section1>
<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Discovering Support' anchor='discover'>
    <p>To determine if an entity supports x-commands, the requester uses Service Discovery. The requester makes an "#info" query to the responder. If supported, the responder includes a &lt;feature/&gt; with the "var" of "http://jabber.org/protocol/commands".</p>
    <example caption='Disco request for information'><![CDATA[
<iq type='get'
    to='responder@domain'
    from='requester@domain'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <example caption='Disco result for information'><![CDATA[
<iq type='result'
    from='responder@domain'
    to='requester@domain'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='http://jabber.org/protocol/commands'/>
    ...
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Retrieving the Command List' anchor='retrieve'>
    <p>To find what commands an entity provides, the requester uses Service Discovery. Each command is a node of the responder, under the fixed node "http://jabber.org/protocol/commands" (for which the service discovery identity category is "automation" and type is "command-list"). Use of a fixed node for all commands of an entity allows for immediate retrieval of commands.</p>
    <p>Each command is a disco item. The node attribute of &lt;item/&gt; identifies the command, and the name attribute is the label for the command.</p>
    <p>The requester retrieves the list of commands by querying for the responder's items for the node "http://jabber.org/protocol/commands":</p>
    <example caption='Disco request for items'><![CDATA[
<iq type='get'
    from='requester@domain'
    to='responder@domain'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='http://jabber.org/protocol/commands'/>
</iq>
]]></example>
    <example caption='Disco result for items'><![CDATA[
<iq type='result'
    to='requester@domain'
    from='responder@domain'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='http://jabber.org/protocol/commands'>
    <item jid='responder@domain'
          node='list'
          name='List Service Configurations'/>
    <item jid='responder@domain'
          node='config'
          name='Configure Service'/>
    <item jid='responder@domain'
          node='reset'
          name='Reset Service Configuration'/>
    <item jid='responder@domain'
          node='start'
          name='Start Service'/>
    <item jid='responder@domain'
          node='stop'
          name='Stop Service'/>
    <item jid='responder@domain'
          node='restart'
          name='Restart Service'/>
  </query>
</iq>
]]></example>
    <p>The result can then be used by the client to populate a menu, a dialog of buttons, or whatever is appropriate to the current user interface. The responder is not required to send the same list of commands to all requesters.</p>
    <p>If additional information about a command is desired, the requester queries for disco information on the command node:</p>
    <example caption='Disco request for command information'><![CDATA[
<iq type='get'
    from='requester@domain'
    to='responder@domain'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='config'/>
</iq>
]]></example>
    <example caption='Disco result for command information'><![CDATA[
<iq type='result'
    to='requester@domain'
    from='responder@domain'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='config'>
    <identity name='Configure Service'
              category='automation'
              type='command-node'/>
    <feature var='http://jabber.org/protocol/commands'/>
    <feature var='jabber:x:data'/>
  </query>
</iq>
]]></example>
    <p>A responder MUST at least provide &lt;identity category='automation' type='command-node'/&gt; and &lt;feature var='http://jabber.org/protocol/commands'/&gt;, and SHOULD include &lt;feature var='jabber:x:data'/&gt;. It is not required to support additional information about a command. If the command is not available to the requester, the responder SHOULD respond with a 403 "Forbidden" error.</p>
  </section2>
  <section2 topic='Announcing the Command List' anchor='announce'>
    <p>In some cases, a responder entity may find it appropriate to automatically push this information (e.g. a subscribed entity becomes available). In this case, the entity sends a &MESSAGE; containing the proper disco#items &QUERY;:</p>
    <example caption='Announcing commands (via &lt;message/&gt;)'><![CDATA[
<message from='responder@domain' to='requester@domain'>
  <subject>Service Controls</subject>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='http://jabber.org/protocol/commands'>
    <item jid='responder@domain'
          node='list'
          name='List Service Configurations'/>
    <item jid='responder@domain'
          node='config'
          name='Configure Service'/>
    <item jid='responder@domain'
          node='reset'
          name='Reset Service Configuration'/>
    <item jid='responder@domain'
          node='start'
          name='Start Service'/>
    <item jid='responder@domain'
          node='stop'
          name='Stop Service'/>
    <item jid='responder@domain'
          node='restart'
          name='Restart Service'/>
  </query>
</message>
]]></example>
    <p>The only portion required is &lt;query xmlns='http://jabber.org/protocol/disco#items'/&gt;. Any other information (such as the &lt;subject/&gt; in the foregoing example) is OPTIONAL.</p>
  </section2>
  <section2 topic='Executing Commands' anchor='execute'>
    <section3 topic='Simple Execution' anchor='execute-simple'>
    <p>To execute a command, the requester sends an &IQ; containing the command to execute:</p>
    <example caption="Execute command request"><![CDATA[
<iq type='set' to='responder@domain' id='exec1'>
  <command xmlns='http://jabber.org/protocol/commands'
           node='list'
           action='execute'/>
</iq>
]]></example>
    <p>The requester MAY include the "action='execute'", although this is implied.</p>
    <p>If the command does not require any user interaction (returns results only), the responder sends a packet similar to the following:</p>
    <example caption="Execute command result"><![CDATA[
<iq type='result' from='responder@domain' to='requester@domain' id='exec1'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='list:20020923T213616Z-700'
           node='list'
           status='completed'>
    <x xmlns='jabber:x:data' type='result'>
      <title>Available Services</title>
      <reported>
        <field var='service' label='Service'/>
        <field var='runlevel-1' label='Single-User mode'/>
        <field var='runlevel-2' label='Non-Networked Multi-User mode'/>
        <field var='runlevel-3' label='Full Multi-User mode'/>
        <field var='runlevel-5' label='X-Window mode'/>
      </reported>
      <item>
        <field var='service'><value>httpd</value></field>
        <field var='runlevel-1'><value>off</value></field>
        <field var='runlevel-2'><value>off</value></field>
        <field var='runlevel-3'><value>on</value></field>
        <field var='runlevel-5'><value>on</value></field>
      </item>
      <item>
        <field var='service'><value>postgresql</value></field>
        <field var='runlevel-1'><value>off</value></field>
        <field var='runlevel-2'><value>off</value></field>
        <field var='runlevel-3'><value>on</value></field>
        <field var='runlevel-5'><value>on</value></field>
      </item>
      <item>
        <field var='service'><value>jabberd</value></field>
        <field var='runlevel-1'><value>off</value></field>
        <field var='runlevel-2'><value>off</value></field>
        <field var='runlevel-3'><value>on</value></field>
        <field var='runlevel-5'><value>on</value></field>
      </item>
    </x>
  </command>
</iq>
]]></example>
    </section3>
    <p>The above example shows the command execution resulting in a "jabber:x:data" form. It is also possible that one or more URLs (specified via &xep0066;) could be returned.</p>
    <section3 topic='Multiple Stages' anchor='execute-multiple'>
      <p>If the command requires more interaction, the responder sends a result &IQ; that contains the command information and the form to be filled out:</p>
      <example caption='Execute command request (stage 1)'><![CDATA[
<iq type='set' to='responder@domain' id='exec1'>
  <command xmlns='http://jabber.org/protocol/commands'
           node='config'
           action='execute'/>
</iq>
]]></example>
    <example caption='Execute command result (stage 1)'><![CDATA[
<iq type='result' from='responder@domain' to='requester@domain' id='exec1'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'
           status='executing'>
    <actions execute='next'>
      <next/>
    </actions>
    <x xmlns='jabber:x:data' type='form'>
      <title>Configure Service</title>
      <instructions>
        Please select the service to configure.
      </instructions>
      <field var='service' label='Service' type='list-single'>
        <option><value>httpd</value></option>
        <option><value>jabberd</value></option>
        <option><value>postgresql</value></option>
      </field>
    </x>
  </command>
</iq>
]]></example>
    <p>The &lt;command/&gt; SHOULD include an &lt;actions/&gt; element, which specifies the details of what the allowed actions are for this stage of execution. Each element within &lt;action/&gt; matches a possible value for the &lt;command/&gt; element's "action" attribute. The "execute" attribute defines which of the included actions is considered the equivalent to "execute" for this stage. In the above example, the only allowed action is to progress to the next stage, which is also the default.</p>
    <p>The requester then submits the form, maintaining the command node and sessionid:</p>
    <example caption='Execute command request (stage 2)'><![CDATA[
<iq type='set' to='responder@domain' id='exec2'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'>
    <x xmlns='jabber:x:data' type='submit'>
      <field var='service'>
        <value>httpd</value>
      </field>
    </x>
  </command>
</iq>
]]></example>
    <p>The responder then provides the next stage's form in the result <note>Note that the second stage can be reverted to the first stage or completed (signaled by the inclusion of the &lt;prev/&gt; and &lt;complete/&gt; elements), and that the default action is to complete execution (signaled by the "execute" attribute's value of "complete").</note>:</p>
    <example caption='Execute command result (stage 2)'><![CDATA[
<iq type='result' from='responder@domain' to='requester@domain' id='exec2'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'
           status='executing'>
    <actions execute='complete'>
      <prev/>
      <complete/>
    </actions>
    <x xmlns='jabber:x:data' type='form'>
      <title>Configure Service</title>
      <instructions>
        Please select the run modes and state for 'httpd'.
      </instructions>
      <field var='runlevel' label='Run Modes' type='list-multi'>
        <value>3</value>
        <value>5</value>
        <option label='Single-User'><value>1</value></option>
        <option label='Non-Networked Multi-User'><value>2</value></option>
        <option label='Full Multi-User'><value>3</value></option>
        <option label='X-Window'><value>5</value></option>
      </field>
      <field var='state' label='Run State' type='list-single'>
        <value>off</value>
        <option label='Active'><value>off</value></option>
        <option label='Inactive'><value>on</value></option>
      </field>
    </x>
  </command>
</iq>
]]></example>
    <p>The requester then submits the second stage's form, again maintaining the node and sessionid:</p>
    <example caption='Execute command request (stage 3)'><![CDATA[
<iq type='set' to='responder@domain' id='exec3'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'>
    <x xmlns='jabber:x:data' type='submit'>
      <field var='mode'>
        <value>3</value>
      </field>
      <field var='state'>
        <value>on</value>
      </field>
    </x>
  </command>
</iq>
]]></example>
    <example caption='Execute command result (stage 3)'><![CDATA[
<iq type='result' from='responder@domain' to='requester@domain' id='exec3'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'
           status='completed'>
    <note type='info'>Service 'httpd' has been configured.</note>
  </command>
</iq>
]]></example>
    <p>If the requester wishes to revert to the previous stage, it sends an &IQ; with the command's node and sessionid, and "action='prev'":</p>
    <example caption='Execute command request (revert from stage 2 to stage 1)'><![CDATA[
<iq type='set' to='responder@domain' id='exec2'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'
           action='prev'/>
</iq>
]]></example>
    <p>If the responder accepts this, it responds with the previous stage's command <note>The responder MAY present "remembered" field values, but doing so is OPTIONAL.</note>:</p>
    <example caption='Execute command result (revert from stage 2 to stage 1)'><![CDATA[
<iq type='result' from='responder@domain' to='requester@domain' id='exec2'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'
           status='executing'>
    <actions execute='next'>
      <next/>
    </actions>
    <x xmlns='jabber:x:data' type='form'>
      <title>Configure Service</title>
      <instructions>
        Please select the service to configure.
      </instructions>
      <field var='service' label='Service' type='list-single'>
        <value>httpd</value>
        <option><value>httpd</value></option>
        <option><value>jabberd</value></option>
        <option><value>postgresql</value></option>
      </field>
    </x>
  </command>
</iq>
]]></example>
  </section3>
  <section3 topic='Canceling' anchor='cancel'>
    <p>In the case where a command has multiple stages, the requester may wish to cancel at some point. To cancel, the requester sends the continuing command request with an "action='cancel'":</p>
  <example caption='Execute command request (stage 2; canceling)'><![CDATA[
<iq type='set' to='responder@domain' id='exec3'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'
           action='cancel'/>
</iq>
]]></example>
    <p>This enables the responder to free any resources allocated during the process. The responder MUST reply with the success of the command:</p>
    <example caption='Execute command result (stage 2; canceled)'><![CDATA[
<iq type='result' from='responder@domain' to='requester@domain' id='exec3'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='config:20020923T213616Z-700'
           node='config'
           status='canceled'/>
</iq>
]]></example>
    </section3>
  </section2>
</section1>
<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Defined/Required Command Nodes' anchor='impl-req'>
    <p>All commands used in the above examples are for illustrative purposes only. There are no predefined or required commands.</p>
  </section2>
  <section2 topic='Command Nodes' anchor='impl-nodes'>
    <p>Each command is identified by its 'node' attribute. This matches the 'node' attribute from the service discovery &lt;item/&gt; element. Service Discovery requires that all 'node' values be unique within a given JID. This document requires that the 'node' value used in &lt;command/&gt; exactly match the value used in the &lt;item/&gt; element. It is the responsibility of the responder implementation to ensure each command's node is unique for their JID.</p>
  </section2>
  <section2 topic='Session Lifetime' anchor='impl-session'>
    <p>The execution of a command exists within the concept of a session. Each session is identified by the 'sessionid' attribute, and SHOULD be valid only between one requester/responder pair. The responder is responsible for determining the session lifetime, with some help from the requester.</p>
    <p>The requester starts a new session for a command by simply sending a &lt;command/&gt; with the 'node' attribute (and optionally the 'status' attribute with a value of "execute"). Once the 'sessionid' attribute is given to the requester, it is the requester's responsibility to maintain it for the session's lifetime. A session ends when the responder sends a &lt;command status='completed'/&gt; or the requester sends a &lt;command action='cancel'/&gt; with the provided 'sessionid' value.</p>
    <p>Once a session has ended, its 'sessionid' value SHOULD NOT be used again. It is the responder's responsibility to ensure that each 'sessionid' value is unique.</p>
    <p>It may be possible for a requester to be executing more than one session of the same command with a given responder. If the responder does not allow more than one session of the same command with the same requester, the responder MUST return a &notallowed; error (see &xep0086;).</p>
  </section2>
  <section2 topic='Command Actions' anchor='impl-actions'>
    <p>The result for each stage (other than the last) of a command's execution SHOULD include an &lt;actions/&gt; element. The user-agent can use this information to present a more-intelligent user interface, such as a "druid" or "wizard".</p>
    <p>For a user-agent, a typical interpretation of the &lt;actions/&gt; information (or lack thereof) would be the following:</p>
    <ol>
      <li>The action "cancel" is always allowed.</li>
      <li>If there is no &lt;actions/&gt; element, the user-agent can use a single-stage dialog or view.
        <ul>
          <li>The action "execute" is equivalent to the action "complete".</li>
        </ul>
      </li>
      <li>If there is an &lt;actions/&gt; element, the user-agent usually uses a multi-stage dialog or view, such as a wizard.
        <ul>
          <li>The action "execute" is always allowed, and is equivalent to the action "next".</li>
          <li>The "prev" action is typically the "back" or "previous" button or option in a wizard. If &lt;prev/&gt; is not contained by the &lt;actions/&gt;, it is disabled.</li>
          <li>The "next" action is typically the "next" button or option in a wizard. If &lt;next/&gt; is not contained by the &lt;actions/&gt;, it is disabled.</li>
          <li>The "complete" action is typically the "finish" or "done" button or option in a wizard. If &lt;complete/&gt; is not contained by the &lt;actions/&gt;, it is disabled.</li>
          <li>If the &lt;actions/&gt; possesses the "execute" attribute, that value is the default button or option. If the &lt;actions/&gt; does not possess the "execute" attribute, there is no default button or option.</li>
        </ul>
      </li>
    </ol>
    <p>Responders SHOULD use the following guidelines when providing &lt;actions/&gt;:</p>
    <ul>
      <li>The "execute" attribute SHOULD NOT specify a value that does not match one of the allowed actions.</li>
    </ul>
  </section2>
  <section2 topic='Command Payloads' anchor='impl-payloads'>
    <p>On its own, the &lt;command/&gt; has very little usefulness. It relies on its payload to give full meaning to its use. The payload can be elements in any namespace that makes sense and is understood (such as "jabber:x:data"), and/or one or more &lt;note/&gt; elements. Any namespaced elements can be used within a &lt;command/&gt;. The only limitations are that the elements not require certain parent elements (such as &IQ;), or specifically allow for &lt;command/&gt; qualified by the "http://jabber.org/protocol/commands" namespace as a possible parent element.</p>
    <p>As a general rule, the payload is provided only by the responder. The primary exception to this rule is with the "jabber:x:data" extension (and other namespaces with similar semantics). In this case, if the responder provides a form to submit, the requester SHOULD respond with the submitted data (using the semantics from XEP-0004).</p>
    <p>When the precedence of these payload elements becomes important (such as when both "jabber:x:data" and "jabber:x:oob" elements are present), the order of the elements SHOULD be used. Those elements that come earlier in the child list take precedence over those later in the child list. The requester SHOULD consider those elements qualified by the same namespace as having an equivalent precedence (such as if multiple "jabber:x:oob" elements are included).</p>
    <section3 topic='Use of Data Forms' anchor='impl-forms'>
      <p>When the payload is "jabber:x:data", there are certain conditions applied. The requester SHOULD NOT use a "jabber:x:data" type other than "submit". Responders SHOULD consider any &lt;x type='cancel'/&gt; to be &lt;x type='submit'/&gt;.</p>
    </section3>
  </section2>
  <section2 topic='Commands Successful/Failed' anchor='impl-commands'>
    <p>The status of command execution signals only if the command is executing, has been completed, or been canceled. If completed, the "status" attribute does not specify if it completed successfully or not. If a command completes but fails, the responder MUST include at least one &lt;note type='error'/&gt; with the &lt;command status='completed'/&gt; it returns.</p>
  </section2>
  <section2 topic='Internationalization and Localization' anchor='impl-i18n'>
    <p>The requester SHOULD provide its locale information using the "xml:lang" attribute on either the &IQ; (RECOMMENDED) or &lt;command/&gt; element. Each execution session (identified by the "sessionid" attribute) SHOULD use only one language/locale, and requesters and responders SHOULD assume the first language/locale specified applies. The responder SHOULD specify the language/locale with the every command session's response.</p>
    <example caption='Execute command request (with language/locale)'><![CDATA[
<iq type='set' to='responder@domain' id='exec1' xml:lang='en-us'>
  <command xmlns='http://jabber.org/protocol/commands'
           node='list'
           action='execute'/>
</iq>
]]></example>
    <example caption="Execute command result (with language/locale)"><![CDATA[
<iq type='result'
    from='responder@domain'
    to='requester@domain'
    id='exec1'
    xml:lang='en-us'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='list:20020923T213616Z-700'
           node='list'
           status='completed'>
    <x xmlns='jabber:x:data' type='result'>
      <title>Available Services</title>
      <reported>
        <field var='service' label='Service'/>
        <field var='runlevel-1' label='Single-User mode'/>
        <field var='runlevel-2' label='Non-Networked Multi-User mode'/>
        <field var='runlevel-3' label='Full Mult-User mode'/>
        <field var='runlevel-5' label='X-Window mode'/>
      </reported>
      <item>
        <field var='service'><value>httpd</value></field>
        <field var='runlevel-1'><value>off</value></field>
        <field var='runlevel-2'><value>off</value></field>
        <field var='runlevel-3'><value>on</value></field>
        <field var='runlevel-5'><value>on</value></field>
      </item>
      <item>
        <field var='service'><value>postgresql</value></field>
        <field var='runlevel-1'><value>off</value></field>
        <field var='runlevel-2'><value>off</value></field>
        <field var='runlevel-3'><value>on</value></field>
        <field var='runlevel-5'><value>on</value></field>
      </item>
      <item>
        <field var='service'><value>jabberd</value></field>
        <field var='runlevel-1'><value>off</value></field>
        <field var='runlevel-2'><value>off</value></field>
        <field var='runlevel-3'><value>on</value></field>
        <field var='runlevel-5'><value>on</value></field>
      </item>
    </x>
  </command>
</iq>
]]></example>
    <p>Within the "http://jabber.org/protocol/commands" schema, the language/locale applies only to the human-readable character data for &lt;info/&gt; elements. It SHOULD also apply to all payload elements, appropriate to their respective specifications.</p>
    <p>Responders MUST take this into consideration, and properly account for the language/locale settings within payloads. If the responder cannot accomodate the requested language/locale, it SHOULD respond with a &lt;bad-request/&gt; (&lt;bad-locale/&gt;) error condition.</p>
    <example caption='Execute command request (with language/locale)'><![CDATA[
<iq type='set' to='responder@domain' id='exec1' xml:lang='fr-ca'>
  <command xmlns='http://jabber.org/protocol/commands'
           node='list'
           action='execute'/>
</iq>
]]></example>
    <example caption='Execute command failed result (with language/locale)'><![CDATA[
<iq type='error' from='responder@domain' to='requester@domain/resource' id='exec1'>
  <command xmlns='http://jabber.org/protocol/commands'
           node='list'
           action='execute'
           xml:lang='fr-ca'/>
  <error type='modify' code='400'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <bad-locale xmlns='http://jabber.org/protocol/commands'/>
  </error>
</iq>
]]></example>
  </section2>
</section1>
<section1 topic='Formal Description' anchor='desc'>
  <p>The focal element in x-commands is &lt;command/&gt;. It is the element used to guide the process, and the element used to report command options.</p>
  <section2 topic='&lt;command/&gt; Element' anchor='desc-command'>
    <p>Each &lt;command/&gt; contains attributes for a node, a "session id", an action type, a status type, and a language/locale specifier. A command MAY contain zero or more &lt;note/&gt; elements and MAY contain other namespaced elements as payload. Elements qualified by the "jabber:x:data" and "jabber:x:oob" namespaces are the typical payload.</p>
    <p>The "node" attribute uniquely identifies the command. This attribute MUST be present.</p>
    <p>The "sessionid" attribute helps to track a command execution across multiple stages. This attribute MUST be present for subsequent stages, and the responder SHOULD initialize (if not provided) or maintain this attribute. The value of this attribute MUST NOT be empty or null, but otherwise can be any string value. This value MUST be maintained by a requester while executing a command.</p>
    <p>The "status" attribute describes the current status of this command. This value SHOULD be set only by the responder. If specified by the requester, the responder MUST ignore it. The value of "status" MUST be one of the following:</p>
    <table caption='Possible "status" values'>
      <tr>
        <th>Status</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>executing</td>
        <td>The command is being executed.</td>
      </tr>
      <tr>
        <td>completed</td>
        <td>The command has completed. The command session has ended.</td>
      </tr>
      <tr>
        <td>canceled</td>
        <td>The command has been canceled. The command session has ended.</td>
      </tr>
    </table>
    <p>The "action" attribute specifies the action to undertake with the given command. This value SHOULD be set only by the requester. If specified by the responder, the requester MUST ignore it. The value of "action" MUST be one of the following:</p>
    <table caption='Possible "action" values'>
      <tr>
        <th>Action</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>execute</td>
        <td>The command should be executed or continue to be executed. This is the default value.</td>
      </tr>
      <tr>
        <td>cancel</td>
        <td>The command should be canceled.</td>
      </tr>
      <tr>
        <td>prev</td>
        <td>The command should be digress to the previous stage of execution.</td>
      </tr>
      <tr>
        <td>next</td>
        <td>The command should progress to the next stage of execution.</td>
      </tr>
      <tr>
        <td>complete</td>
        <td>The command should be completed (if possible).</td>
      </tr>
    </table>
    <p>The "xml:lang" attribute specifies the language/locale this &lt;command/&gt; is intended for. This attribute MAY be specified by the requester to request a specific language/locale, and SHOULD be included by the responder to indicate the language/locale in use.</p>
    <p>The children of a &lt;command/&gt; element (other than &lt;actions/&gt; and &lt;note/&gt;) pertain to the command's execution. The order of these elements denote their precedence, so that those elements earlier in the list have higher precedence.</p>
  </section2>
  <section2 topic='&lt;actions/&gt; Element' anchor='desc-actions'>
    <p>The allowed actions for a particular stage of execution are provided by the &lt;actions/&gt; element. This element SHOULD be provided by the responder if the command's execution is not complete, and SHOULD NOT ever be provided by the requester. It contains a single attribute to specify what the "execute" action equals. It contains child elements to specify what the allowed actions are.</p>
    <p>The "execute" attribute specifies what the action "execute" is equivalent to. In user-agent interfaces, this represents the default behavior. This attribute MAY be specified by the responder, and MUST equal one of the "action" attribute values for &lt;command/&gt;. The value of this attribute SHOULD match the local name of one of the contained child elements.</p>
    <p>The child elements contained by &lt;action/&gt; specify the allowed actions. The name of each child element MUST be one of the following:</p>
    <ul>
      <li>prev</li>
      <li>next</li>
      <li>complete</li>
    </ul>
  </section2>
  <section2 topic='&lt;note/&gt; Element' anchor='desc-note'>
    <p>Notes about the current status of commands are provided by &lt;note/&gt; elements. This element contains information about current conditions in a command sequence. This element has an attribute that defines the type of note. The body of a &lt;note/&gt; should contain a user-readable text message.</p>
    <p>The "type" attribute specifies the severity of the note. This attribute is OPTIONAL, and implies "info" if not present. The value of this attribute MUST be one of the following:</p>
    <table caption='Possible "type" values'>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>info</td>
        <td>The note is informational only. This is not really an exceptional condition.</td>
      </tr>
      <tr>
        <td>warn</td>
        <td>The note indicates a warning. Possibly due to illogical (yet valid) data.</td>
      </tr>
      <tr>
        <td>error</td>
        <td>The note indicates an error. The text should indicate the reason for the error.</td>
      </tr>
    </table>
  </section2>
  <section2 topic='Possible Errors' anchor='desc-errors'>
    <p>To simplify the discussion on error conditions, this document uses the following mapping between namespace URIs and namespace prefixes <note>This mapping is provided solely for the purpose of simplifying this discussion.</note>:</p>
    <table caption='Namespace Mappings'>
      <tr>
        <th>Prefix</th>
        <th>URI</th>
      </tr>
      <tr>
        <td>xmpp</td>
        <td>urn:ietf:params:xml:ns:xmpp-stanzas</td>
      </tr>
      <tr>
        <td>cmd</td>
        <td>http://jabber.org/protocol/commands</td>
      </tr>
    </table>
    <p>Below are the possible errors that can occur during execution.</p>
    <table caption='Command execution errors'>
      <tr>
        <th>Error Type</th>
        <th>General Condition</th>
        <th>Specific Condition</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>modify</td>
        <td>&lt;xmpp:bad-request/&gt;</td>
        <td>&lt;cmd:malformed-action/&gt;</td>
        <td>The responding JID does not understand the specified action.</td>
      </tr>
      <tr>
        <td>modify</td>
        <td>&lt;xmpp:bad-request/&gt;</td>
        <td>&lt;cmd:bad-action/&gt;</td>
        <td>The responding JID cannot accept the specified action.</td>
      </tr>
      <tr>
        <td>modify</td>
        <td>&lt;xmpp:bad-request/&gt;</td>
        <td>&lt;cmd:bad-locale/&gt;</td>
        <td>The responding JID cannot accept the specified language/locale.</td>
      </tr>
      <tr>
        <td>modify</td>
        <td>&lt;xmpp:bad-request/&gt;</td>
        <td>&lt;cmd:bad-payload/&gt;</td>
        <td>The responding JID cannot accept the specified payload (e.g. the data form did not provide one or more required fields).</td>
      </tr>
      <tr>
        <td>modify</td>
        <td>&lt;xmpp:bad-request/&gt;</td>
        <td>&lt;cmd:bad-sessionid/&gt;</td>
        <td>The responding JID cannot accept the specified sessionid.</td>
      </tr>
      <tr>
        <td>cancel</td>
        <td>&lt;xmpp:not-allowed/&gt;</td>
        <td>&lt;cmd:session-expired/&gt;</td>
        <td>The requesting JID specified a sessionid that is no longer active (either because it was completed, canceled, or timed out).</td>
      </tr>
      <tr>
        <td>cancel</td>
        <td>&lt;xmpp:forbidden/&gt;</td>
        <td>NONE</td>
        <td>The requesting JID is not allowed to execute the command.</td>
      </tr>
      <tr>
        <td>cancel</td>
        <td>&lt;xmpp:item-not-found/&gt;</td>
        <td>NONE</td>
        <td>The responding JID cannot find the requested command node.</td>
      </tr>
      <tr>
        <td>cancel</td>
        <td>&lt;xmpp:feature-not-implemented/&gt;</td>
        <td>NONE</td>
        <td>The responding JID does not support "http://jabber.org/protocol/commands".</td>
      </tr>
    </table>
  </section2>
</section1>
<section1 topic='Security Considerations' anchor='sec'>
  <p>Determining when a command can be executed based on permissions or rights is considered outside the scope of this document. Although such mechanisms are considered specific to the application and/or implementation of this document, future specifications may address these concerns.</p>
  <p>When processing reported commands, the requester SHOULD consider any command node that does not match the JID of the responder to be suspicious, and ignore those command nodes. Responders MUST report their own command nodes only, and not the command nodes of other entities. This can help prevent limited cases of spoofing and "social engineering".</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>The &REGISTRAR; includes 'http://jabber.org/protocol/commands' in its registry of protocol namespaces.</p>
  </section2>
  <section2 topic='Service Discovery Identities' anchor='registrar-disco-identity'>
    <p>The XMPP Registrar includes "automation" in its registry of Service Discovery categories for use for any entities and nodes that provide automated or programmed interaction. This category has the following types:</p>
    <table caption='Types for Category "automation"'>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>command-list</td>
        <td>The node for a list of commands; valid only for the node "http://jabber.org/protocol/commands".</td>
      </tr>
      <tr>
        <td>command-node</td>
        <td>A node for a specific command; the 'node' attribute uniquely identifies the command.</td>
      </tr>
    </table>
    <p>The registry submission is as follows:</p>
    <code><![CDATA[
  <category>
    <name>automation</name>
    <desc>The "automation" category consists of entities and nodes that provide automated or programmed interaction.</desc>
    <type>
      <name>command-list</name>
      <desc>The node for a list of commands; valid only for the node "http://jabber.org/protocol/commands"</desc>
      <doc>XEP-0050</doc>
    </type>
    <type>
      <name>command-node</name>
      <desc>A node for a specific command; the 'node' attribute uniquely identifies the command</desc>
      <doc>XEP-0050</doc>
    </type>
  </category>
]]></code>
  </section2>
  <section2 topic='Well-Known Service Discovery Nodes' anchor='registrar-disco-nodes'>
    <p>The XMPP Registrar includes "http://jabber.org/protocol/commands" in its registry of well-known Service Discovery nodes.</p>
  </section2>
  <section2 topic='URI Query Types' anchor='registrar-querytypes'>
    <p>As authorized by &xep0147;, the XMPP Registrar maintains a registry of queries and key-value pairs for use in XMPP URIs (see &QUERYTYPES;).</p>
    <p>The "command" querytype is defined herein for interaction with entities that support the ad-hoc command protocol, with keys of "action" and "node".</p>
    <example caption='Command Action: IRI/URI'><![CDATA[
xmpp:montague.net?command;node=stats
]]></example>
    <example caption='Command Action: Resulting Stanza'><![CDATA[
<iq to='montague.net' type='set'>
  <command xmlns='http://jabber.org/protocol/commands' node='stats'/>
</iq>
]]></example>
    <p>The following submission registers the "command" querytype.</p>
    <code><![CDATA[
<querytype>
  <name>command</name>
  <proto>http://jabber.org/protocol/commands</proto>
  <desc>enables completion of ad-hoc commands</desc>
  <doc>XEP-0050</doc>
  <keys>
    <key>
      <name>action</name>
      <desc>the ad-hoc commands action type</desc>
      <values>
        <value>
	  <name>cancel</name>
          <desc>a request to cancel processing of the command</desc>
        </value>
        <value>
	  <name>complete</name>
          <desc>a request to complete processing of the command</desc>
        </value>
        <value>
	  <name>execute</name>
          <desc>a request to execute the command (the default implied action)</desc>
        </value>
        <value>
	  <name>next</name>
          <desc>a request to move to the next command in a series</desc>
        </value>
        <value>
	  <name>prev</name>
          <desc>a request to move to the previous command in a series</desc>
        </value>
      </values>
    </key>
    <key>
      <name>node</name>
      <desc>the command node</desc>
    </key>
  </keys>
</querytype>
]]></code>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/commands'
    xmlns='http://jabber.org/protocol/commands'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0050: http://www.xmpp.org/extensions/xep-0050.html
    </xs:documentation>
  </xs:annotation>

  <xs:import namespace='http://www.w3.org/XML/1998/namespace'
             schemaLocation='http://www.w3.org/2001/03/xml.xsd'/>

  <xs:element name='command'>
    <xs:complexType>
      <xs:choice>
        <xs:element ref='actions' minOccurs='0'/>
        <xs:element ref='note' minOccurs='0' maxOccurs='unbounded'/>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded'/>
      </xs:choice>
      <xs:attribute name='action' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='cancel'/>
            <xs:enumeration value='complete'/>
            <xs:enumeration value='execute'/>
            <xs:enumeration value='next'/>
            <xs:enumeration value='prev'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name='node' type='xs:string' use='required'/>
      <xs:attribute name='sessionid' type='xs:string' use='optional'/>
      <xs:attribute name='status' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='canceled'/>
            <xs:enumeration value='completed'/>
            <xs:enumeration value='executing'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='actions'>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='prev' type='empty' minOccurs='0'/>
        <xs:element name='next' type='empty' minOccurs='0'/>
        <xs:element name='complete' type='empty' minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='execute' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='complete'/>
            <xs:enumeration value='next'/>
            <xs:enumeration value='prev'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name='note'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute name='type' use='optional'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='error'/>
                <xs:enumeration value='info'/>
                <xs:enumeration value='warn'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='bad-action' type='empty'/>
  <xs:element name='bad-locale' type='empty'/>
  <xs:element name='bad-payload' type='empty'/>
  <xs:element name='bad-sessionid' type='empty'/>
  <xs:element name='malformed-action' type='empty'/>
  <xs:element name='session-expired' type='empty'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
]]></code>
</section1>

<section1 topic='Acknowledgements' anchor='acks'>
  <p>Many thanks to Florian Schmaus, Christian Schudt and Anno van Vliet
  for their input and feedback on this specification.</p>
</section1>

</xep>
