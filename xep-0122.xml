<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Data Forms Validation</title>
  <abstract>This specification defines a backwards-compatible extension to the XMPP Data Forms protocol that enables applications to specify additional validation guidelines related to a form, such as validation of standard XML datatypes, application-specific datatypes, value ranges, and regular expressions.</abstract>
  &LEGALNOTICE;
  <number>0122</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0004</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>xdata-validate</shortname>
  <schemaloc>
    <url>http://www.xmpp.org/schemas/xdata-validate.xsd</url>
  </schemaloc>
  <registry/>
  &linuxwolf;
  <revision>
    <version>1.0</version>
    <date>2004-09-22</date>
    <initials>psa</initials>
    <remark>Per a vote of the Jabber Council, advanced status to Draft.</remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2004-09-20</date>
    <initials>lw</initials>
    <remark>Synchronized descriptive text with schema.</remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2004-08-23</date>
    <initials>lw</initials>
    <remark>Replaced method attribute with dedicated elements; removed Formal Definition section in favor of defining requirements within the use-cases and XML schema; included display considerations; added reference to XEP-0115.</remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2004-07-23</date>
    <initials>lw/psa</initials>
    <remark>Replaced &lt;text-list/&gt; with specific interpretations for other validation methods; Further clarified use of validation methods (other than "basic") with "list-single", "list-multi", and "text-multi"; Fixed errors in some examples; initial datatype registrations.</remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2004-05-27</date>
    <initials>lw</initials>
    <remark>Added &lt;text-list/&gt; ("text as a list") support; Clarified &lt;list-range/&gt; expanded discussion on datatype registries.</remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2004-01-29</date>
    <initials>lw</initials>
    <remark>Removed "std" datatypes; Added references to XML Schema built-in datatypes.</remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2003-12-10</date>
    <initials>lw</initials>
    <remark>Added "open" method; Added "list-range" validation.</remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2003-10-15</date>
    <initials>lw</initials>
    <remark>Added consideration about "unvalidated" submits; Reworked introduction.</remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2003-10-06</date>
    <initials>lw</initials>
    <remark>Initial version.</remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>&xep0004; ("x:data") provides a simple and interoperable way to request and present information for both applications and humans. However, the simple nature of "x:data" requires the form interpreter at times to guess as to exactly what type of information is being requested or provided. This document builds upon "x:data" to provide this additional validation.</p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>The requirements for this document are:</p>
  <ul>
    <li>Backwards compatible with the existing "x:data" protocol.</li>
    <li>Provide extended datatypes (such as dates, times, and numbers).</li>
    <li>Allow for multiple validation methods.</li>
    <li>Allow for user-defined datatypes.</li>
    <li>Accommodate value ranges.</li>
    <li>Accommodate regular expression matching.</li>
  </ul>
</section1>
<section1 topic='Use Cases' anchor='usecases'>
  <p>This document defines a new namespace, "http://jabber.org/protocols/xdata-validate". The root element for this namespace is &lt;validate/&gt;, and MUST be contained within a &lt;field/&gt; element (qualified by the 'jabber:x:data' namespace) for each <cite>Data Forms</cite> field that possesses additional validation information.</p>
  <section2 topic='Datatype Validation' anchor='usecases-datatypes'>
    <p>The simplest usage is to provide a more-granular datatype for a &lt;field/&gt; element used in <cite>Data Forms</cite>. To provide this datatype information, a &lt;validate/&gt; element is included whose 'datatype' attribute specifies the data type of any &lt;value/&gt; contained within the &lt;field/&gt; element:</p>
    <example caption='Field with extended datatype'><![CDATA[
<field var='evt.date' type='text-single' label='Event Date/Time'>
  <validate xmlns='http://jabber.org/protocol/xdata-validate'
            datatype='xs:dateTime'/>
  <value>2003-10-06T11:22:00-07:00</value>
</field>
    ]]></example>
    <p>The preceding example demonstrates a field that is expected to contain a date/time value.</p>
    <p>The 'datatype' attribute specifies the datatype. This attribute is OPTIONAL, and defaults to "xs:string". It MUST meet one of the following conditions:</p>
    <ul>
      <li>Start with "xs:", and be one of the "built-in" datatypes defined in &w3xmlschema2;</li>
      <li>Start with a prefix registered with the &REGISTRAR;</li>
      <li>Start with "x:", and specify a user-defined datatype<note>While "x:" allows for ad-hoc definitions, its use is NOT RECOMMENDED.</note></li>
    </ul>
  </section2>
  <section2 topic='Validation Methods' anchor='usecases-validation'>
    <p>In addition to datatypes, the validation method can also be provided. The method is specified via a child element. The validation methods defined in this document are:</p>
    <ul>
      <li>&lt;basic/&gt; for validation only against the datatype itself</li>
      <li>&lt;open/&gt; for open-ended validation against the datatype</li>
      <li>&lt;range/&gt; for validation against a given min/max and the datatype</li>
      <li>&lt;regex/&gt; for validation against a given regular expression and the datatype</li>
    </ul>
    <p>If no validation method is specified, form processors MUST assume &lt;basic/&gt; validation. The &lt;validate/&gt; element SHOULD include one of the above validation method elements, and MUST NOT include more than one.</p>
    <p>Any validation method applied to a field of type "list-multi", "list-single", or "text-multi" (other than &lt;basic/&gt;) MUST imply the same behavior as &lt;open/&gt;, with the additional constraints defined by that method.</p>
    <section3 topic='&lt;basic/&gt; Validation' anchor='usercases-validation.basic'>
      <p>Building upon the earlier example, to indicate that the value(s) should simply match the field type and datatype constraints, the &lt;validate/&gt; element shall contain a &lt;basic/&gt; child element.</p>
      <example caption='Basic validation'><![CDATA[
<field var='evt.date' type='text-single' label='Event Date/Time'>
  <validate xmlns='http://jabber.org/protocol/xdata-validate'
            datatype='xs:dateTime'>
    <basic/>
  </validate>
  <value>2003-10-06T11:22:00-07:00</value>
</field>
      ]]></example>
      <p>Using &lt;basic/&gt; validation, the form interpreter MUST follow the validation rules of the datatype (if understood) and the field type.</p>
      <p>The &lt;basic/&gt; element MUST be empty (i.e., not contain any character data or child elements) and MUST NOT possess any attributes.</p>
    </section3>
    <section3 topic='&lt;open/&gt; Validation' anchor='usercases-validation.open'>
      <p>For "list-single" or "list-multi", to indicate that the user may enter a custom value (matching the datatype constraints) or choose from the predefined values, the &lt;validate/&gt; element shall contain an &lt;open/&gt; child element:</p>
      <example caption='Open validation'><![CDATA[
<field var='evt.category'
       type='list-single'
       label='Event Category'>
  <validate xmlns='http://jabber.org/protocol/xdata-validate'
            datatype='xs:string'>
    <open/>
  </validate>
  <option><value>holiday</value></option>
  <option><value>reminder</value></option>
  <option><value>appointment</value></option>
</field>
      ]]></example>
      <p>The &lt;open/&gt; validation method applies to "text-multi" differently; it hints that each value for a "text-multi" field shall be validated separately. This effectively turns "text-multi" fields into an open-ended "list-multi", with no options and all values automatically selected.</p>
      <p>The &lt;open/&gt; element MUST be empty (i.e., not contain any character data or child elements) and MUST NOT possess any attributes.</p>
    </section3>
    <section3 topic='&lt;range/&gt; Validation' anchor='usercases-validation.range'>
      <p>To indicate that the value should fall within a certain range, the &lt;validate/&gt; element shall contain a &lt;range/&gt; child element:</p>
      <example caption='Range validation'><![CDATA[
<field var='evt.date' type='text-single' label='Event Date/Time'>
  <validate xmlns='http://jabber.org/protocol/xdata-validate'
            datatype='xs:dateTime'>
    <range min='2003-10-05T00:00:00-07:00'
           max='2003-10-24T23:59:59-07:00'/>
  </validate>
  <value>2003-10-06T11:22:00-07:00</value>
</field>
      ]]></example>
      <p>The 'min' and 'max' attributes of the &lt;range/&gt; element specify the minimum and maximum values allowed, respectively.</p>
      <p>The 'max' attribute specifies the maximum allowable value. This attribute is OPTIONAL. The value depends on the datatype in use.</p>
      <p>The 'min' attribute specifies the minimum allowable value. This attribute is OPTIONAL. The value depends on the datatype in use.</p>
      <p>The &lt;range/&gt; element SHOULD possess either a 'min' or 'max' attribute, and MAY possess both. If neither attribute is included, the processor MUST assume that there are no range constraints.</p>
      <p>The &lt;range/&gt; element MUST be empty (i.e., not contain any character data or child elements).</p>
    </section3>
    <section3 topic='&lt;regex/&gt; Validation' anchor='usercases-validatoin.regex'>
      <p>To indicate that the value should be restricted to a regular expression, the &lt;validate/&gt; element shall contain a &lt;regex/&gt; child element:</p>
      <example caption='Regular expression validation'><![CDATA[
<field var='ssn' type='text-single' label='Social Security Number'>
  <desc>This field should be your SSN, including '-' (e.g. 123-12-1234)</desc>
  <validate xmlns='http://jabber.org/protocol/xdata-validate'
            datatype='xs:string'>
    <regex>([0-9]{3})-([0-9]{2})-([0-9]{4})</regex>
  </validate>
</field>
      ]]></example>
      <p>The XML character data of this element is the pattern to apply. The syntax of this content MUST be that defined for POSIX extended regular expressions<note>The "best" definition of this syntax can be found in the <link url='http://www.gsp.com/cgi-bin/man.cgi?section=7&amp;topic=re_format'>re_format(7) man page</link></note>, including support for Unicode<note>Guidelines for adapting regular expressions to support Unicode is defined at <link url='http://www.unicode.org/reports/tr18/'>http://www.unicode.org/reports/tr18/</link></note>.</p>
      <p>The &lt;regex/&gt; element MUST contain character data only (i.e., not contain any child elements) and MUST NOT possess any attributes.</p>
    </section3>
  </section2>
  <section2 topic='Selection Ranges in "list-multi"' anchor='usecases-ranges'>
    <p>For "list-multi", validation can indicate (via the &lt;list-range/&gt; element) that a minimum and maximum number of options should be selected and/or entered. This selection range MAY be combined with the other methods to provide more flexibility.</p>
    <example caption='Selection Range validation'><![CDATA[
<field var='evt.notify-methods'
       type='list-multi'
       label='Notify me by'>
  <validate xmlns='http://jabber.org/protocol/xdata-validate'
            datatype='xs:string'>
    <basic/>
    <list-range min='1' max='3'/>
  </validate>
  <option><value>e-mail</value></option>
  <option><value>jabber/xmpp</value></option>
  <option><value>work phone</value></option>
  <option><value>home phone</value></option>
  <option><value>cell phone</value></option>
</field>
    ]]></example>
    <p>The &lt;list-range/&gt; element SHOULD be included only when the &lt;field/&gt; is of type "list-multi" and SHOULD be ignored otherwise.</p>
    <p>The 'max' attribute specifies the maximum allowable number of selected/entered values. This attribute is OPTIONAL. The value MUST be a positive integer.</p>
    <p>The 'min' attribute specifies the minimum allowable number of selected/entered values. This attribute is OPTIONAL. The value MUST be a positive integer.</p>
    <p>The &lt;list-range/&gt; element SHOULD possess either a 'min' or 'max' attribute, and MAY possess both. If neither attribute is included, the processor MUST assume that there are no selection constraints.</p>
  </section2>
</section1>
<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Required to Support' anchor='impl-req'>
    <p>At a minimum, implementations MUST support the following:</p>
    <ul>
      <li>Datatype validation</li>
      <li>The &lt;basic/&gt; validation method</li>
    </ul>
    <p>If an implementation does not understand the specified datatype, it MUST validate according to the default "xs:string" datatype. If an implementation does not understand the specified method, it MUST validate according to the &lt;basic/&gt; method.</p>
  </section2>
  <section2 topic='Namespacing' anchor='impl-ns'>
    <p>While all elements associated with this document MUST be qualified by the 'http://jabber.org/protocol/xdata-validate' namespace, explicitly declaring the default namespace for each instance can be overly verbose. However, Jabber/XMPP implementations have historically been very lax regarding namespacing, thus requiring some careful use of prefixes.</p>
    <p>The use of namespace prefixes is RECOMMENDED for large forms, to reduce the data size. To maintain the highest level of compatibility, implementations sending the form using prefixes SHOULD use the namespace prefix "xdv", and SHOULD declare the namespace prefix mapping in the ancestor &lt;x xmlns='jabber:x:data'/&gt; element:</p>
    <example caption='Example of recommended namespace prefixing'><![CDATA[
<x xmlns='jabber:x:data'
   xmlns:xdv='http://jabber.org/protocols/xdata-validate'
   type='form'>
  <title>Sample Form</title>
  <instructions>
    Please provide information for the following fields...
  </instructions>
  <field type='text-single' var='name' label='Event Name'/>
  <field type='text-single' var='date/start' label='Starting Date'>
    <xdv:validate datatype='xs:date'>
      <basic/>
    </xdv:validate>
  </field>
  <field type='text-single' var='date/end' label='Ending Date'>
    <xdv:validate datatype='xs:date'>
      <basic/>
    </xdv:validate>
  </field>
</x>
    ]]></example>
  </section2>
  <section2 topic='Internationalization/Localization' anchor='impl-i18n'>
    <p>This document relies on the internationalization/localization mechanisms provided by &xmppcore;. As much as possible, all datatype formats MUST be locale-independent.</p>
  </section2>
  <section2 topic='Form Submissions' anchor='impl-submit'>
    <p>Form processors MUST NOT assume that a form with validation has actually been validated when submitted. There is no realistic expectation that form interpreters honor validation.</p>
  </section2>
  <section2 topic='Existing Protocols' anchor='impl-proto'>
    <p>While this document is compatible with the existing "x:data" definition, form providers SHOULD first determine support for it, using either &xep0115; if presence-aware or &xep0030;. This is especially important for limited-connection and/or limited-capabilities devices, such as cell phones.</p>
  </section2>
  <section2 topic='Display Considerations' anchor='impl-display'>
    <p>Although primarily intended for validating form submission, validation MAY have an impact on display, and MAY be applied to data forms that are not submitted (e.g. 'result' type forms). The following table outlines which field types a particular validation method is or is not appropriate for, and how a display SHOULD interpret the validation methods if considered<note>If a particular field type is not listed, the display MAY include validation support, but is not expected to do so.</note>:</p>
    <table caption='Validation Methods and Field Types'>
      <tr>
        <th>Validation Method</th>
        <th>SHOULD be Allowed</th>
        <th>SHOULD NOT be Allowed</th>
        <th>Display Suggestions</th>
      </tr>

      <tr>
        <td>basic</td>
        <td><ul>
          <li>fixed</li>
          <li>list-multi</li>
          <li>list-single</li>
          <li>text-multi</li>
          <li>text-single</li>
        </ul></td>
        <td><ul>
          <li>hidden</li>
          <li>jid-multi</li>
          <li>jid-single</li>
        </ul></td>
        <td>Display the datatype appropriate to the locale</td>
      </tr>

      <tr>
        <td>open</td>
        <td><ul>
          <li>jid-multi</li>
          <li>jid-single</li>
          <li>list-multi</li>
          <li>list-single</li>
          <li>text-multi</li>
          <li>text-single</li>
        </ul></td>
        <td><ul>
          <li>hidden</li>
        </ul></td>
        <td>Display the datatype appropriate to the locale. For "text-multi" treat each value as a discrete entry (e.g. a user-entered list). For "list-multi" or "list-single", allow user to add/remove entries to select.</td>
      </tr>

      <tr>
        <td>range</td>
        <td><ul>
          <li>text-single</li>
        </ul></td>
        <td><ul>
          <li>hidden</li>
          <li>jid-multi</li>
          <li>list-multi</li>
          <li>text-multi</li>
        </ul></td>
        <td>Display the datatype appropriate to the locale. For "text-single", allow user to increment/decrement through possible values. For "text-multi" treat each value as a discrete entry (e.g. a user-entered list). For "list-multi" or "list-single", allow user to add/remove entries to select.</td>
      </tr>

      <tr>
        <td>regex</td>
        <td><ul>
          <li>text-single</li>
        </ul></td>
        <td><ul>
          <li>hidden</li>
          <li>jid-multi</li>
          <li>list-multi</li>
          <li>text-multi</li>
        </ul></td>
        <td>Display the datatype appropriate to the locale. If possible, display a valid example. For "text-multi" treat each value as a discrete entry (e.g. a user-entered list). For "list-multi" or "list-single", allow user to add/remove entries to select.</td>
      </tr>
    </table>
  </section2>
  <section2 topic='Validation Ranges' anchor='impl-ranges'>
    <p>The &lt;range/&gt; validation method MUST be used only with datatypes that have finite quantities.  Within the standard datatype set, it MUST NOT be used with "xs:string".</p>
  </section2>
</section1>
<section1 topic='Security Considerations' anchor='sec'>
  <p>This document introduces no security concerns above and beyond those specified in <cite>XEP-0004: Data Forms</cite>.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registar'>
  <section2 topic='Protocol Namespaces' anchor='registar-ns'>
    <p>The XMPP Registrar includes 'http://jabber.org/protocol/xdata-validate' in its registry of protocol namespaces.</p>
  </section2>
  <section2 topic='Registries' anchor='registar-reg'>
    <section3 topic='Datatype Prefixes Registry' anchor='registar-reg-prefixes'>
      <p>The XMPP Registrar maintains a registry of datatype prefixes used in the context of Data Forms Validation (see &XDVPREFIXES;), where each prefix denotes a group of related datatypes.</p>
      <section4 topic='Process' anchor='registrar-reg-prefixes-process'>
        &REGPROCESS;
        <code><![CDATA[
<datatype-prefix>
  <prefix>the prefix token (e.g., "xs")</prefix>
  <desc>a natural-language description of the datatype family</desc>
  <doc>the document in which datatype family is specified</doc>
</datatype-prefix>
         ]]></code>
         <p>The registrant may register more than one prefix at a time, each contained in a separate &lt;datatype-prefix/&gt; element.</p>
       </section4>
       <section4 topic='Initial Submission' anchor='registrar-reg-prefixes-init'>
         <p>As part of this document, the following datatype prefixes shall be registered:</p>
         <code><![CDATA[
<datatype-prefix>
  <prefix>x</prefix>
  <desc>An ad-hoc datatype</desc>
  <doc>XEP-0122</doc>
</datatype-prefix>
<datatype-prefix>
  <prefix>xs</prefix>
  <desc>A "standard" datatype as defined in XML Schema Part 2</desc>
  <doc>XML Schema Part 2</doc>
</datatype-prefix>
        ]]></code>
      </section4>
    </section3>
    <section3 topic='Datatypes Registry' anchor='registar-reg-datatypes'>
      <p>The XMPP Registrar maintains a registry of datatypes used in the context of Data Forms Validation (see &XDVTYPES;), where each datatype name includes the relevant prefix (e.g., "xs:anyURI").</p>
      <section4 topic='Process' anchor='registrar-reg-datatypes-process'>
        &REGPROCESS;
        <code><![CDATA[
<datatype>
  <name>the full datatype name (e.g., "xs:string")</name>
  <desc>a natural-language description of the datatype</desc>
  <methods>the validation methods that may apply to the datatype</methods>
  <min>the minimum value for the datatype (if any)</min>
  <max>the maximum value for the datatype (if any)</max>
</datatype>
        ]]></code>
        <p>The registrant may register more than one datatype at a time, each contained in a separate &lt;datatype/&gt; element.</p>
      </section4>
      <section4 topic='Initial Submission' anchor='registrar-reg-datatypes-init'>
        <p>The following submission contains the built-in datatypes defined in <cite>XML Schema Part 2</cite> that are deemed mostly like to be useful in the context of the Data Forms protocol; additional datatypes defined therein, as well as other datatypes not defined in XML Schema Part 2, may be registered via separate submissions in the future.</p>
        <code><![CDATA[
<datatype>
  <name>xs:anyURI</name>
  <desc>a Uniform Resource Identifier Reference (URI)</desc>
  <methods>basic regex</methods>
  <min>N/A</min>
  <max>N/A</max>
</datatype>
<datatype>
  <name>xs:byte</name>
  <desc>an integer with the specified min/max</desc>
  <methods>basic range</methods>
  <min>-128</min>
  <max>127</max>
</datatype>
<datatype>
  <name>xs:date</name>
  <desc>a calendar date</desc>
  <methods>basic range regex</methods>
  <min>N/A</min>
  <max>N/A</max>
</datatype>
<datatype>
  <name>xs:dateTime</name>
  <desc>a specific instant of time</desc>
  <methods>basic range regex</methods>
  <min>N/A</min>
  <max>N/A</max>
</datatype>
<datatype>
  <name>xs:decimal</name>
  <desc>an arbitrary-precision decimal number</desc>
  <methods>basic range</methods>
  <min>none</min>
  <max>none</max>
</datatype>
<datatype>
  <name>xs:double</name>
  <desc>an IEEE double-precision 64-bit floating point type</desc>
  <methods>basic range</methods>
  <min>none</min>
  <max>none</max>
</datatype>
<datatype>
  <name>xs:int</name>
  <desc>an integer with the specified min/max</desc>
  <methods>basic range</methods>
  <min>-2147483648</min>
  <max>2147483647</max>
</datatype>
<datatype>
  <name>xs:integer</name>
  <desc>a decimal number with no fraction digits</desc>
  <methods>basic range</methods>
  <min>none</min>
  <max>none</max>
</datatype>
<datatype>
  <name>xs:language</name>
  <desc>a language identifier as defined by RFC 1766</desc>
  <methods>basic regex</methods>
  <min>N/A</min>
  <max>N/A</max>
</datatype>
<datatype>
  <name>xs:long</name>
  <desc>an integer with the specified min/max</desc>
  <methods>basic range</methods>
  <min>-9223372036854775808</min>
  <max>9223372036854775807</max>
</datatype>
<datatype>
  <name>xs:short</name>
  <desc>an integer with the specified min/max</desc>
  <methods>basic range</methods>
  <min>-32768</min>
  <max>32767</max>
</datatype>
<datatype>
  <name>xs:string</name>
  <desc>a character strings in XML</desc>
  <methods>basic regex</methods>
  <min>N/A</min>
  <max>N/A</max>
</datatype>
<datatype>
  <name>xs:time</name>
  <desc>an instant of time that recurs every day</desc>
  <methods>basic range regex</methods>
  <min>N/A</min>
  <max>N/A</max>
</datatype>
        ]]></code>
      </section4>
    </section3>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/xdata-validate'
    xmlns='http://jabber.org/protocol/xdata-validate'
    elementFormDefault='qualified'>

  <xs:element name='validate'>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs='0' maxOccurs='1'>
          <xs:element ref='basic'/>
          <xs:element ref='open'/>
          <xs:element ref='range'/>
          <xs:element ref='regex'/>
        </xs:choice>
        <xs:element ref='list-range' minOccurs='0' maxOccurs='1'/>
      </xs:sequence>
      <xs:attribute name='datatype'
                    type='xs:string'
                    use='optional'
                    default='xs:string'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='basic' type='empty'/>

  <xs:element name='open' type='empty'/>

  <xs:element name='range'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='min' use='optional'/>
          <xs:attribute name='max' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='regex' type='xs:string'/>

  <xs:element name='list-range'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='min'
                        type='xs:unsignedInt'
                        use='optional'/>
          <xs:attribute name='max'
                        type='xs:unsignedInt'
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>
</xep>
