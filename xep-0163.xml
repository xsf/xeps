<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Personal Eventing Protocol</title>
  <abstract>This specification defines semantics for using the XMPP publish-subscribe protocol to broadcast state change events associated with an instant messaging and presence account. This profile of pubsub therefore enables a standard XMPP user account to function as a virtual pubsub service, easing the discovery of syndicated data and event notifications associated with such an account.</abstract>
  &LEGALNOTICE;
  <number>0163</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards JIG</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0115</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>pep</shortname>
  &stpeter;
  &ksmith;
  <revision>
    <version>1.2</version>
    <date>2010-07-12</date>
    <initials>psa</initials>
    <remark><p>Removed the one-node-per-namespace rule (community consensus indicates that this rule was overly restrictive); clarified the meaning of auto-subscribe; clarified that sending the last published item does not prevent the service from sending additional items in some circumstances; discouraged the use of directed presence for the purpose of implicit subscriptions.</p></remark>
  </revision>
  <revision>
    <version>1.1</version>
    <date>2007-09-26</date>
    <initials>psa</initials>
    <remark><p>In accordance with XMPP Council consensus (1) explicitly defined auto-create, auto-subscribe, filtered-notifications, and last-published features, (2) moved them to XEP-0060, and (3) added appropriate references to XEP-0060 throughout; also added friendly but non-normative How It Works section and removed references to private data storage; updated to reflect changes to entity capabilities and pubsub.</p></remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2006-09-20</date>
    <initials>psa</initials>
    <remark><p>Per a vote of the Jabber Council, advanced status to Draft.</p></remark>
  </revision>
  <revision>
    <version>0.15</version>
    <date>2006-08-30</date>
    <initials>psa</initials>
    <remark><p>Added the deliver_notifications and send_last_published_item configuration options to the recommended defaults.</p></remark>
  </revision>
  <revision>
    <version>0.14</version>
    <date>2006-08-02</date>
    <initials>psa</initials>
    <remark><p>Changed various recommended defaults from SHOULD to MUST; corrected several errors in the text and examples.</p></remark>
  </revision>
  <revision>
    <version>0.13</version>
    <date>2006-08-01</date>
    <initials>psa</initials>
    <remark><p>Recommended node creation with default configuration on initial publish; corrected several errors and clarified several points in the text.</p></remark>
  </revision>
  <revision>
    <version>0.12</version>
    <date>2006-08-01</date>
    <initials>psa</initials>
    <remark><p>Simplified the subscription process using XMPP presence and entity capabilities.</p></remark>
  </revision>
  <revision>
    <version>0.11</version>
    <date>2006-07-20</date>
    <initials>psa</initials>
    <remark><p>Clarified rules regarding number of notifications and when to generate notifications; corrected several errors in the text and examples.</p></remark>
  </revision>
  <revision>
    <version>0.10</version>
    <date>2006-07-07</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect version 1.8 of XEP-0060.</p></remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2006-06-15</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect use of data forms in XEP-0060.</p></remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2006-04-10</date>
    <initials>psa</initials>
    <remark><p>Clarified terminology and defaults.</p></remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2006-04-10</date>
    <initials>psa</initials>
    <remark><p>Specified that notifications are to be sent from bare JID, not full JID.</p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2006-04-10</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect pubsub changes; clarified business rules for generation of notifications and cancellation of subscriptions.</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2006-03-09</date>
    <initials>psa</initials>
    <remark><p>Modified roster groups example to use jabber:x:data; added note about advertising client support for PEP.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2006-02-02</date>
    <initials>psa/ks</initials>
    <remark><p>Specified rules for generation of notifications, including use of presence in determining address of intended recipient for notifications and sending of last published item on receipt of presence information; changed name to Personal Eventing Protocol; specified service discovery identity of pubsub/pep; removed section on service types; added Kevin Smith as co-author.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2006-01-30</date>
    <initials>psa</initials>
    <remark><p>Specified that a service may enforce additional privacy and security policies; specified that an account owner must always be allowed to subscribe and to retrieve items; specified that an implementation should enforce access modifications resulting from roster state changes.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-01-11</date>
    <initials>psa</initials>
    <remark><p>Updated to reflect proposed XEP-0060 modifications.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2005-11-02</date>
    <initials>psa</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2005-10-25</date>
    <initials>psa</initials>
    <remark><p>Added more details and examples.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2005-10-24</date>
    <initials>psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <section2 topic='Motivation' anchor='motivation'>
    <p>Personal eventing provides a way for a Jabber/XMPP user to send updates or "events" to other users, who are typically contacts in the user's roster. An event can be anything that a user wants to make known to other people, such as those described in &xep0080;, &xep0107;, &xep0108;, and &xep0118;.  While the XMPP &xep0060; extension ("pubsub") can be used to broadcast such events associated, the full pubsub protocol is often thought of as complicated and therefore has not been widely implemented.
    <note>Instead, many "extended presence" formats are currently sent using the &PRESENCE; stanza type; unfortunately, this overloads presence, results in unnecessary presence traffic, and does not provide fine-grained control over access. The use of publish-subscribe rather than presence is therefore preferable.</note> To make publish-subscribe functionality more accessible (especially to instant messaging and presence applications that conform to &xmppim;), this document defines a simplified subset of pubsub that can be followed by instant messaging client and server developers to more easily deploy personal eventing services across the Jabber/XMPP network. We label this subset "Personal Eventing Protocol" or PEP.</p>
    <p class='em'>Note: Any use cases not described herein are described in <cite>XEP-0060</cite>. Also, this document does not show error flows related to the generic publish-subscribe use cases referenced herein, since they are exhaustively defined in <cite>XEP-0060</cite>. The reader is referred to <cite>XEP-0060</cite> for all relevant protocol details related to the XMPP publish-subscribe extension. This document merely defines a "subset" or "profile" of XMPP publish-subscribe.</p>
  </section2>
  <section2 topic='How It Works' anchor='howitworks'>
    <p>This section provides a friendly introduction to personal eventing via pubsub (PEP).</p>
    <p>Imagine that you are a Shakespearean character named Juliet and that you want to generate events about what music you're listening to, which anyone may see as long as they are authorized to see your online/offline presence (i.e., a pubsub access model of "presence").</p>
    <p>We assume that you have three contacts with the following relationship to you:</p>
    <ol start='1'>
      <li>benvolio@montague.lit, who has no subscription to your presence</li>
      <li>nurse@capulet.lit, who has a bidirectional subscription to your presence and who is in your "Servants" roster group</li>
      <li>romeo@montague.lit, who has a bidirectional subscription to your presence and who is in your "Friends" roster group</li>
    </ol>
    <p>We also assume that your server (capulet.lit) supports PEP and that your client discovered that support when you logged in.</p>
    <p>Now you start playing a song on your music playing software. Your client captures that "event" and publishes it to your server:</p>
    <example caption='Publishing an event'><![CDATA[
<iq from='juliet@capulet.lit/balcony' type='set' id='pub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='http://jabber.org/protocol/tune'>
      <item>
        <tune xmlns='http://jabber.org/protocol/tune'>
          <artist>Gerald Finzi</artist>
          <length>255</length>
          <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
          <title>Introduction (Allegro vigoroso)</title>
          <track>1</track>
        </tune>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <p>Note the following about your publish request:</p>
    <ol start='1'>
      <li>It is sent with no 'to' address (see <link url='#approach-everyjid'>Every Account a Pubsub Service</link>).</li>
      <li>It specifies a node of "http://jabber.org/protocol/tune" (see <link url='#approach-onenode'>One Node per Namespace</link>).</li>
    </ol>
    <p>If all goes well (see <link url='#publish'>Publishing Events</link>), everyone who is interested in what you are listening to will receive notification of the event:</p>
    <example caption='Interested parties receive event notifications'><![CDATA[
<message from='juliet@capulet.lit'
         to='romeo@montague.lit/orchard'
         type='headline'
         id='tunefoo1'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='http://jabber.org/protocol/tune'>
      <item>
        <tune xmlns='http://jabber.org/protocol/tune'>
          <artist>Gerald Finzi</artist>
          <length>255</length>
          <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
          <title>Introduction (Allegro vigoroso)</title>
          <track>1</track>
        </tune>
      </item>
    </items>
  </event>
</message>

<message from='juliet@capulet.lit'
         to='nurse@capulet.lit/chamber'
         type='headline'
         id='tunefoo2'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='http://jabber.org/protocol/tune'>
      <item>
        <tune xmlns='http://jabber.org/protocol/tune'>
          <artist>Gerald Finzi</artist>
          <length>255</length>
          <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
          <title>Introduction (Allegro vigoroso)</title>
          <track>1</track>
        </tune>
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>Because PEP services must send notifications to the account owner, you too receive the notification at each of your resources (here "balcony" and "chamber").</p>
    <example caption='Publisher receives event notification'><![CDATA[
<message from='juliet@capulet.lit'
         to='juliet@capulet.lit/balcony'
         type='headline'
         id='tunefoo3'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='http://jabber.org/protocol/tune'>
      <item>
        <tune xmlns='http://jabber.org/protocol/tune'>
          <artist>Gerald Finzi</artist>
          <length>255</length>
          <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
          <title>Introduction (Allegro vigoroso)</title>
          <track>1</track>
        </tune>
      </item>
    </items>
  </event>
</message>

<message from='juliet@capulet.lit'
         to='juliet@capulet.lit/chamber'
         type='headline'
         id='tunefoo4'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='http://jabber.org/protocol/tune'>
      <item>
        <tune xmlns='http://jabber.org/protocol/tune'>
          <artist>Gerald Finzi</artist>
          <length>255</length>
          <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
          <title>Introduction (Allegro vigoroso)</title>
          <track>1</track>
        </tune>
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>But how do Romeo and the Nurse tell your server that they are interested in knowing what you're listening to? In generic pubsub they typically need to explicitly subscribe to your "http://jabber.org/protocol/tune" node. <note>That may still be necessary for open access model nodes in PEP if another user does not send you presence, such as benvolio@montague.lit in our scenario.</note> But PEP services support two special features:</p>
    <ol>
      <li>"auto-subscribe" -- because they are subscribed to your presence, they automatically receive your events (see <link url='#approach-presence'>Use Presence</link>).</li>
      <li>"filtered-notification" -- they can include some special flags in their &xep0115; information to specify which event types (payloads) they want to receive (see <link url='#approach-filter'>Filtered Notifications</link>).</li>
    </ol>
    <example caption='Romeo sends presence with caps'><![CDATA[
<presence from='romeo@montague.lit/orchard'>
  <c xmlns='http://jabber.org/protocol/caps'
     hash='sha-1'
     node='http://www.chatopus.com'
     ver='zHyEOgxTrkpSdGcQKH8EFPLsriY='/>
</presence>
]]></example>
    <p>Your server knows to send tune information to Romeo because when the server unpacks the value of the 'ver' attribute ("054H4A7280JuT6+IroVYxgCAjZo=") in accordance with <cite>XEP-0115</cite>, it discovers that Romeo's client advertises a service discovery feature of "http://jabber.org/protocol/tune+notify", where the "+notify" suffix indicates interest in receiving notifications related to the protocol that precedes the suffix. The server can verify this support if needed by sending a service discovery request to Romeo's full JID, where the response would be as follows:</p>
    <example caption='Disco#info result from extension'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    to='juliet@capulet.lit'
    type='result'
    id='disco123'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='client' name='Exodus 0.9.1' type='pc'/>
    <feature var='http://jabber.org/protocol/disco#info'/>
    <feature var='http://jabber.org/protocol/disco#items'/>
    <feature var='http://jabber.org/protocol/geoloc'/>
    <feature var='http://jabber.org/protocol/geoloc+notify'/>
    <feature var='http://jabber.org/protocol/tune'/>
    <feature var='http://jabber.org/protocol/tune+notify'/>
  </query>
</iq>
]]></example>
    <p>Naturally your server doesn't need to send out a disco#info request every time, since it will quickly create a large cache of 'ver' values.</p>
    <p>So that's the general idea.</p>
  </section2>
</section1>

<section1 topic='Concepts and Approach' anchor='approach'>
  <p>Personal eventing via pubsub ("PEP") is based on the following principles:</p>
  <ol start='1'>
    <li>Every account a pubsub service.</li>
    <li>One publisher per node.</li>
    <li>Use presence.</li>
    <li>Filter notifications based on expressed interest.</li>
    <li>Smart defaults.</li>
  </ol>
  <p>These principles are described more fully below.</p>
  <section2 topic='Every Account a Pubsub Service' anchor='approach-everyjid'>
    <p>When a user creates an account (or has an account provisioned) at a Jabber/XMPP server that supports PEP, the server associates a virtual pubsub service with the account. This greatly simplifies the task of discovering the account owner's personal pubsub nodes, since the root pubsub node simply is the account owner's bare JID &BAREJID;. This assumption also simplifies publishing and subscribing.</p>
  </section2>
  <section2 topic='One Publisher Per Node' anchor='approach-publisher'>
    <p>There is no need for multiple publishers to a PEP service, since by definition the service generates information associated with only one entity. The owner-publisher for every node is the bare JID of the account owner.</p>
  </section2>
  <section2 topic='Use Presence' anchor='approach-presence'>
    <p>Although generic publish-subscribe services do not necessarily have access to presence information about subscribers, PEP services are integrated with presence in the following ways:</p>
    <ul>
      <li>Each messaging and presence account simply <em>is</em> a virtual publish-subscribe service.</li>
      <li>The default access model is "presence".</li>
      <li>A contact's subscription to an account owner's personal eventing data is automatically created because the contact has an XMPP presence subscription (the "auto-subscribe" feature).</li>
      <li>Services take account of subscriber presence in the generation of notifications. <note>This works only if the subscription state is "both" (see <cite>RFC 3921</cite>).</note></li>
      <li>A service automatically sends notifications to all of the account owner's connected resources (subject to notification filtering).</li>
    </ul>
    <p>These uses of presence simplify the task of developing compliant clients (cf. &xep0134;).</p>
    <p class='box'>Note: It is strongly NOT RECOMMENDED to use directed presence with Entity Capabilities data that differs from the data included in broadcast presence for the purpose of establishing implicit PEP subscriptions to another entity, because the directed presence information will be overwritten by any subsequent presence broadcast.</p>
  </section2>
  <section2 topic='Filtered Notifications' anchor='approach-filter'>
    <p>By default, the existence of an XMPP presence subscription is used to establish a PEP subscription to the account owner's personal eventing data. In order to filter which notifications are sent by the PEP service, the contact's client includes extended &xep0115; information in the presence notifications it sends to the account owner. Because the PEP service supports the "filtered-notifications" feature, it sends only those notifications that match the contact's expressed notification preferences.</p>
  </section2>
  <section2 topic='Smart Defaults' anchor='approach-defaults'>
    <p>Most pubsub configuration options and metadata are not needed for personal eventing. Instead, PEP services offer smart defaults to simplify node creation and management.</p>
  </section2>
</section1>

<section1 topic='Publishing Events' anchor='publish'>
  <p>An account owner publishes an item to a node by following the protocol specified in <cite>XEP-0060</cite>:</p>
  <example caption='Account owner publishes item'><![CDATA[
<iq from='juliet@capulet.lit/balcony' type='set' id='pub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='http://jabber.org/protocol/tune'>
      <item>
        <tune xmlns='http://jabber.org/protocol/tune'>
          <artist>Gerald Finzi</artist>
          <length>255</length>
          <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
          <title>Introduction (Allegro vigoroso)</title>
          <track>1</track>
        </tune>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
  <p>If the node does not already exist, the PEP service MUST create the node. This "auto-create" feature (defined in <cite>XEP-0060</cite>) MUST be supported by a PEP service. (Naturally, the account owner's client MAY follow the node creation use case specified in <cite>XEP-0060</cite> before attempting to publish an item.)</p>
  <p>A PEP service SHOULD also support the "publish-options" feature defined in <cite>XEP-0060</cite>.</p>
  <p>If the publication logic dictates that event notifications shall be sent, the account owner's server generates notifications and sends them to all appropriate entities as described in the <link url='#notify'>Receiving Event Notifications</link> section of this document, as well as to any of the account owner's available resources.</p>
  <p class='box'>Note: PEP ties the receipt of PEP notifications to the subscriber's presence, but does not tie the generation of PEP notifications to the publisher's presence. If the publisher wishes to stop generating PEP events (or to generate an "empty" event as can be done for some PEP payloads) before ending its presence session, the publisher MUST direct its client to do so and MUST NOT depend on the PEP service to automatically "zero out" its PEP information when the PEP service receives unavailable presence from the publisher.</p>
</section1>

<section1 topic='Receiving Event Notifications' anchor='notify'>
  <p>An entity shall receive event notifications if:</p>
  <ol start='1'>
    <li>The node has an open access model and the entity has explicitly or implicitly subscribed to the node as explained in <cite>XEP-0060</cite>.</li>
    <li>The entity shares presence with the account owner (see <link url='#notify-presence'>Presence Sharing</link>), is authorized to receive events from the node in accordance with the node access model (see <cite>XEP-0060</cite>), and advertises an interest in the payload type (see <link url='#notify-filter'>Notification Filtering</link>).</li>
    <li>The entity is the account owner itself, in which case the PEP service shall send notifications to all of the account owner's available resources (subject to <link url='#notify-filter'>notification filtering</link>).</li>
  </ol>
  <section2 topic='Automatic Subscriptions' anchor='notify-autosubscribe'>
    <p>A PEP service MUST support the "auto-subscribe" feature defined in Section 9.1 of <cite>XEP-0060</cite>. This implies that when a user has an XMPP presence subscription to the account owner's presence, the user automatically also has the right to subscribe to any of the account owner's PEP nodes (if the access model is the default of "presence") and to retrieve items from such PEP nodes.</p>
  </section2>
  <section2 topic='Notification Filtering' anchor='notify-filterednotifications'>
    <p>A PEP service MUST support the "filtered-notifications" feature defined in Section 9.2 of <cite>XEP-0060</cite>. This implies that when an automatic subscriber can specify which event payloads it wants to receive by including appropriate feature bundles in the <cite>XEP-0115</cite> information it broadcasts.</p>
  </section2>
  <section2 topic='Generating Notifications' anchor='notify-generate'>
    <section3 topic='Addressing' anchor='notify-addressing'>
      <ol start='1'>
        <li><p>The server MUST set the 'from' address on the notification to the bare JID &BAREJID; of the account owner (in these examples, "juliet@capulet.lit").</p></li>
        <li><p>Any errors generated by the recipient or the recipient's server in relation to the notification MUST be directed to the JID of the 'from' address on the notification (i.e., the bare JID) so that bounce processing can be handled by the PEP service rather than by the publishing client.</p></li>
        <li><p>When sending notifications to an entity that has a presence subscription to the account owner, the server SHOULD include an &xep0033; "replyto" extension specifying the publishing resource (in this example, "juliet@capulet.lit/balcony"); this enables the subscriber's client to differentiate between information received from each of the account owner's resources (for example, different resources may be in different places and therefore may need to specify distinct geolocation data). However, a server MUST NOT include the "replyto" address when sending a notification to an entity that does not have a presence subscription to the account owner.</p></li>
        <li><p>If the PEP service has presence information about the intended recipient, it SHOULD direct the notification(s) to the full JID(s) of the recipient's &FULLJID;; if the PEP service does not have presence information about a subscriber, it MUST address the notification to the subscriber's bare JID &BAREJID;.</p></li>
      </ol>
    </section3>
    <section3 topic='Number of Notifications' anchor='notify-num'>
      <ol start='1'>
        <li><p>If an entity subscribed using a full JID &FULLJID; or a bare domain identifier &DOMAINBARE;, a PEP service MUST send one notification only, addressed to the subscribed JID.</p></li>
        <li><p>If a subscriber subscribed using a bare JID &LOCALBARE; and a PEP service does not have appropriate presence information about the subscriber, a PEP service MUST send at most one notification, addressed to the bare JID &LOCALBARE; of the subscriber, and MAY choose not to send any notification. (By "appropriate presence information" is meant an available presence stanza with <cite>XEP-0115</cite> data that indicates interest in the relevant data format.)</p></li>
        <li><p>If a subscriber subscribed using a bare JID &LOCALBARE; and a PEP service has appropriate presence information about the subscriber, the PEP service MUST send one notification to the full JID &FULLJID; of each of the subscriber's available resources that have included <cite>XEP-0115</cite> information indicating an interest in the data format.</p></li>
      </ol>
    </section3>
    <section3 topic='When to Generate Notifications' anchor='notify-when'>
      <ol start='1'>
        <li><p>When an account owner publishes an item to a node, a PEP service MUST generate a notification and send it to all appropriate subscribers (where the number of notifications is determined by the foregoing rules).</p></li>
        <li><p>When a PEP service receives initial presence <note>By "initial presence" is meant a presence stanza with no 'type' attribute that the PEP service receives after the subscriber was previously unavailable; any subsequent presence stanza with no 'type' attribute that the PEP service receives after the initial presence notification but before the subscriber against goes offline MUST NOT trigger sending of a new pubsub notification.</note> from a subscriber's resource including <cite>XEP-0115</cite> information that indicates an interest in the data format, it MUST generate a notification containing at least the last published item for that node and send it to the newly-available resource; see below under <link url='#notify-last'>Sending the Last Published Item</link>.</p></li>
        <li><p>As an exception to the foregoing MUST rules, a PEP service MUST NOT send notifications to a subscriber if the user has blocked the subscriber from receiving the kind of stanza used for notifications (typically message stanzas) by means of communications blocking as specified in &xep0016; or &xep0191;.</p></li>
      </ol>
    </section3>
    <section3 topic='Sending the Last Published Item' anchor='notify-last'>
      <p>As mentioned, a PEP service MUST send the last published item to all new subscribers and to all newly-available resources for each subscriber, including the account owner itself. (That is, the default value of the "pubsub#send_last_published_item" node configuration field must be "on_sub_and_presence"; this behavior essentially mimics the functionality of presence as defined in <cite>XMPP IM</cite>.) When processing a new subscription, the service MAY send not only the last published item but instead all items that are currently associated with the node (i.e., up to the maximum number of items at the node, which might be one if the node is a "singleton node" as described in <cite>XEP-0060</cite>). If the service has knowledge about the datetime that a subscriber's newly-available resource last received updated information from the node (e.g., as described in &xep0256;) then it MAY also send more items that only the last published item to the newly-available resource.</p>
      <p class='box'>Note: The "on_sub_and_presence" setting relates to the <em>subscriber's</em> presence, not the publisher's presence.</p>
      <example caption='Subscriber sends presence from newly-available resource'><![CDATA[
<presence from='romeo@montague.lit/orchard'>
  <c xmlns='http://jabber.org/protocol/caps'
     hash='sha-1'
     node='http://www.chatopus.com'
     ver='zHyEOgxTrkpSdGcQKH8EFPLsriY='/>
</presence>
]]></example>
      <example caption='Subscriber&apos;s server sends presence from newly-available resource to publisher&apos;s bare JID (i.e., PEP service)'><![CDATA[
<presence from='romeo@montague.lit/orchard' to='juliet@capulet.lit'>
  <c xmlns='http://jabber.org/protocol/caps'
     hash='sha-1'
     node='http://www.chatopus.com'
     ver='zHyEOgxTrkpSdGcQKH8EFPLsriY='/>
</presence>
]]></example>
      <example caption='PEP service sends last published item to newly-available resource'><![CDATA[
<message from='juliet@capulet.lit'
         to='romeo@montague.lit/orchard'
         type='headline'
         id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='http://jabber.org/protocol/tune'>
      <item>
        <tune xmlns='http://jabber.org/protocol/tune'>
          <artist>Gerald Finzi</artist>
          <length>255</length>
          <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
          <title>Introduction (Allegro vigoroso)</title>
          <track>1</track>
        </tune>
      </item>
    </items>
  </event>
  <delay xmlns='urn:xmpp:delay' stamp='2003-12-13T23:58:37Z'/>
</message>
]]></example>
    </section3>
  </section2>
</section1>

<section1 topic='Recommended Defaults' anchor='defaults'>
  <p>A PEP service MUST:</p>
  <ul>
    <li>Support the node discovery, node creation, node deletion, publish item, subscribe, unsubscribe, and item retrieval use cases specified in <cite>XEP-0060</cite>.</li>
    <li>Support the "auto-create", "auto-subscribe", and "filtered-notifications" features.</li>
    <li>Support the "owner" and "subscriber" affiliations.</li>
    <li>Support the "presence" access model and set it to the default.</li>
    <li>Support the "open", "roster", and "whitelist" access models.</li>
    <li>Treat the account owner's bare JID &BAREJID; as a collection node (i.e., as the root collection node for the account's virtual pubsub service).</li>
    <li>Default the 'deliver_notifications' configuration option to true (i.e., deliver payloads by default).</li>
    <li>Default the 'send_last_published_item' configuration option to on_sub_and_presence (i.e., send the last published item on subscription and on receipt of presence). <note>Because subscriptions are implicit in PEP rather than explicit as in generic pubsub, the on_sub_and_presence setting effectively means sending on presence.</note></li>
  </ul>
  <p>A PEP service MAY support other use cases, affiliations, access models, and features, but such support is OPTIONAL.</p>
</section1>

<section1 topic='Determining Support' anchor='support'>
  <section2 topic='Account Owner Service Discovery' anchor='support-owner'>
    <p>Naturally, before an account owner attempts to complete any PEP use cases, its client SHOULD determine whether the account owner's server supports PEP; to do so, it MUST send a &xep0030; information request to its own bare JID:</p>
    <example caption='Account owner queries server regarding protocol support'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    to='juliet@capulet.lit'
    id='disco1'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <p>If the account owner's server supports PEP and the account is provisioned for PEP, the server MUST return an identity of "pubsub/pep" on behalf of the account (as well as a list of the namespaces and other features it supports, including all supported <cite>XEP-0060</cite> features):</p>
    <example caption='Server communicates protocol support'><![CDATA[
<iq from='juliet@capulet.lit'
    to='juliet@capulet.lit/balcony'
    id='disco1'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='account' type='registered'/>
    <identity category='pubsub' type='pep'/>
    <feature var='http://jabber.org/protocol/pubsub#access-presence'/>
    <feature var='http://jabber.org/protocol/pubsub#auto-create'/>
    <feature var='http://jabber.org/protocol/pubsub#auto-subscribe'/>
    <feature var='http://jabber.org/protocol/pubsub#config-node'/>
    <feature var='http://jabber.org/protocol/pubsub#create-and-configure'/>
    <feature var='http://jabber.org/protocol/pubsub#create-nodes'/>
    <feature var='http://jabber.org/protocol/pubsub#filtered-notifications'/>
    <feature var='http://jabber.org/protocol/pubsub#persistent-items'/>
    <feature var='http://jabber.org/protocol/pubsub#publish'/>
    <feature var='http://jabber.org/protocol/pubsub#retrieve-items'/>
    <feature var='http://jabber.org/protocol/pubsub#subscribe'/>
    ...
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Contact Service Discovery' anchor='support-contact'>
    <p>A contact MAY send service discovery requests to the account owner's bare JID &BAREJID;. If the contact already has a subscription to the account owner's presence, this is not necessary in order to receive notifications from the account owner via personal eventing. However, a user without a presence subscription needs to do so in order to discover if the account owner is a virtual pubsub service and to discover the account owner's eventing nodes. The relevant protocol flows are demonstrated in <cite>XEP-0060</cite>.</p>
    <p>Note: When returning disco#items results, the account owner's server MUST check the access model for each of the account owner's PEP nodes and MUST return as service discovery items only those nodes to which the contact is allowed to subscribe or from which the contact is allowed to retrieve items without first subscribing.</p>
  </section2>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Cancelling Subscriptions' anchor='impl-subscriptions'>
    <p>In order to ensure appropriate access to information published at nodes of type "presence" and "roster", a PEP service MUST re-calculate access controls when:</p>
    <ol start='1'>
      <li>A presence subscription state changes (e.g., when a subscription request is approved).</li>
      <li>A roster item is modified (e.g., when the item is moved to a new roster group).</li>
    </ol>
    <p>If the modification results in a loss of access, the service MUST cancel the entity's subscription. In addition, the service MAY send a message to the (former) subscriber informing it of the cancellation (for information about the format of messages sent to notify subscribers of subscription cancellation, see the "Notification of Subscription Denial or Cancellation" section of <cite>XEP-0060</cite>).</p>
  </section2>
  <section2 topic='One Node Per Namespace' anchor='approach-onenode'>
    <p>An earlier version of this document specified that there could be only one publish-subscribe node associated with any given payload type (XML namespace) for the account owner (e.g., there could be only one pubsub node for geolocation events, one node for tune events, and one node for mood events, etc.). However, this rule is now considered overly restrictive because some data formats can be used to encapsulate many different kinds of information; the usual example is Atom as defined in &rfc4287;, for which many extensions exist. Therefore, this document now does not specify that there is a one-to-one relationship between NodeIDs and payload namespaces.</p>
    <p>A specification that defines a given payload format for use in PEP MUST specify whether there shall be only one node per namespace, or whether multiple NodeIDs for the same namespace are allowable.</p>
  </section2>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>A PEP service MAY enforce additional privacy and security policies when determining whether an entity is allowed to subscribe to a node or retrieve items from a node; however, any such policies shall be considered specific to an implementation or deployment and are out of scope for this document.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Service Discovery Category/Type' anchor='registrar-disco'>
    <p>The &REGISTRAR; includes a category of "pubsub" in its registry of Service Discovery identities (see &DISCOCATEGORIES;); as a result of this document, the Registrar includes a type of "pep" to that category.</p>
    <p>The registry submission is as follows:</p>
    <code><![CDATA[
<category>
  <name>pubsub</name>
  <type>
    <name>pep</name>
    <desc>
      A personal eventing service that supports the
      publish-subscribe subset defined in XEP-0163.
    </desc>
    <doc>XEP-0163</doc>
  </type>
</category>
]]></code>
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <p>Because PEP simply reuses the protocol specified in <cite>XEP-0060</cite>, a separate schema is not needed.</p>
</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>The authors wish to thank the participants in the XMPP Interoperability Testing Event held July 24 and 25, 2006, who provided valuable feedback that resulted in radical simplification of the protocol.</p>
  <p>Thanks also to the many members of the standards@xmpp.org discussion list who patiently suffered through seemingly endless discussion of the auto-create and publish-and-configure features.</p>
</section1>

</xep>
