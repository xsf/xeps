<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM "xep.ent">
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
<title>Business Data Interchange</title>
<abstract>This document defines a way to transmit ebXML messages, ANSI X.11, EDIFACT/UN, and SAP iDoc over Jabber/XMPP.</abstract>
  &LEGALNOTICE;
<number>0056</number>
<status>Deferred</status>
<type>Standards Track</type>
<sig>Standards</sig>
<dependencies/>
<supersedes/>
<supersededby/>
<shortname>N/A</shortname>
<author>
<firstname>Ulrich</firstname>
<surname>Staudinger</surname>
<email>chicago5@gmx.de</email>
<jid>uls@jabber.org</jid>
</author>
<revision>
<version>0.3</version>
<date>2002-11-18</date>
<initials>uls</initials>
<remark>added SAP iDoc, EDIFACT, changed from Base64 to XML aware, minor changes in wording</remark>
</revision>
<revision>
<version>0.2</version>
<date>2002-11-06</date>
<initials>uls</initials>
<remark>Changed namespace, improved structure, added ANSI X.12</remark>
</revision>
<revision>
<version>0.1</version>
<date>2002-11-06</date>
<initials>uls</initials>
<remark>Initial release.</remark>
</revision>

</header>

<section1 topic='Introduction'>
<p>
ANSI X.12, EDIFACT/UN and ebXML are all standards. This document describes a fundamental approach to transmit messages that conform to these standards.
</p>

</section1>

<section1 topic='Transmitting ebXML via XMPP'>
<section2 topic='Introduction to ebXML'>

<p>EbXML <note><link url='http://www.ebxml.org'>http://www.ebxml.org</link></note>, a subset of XML that is defined through OASIS.org, is quickly becoming a de-facto standard for electronic, unified, inter and intra business process communication and for business process specification. The direct adjacency to UN/CEFACT EDIFACT, especially object-oriented EDI, make the widespread use of ebXML for automatic business transaction negotiation, process definition, etc. quite likely.
</p>
</section2>


<section2 topic='Protocol'>
<p>
ebXML Messages SHALL be transmitted within Jabber IQ chunks. The value of the 'type' attribute SHALL be 'set' and the chunk SHALL contain a &lt;query/&gt; child element with the namespace declaration set to 'http://jabber.org/protocol/ebxml'. The query element MUST contain the pure ebXML message. No SOAP envelope SHALL exist around the ebXML message. Reception of an ebXML iqed message must be acknowledged with an iq chunk including an empty query tag of the same namespace, the iq tag SHALL have the same ID.
</p>

<example caption='ebXML Envelope'><![CDATA[
<iq from='a@b.c' to='d@e.f' type='set' id='some'>
  <query xmlns='http://jabber.org/protocol/ebxml'>
    [data]
  </query>
</iq>
]]></example>

<p>
EbXML information is always transmitted in this envelope. No transformation of native ebXML tags into native Jabber tags is performed (e.g., ebXML reception receipt into Jabber reception receipt). The business logic, on top of Jabber transport logic, has to parse incoming IQ chunks and forward received ebXML information to the ebXML Messaging Service. The business logic has as well to pack the ebXML messages into IQ chunks and invoke the message delivery.
</p>
<p>
Although a complex business transaction between two or more Trading Partners might require a payload that contains an array of business documents, binary images, or other related Business Information' <note>Walsh. 2002. <em>ebXML: The Technical Specifications</em>; p. 69</note>, only one ebXML message can be (at the moment) transmitted at a time in one message. However, the ebXML Message MAY contain payload in it's own payload envelope.
</p>
<p>It has to be noted: The karma restriction of XMPP, implied on clients, makes transmission of large amounts of payload (at the moment) to services or other clients from client side nearly impossible. However, components' karma is not restrained.
</p>

</section2>

<section2 topic='Examples'>

<example caption='ebXML Query from a client to a Gateway'><![CDATA[
<iq to='ebxml.gateway.com' type='set' id='f0a0f0'>
  <query xmlns='http://jabber.org/protocol/ebxml'>
    <RegistryEntryQuery>
      <RegistryEntryFilter>
        objectType EQUAL "CPP" AND status EQUAL "Approved"
      </RegistryEntryFilter>
      <HasClassificationBranch>
        <ClassificationNodeFilter>
          id STARTSWITH "urn:urn:spsc:321118'
        </ClassificationNodeFilter>
      </HasClassificationBranch>
    </RegistryEntryQuery>
  </query>
</iq>
]]></example>
<p>
The previous example transmits a query to a database with an ebXML interface. A requester searches for all companies dealing with 'Integrated curcuit components', here with UNSPSC code '321118'.
</p>


<example caption='ebXML component OK from component to client'><![CDATA[
<iq to='client@server.com' from='ebxml.gateway.com' type='result' id='f0a0f0'>
  <query xmlns='http://jabber.org/protocol/ebxml'/>
</iq>
]]></example>
<p>
This prior xml code is the result which every recieving unit has to send, after successfully recieving the iq chunk. Note, that this does not mean, the ebxml chunk has been accepted, parsed, or whatever, this is only on jabber level.
</p>

</section2>



</section1>


<section1 topic='Transmitting ANSI X.12 via XMPP'>
<section2 topic='Introduction'>
<p>ANSI X.12 is a character oriented protocol. X.12 is separated into segments. Segments are separated by an asterisk <note>Angeli, Streit, Gonfaloniere. 2000. <em>The SAP R/3 Guide to EDI and interfaces</em>; p. 133</note>.</p>
</section2>
<section2 topic='Protocol'>
<p>ANSI X.12 messages SHALL be delivered in a query tag of an IQ chunk. The IQ chunk's type attribute SHALL be set to 'set'. The query's namespace attribute SHALL be set to 'http://jabber.org/protocol/ansi_x.12'. The query tag shall contain the ANSI X.12 message. The ANSI X.12 message SHALL NOT be Base64 encoded, but SHALL be XML aware.</p>
 </section2>


<section2 topic='Example'>

<example><![CDATA[
<iq type='set' id='ANY' to='ANSI_X12Gate@way.com'>
  <query xmlns='http://jabber.org/protocol/ansi_x.12'>
  ST*850*000000101~
  BEG*00*NE*123456789*991125**AC~
  N1*BT***0111213~
  N1*ST***5566789~
  PO1*1*250*KGM*15.3*SR*EAN*MY1001~
  CTT*1*2~
  SE*7*000000101~
  </query>
</iq>
]]></example>
</section2>
</section1>

<section1 topic='Transmitting UN/EDIFACT via XMPP'>
<section2 topic='Introduction'>
<p>
EDIFACT/UN is very similar to X.12 and differs only in the meaning of tags and in some syntactical details.
</p>
</section2>
<section2 topic='Protocol'>
<p>EDIFACT/UN messages SHALL be delivered in a query tag of an IQ chunk. The IQ chunk's type attribute SHALL be set to 'set'. The query's namespace attribute SHALL be set to 'http://jabber.org/protocol/edifact'. The query tag SHALL contain the UN/EDIFACT message. The UN/EDIFACT message SHALL NOT be Base64 encoded.</p>
 </section2>
</section1>

<section1 topic='Transmitting SAP iDoc via XMPP'>
<section2 topic='Introduction'>
  <p>SAP Systems can create IDocs as receipts of transactions. These receipts can be used within other EDI systems, or within the SAP system. Of course transmission of IDocs can take place through XMPP as well.</p>
</section2>

<section2 topic='Protocol'>
<p>SAP IDocs SHALL be transmitted in a query tag of an IQ chunk. The IQ chunk's type attribute SHALL be 'set. The query's namespace attribute SHALL be set to 'http://jabber.org/protocol/sap_idoc'. The query tag SHALL contain the iDoc, XML aware.
</p>
</section2>

<section2 topic='Example'>
<example><![CDATA[
<iq type='set' id='ANY' from='sap_idoc_gate@way.com'>
  <query xmlns='http://jabber.org/protocol/sap_idoc'>
    EDI_DC0350000000000000001301230C30USDEL4111SAPI10
    ...
  </query>
</iq>
]]></example>
</section2>
</section1>
</xep>
