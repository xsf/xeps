<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle XML Streams</title>
  <abstract>This specification defines a Jingle application type for establishing direct or mediated XML streams between two entities over any streaming transport. This technology thus enables two entities to establish a trusted connection for end-to-end encryption or for bypassing server limits on large volumes of XMPP traffic.</abstract>
  &LEGALNOTICE;
  <number>0247</number>
  <status>Deferred</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0047</spec>
    <spec>XEP-0065</spec>
    <spec>XEP-0166</spec>
    <spec>XEP-0246</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  &stpeter;
  &infiniti;
  &dmeyer;
  <revision>
    <version>0.2</version>
    <date>2009-02-20</date>
    <initials>dm/psa</initials>
    <remark><p>Adjusted text and examples to reflect Jingle-XTLS, Jingle-IBB, and Jingle-S5B; moved stream security to Jingle-XTLS; moved basic stream setup from XEP-0246 to this document; changed examples to use Jingle-IBB as the transport; clarified stream opening and closing as well as session termination.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2008-06-18</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2008-06-13</date>
    <initials>psa/jk/dm</initials>
    <remark>First draft.</remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>The standard client-server architecture for XMPP communication provides a stable infrastructure for real-time communication. However, there are certain situations in which it is desirable to bypass the standard client-server architecture, including:</p>
  <ul>
    <li>Two endpoints cannot access an XMPP server</li>
    <li>Two endpoints want to enforce end-to-end encryption</li>
    <li>Two endpoints want to send a high volume of XMPP traffic but the intermediate servers enforce rate limits</li>
  </ul>
  <p>The first situation is addressed by &xep0174;. However, if the endpoints already have client-to-server connections but wish to bypass those connections or leverage those streams for a higher-level application such as end-to-end encryption, it is desirable for the two endpoints to negotiate an end-to-end XML stream. This specification defines methods for doing so, where the application format is an XML stream and the transport method is any direct or mediated streaming transport, such as &xep0261; (mediated), &xep0260; (direct or mediated), or a future ice-tcp Jingle transport (direct or mediated) based on &rfc6544;.</p>
</section1>

<section1 topic='Protocol' anchor='protocol'>
  <p>This section provides a friendly introduction to Jingle XML streams.</p>
  <p>First, the party that wishes to initiate the stream determines the responder's capabilities (via &xep0030; or &xep0115;). Here we assume that the responder supports a service discovery feature of 'urn:xmpp:jingle:apps:xmlstream:0' &VNOTE; corresponding to the Jingle XML stream functionality defined herein, as well as the 'urn:xmpp:jingle:transports:ibb:0' feature.</p>
  <p>The initiator then sends a Jingle session-initiation request to the responder. The content-type of the request specifies three things:</p>
  <ol start='1'>
    <li><p>An application type of "urn:xmpp:jingle:apps:xmlstream:0".</p></li>
    <li><p>Options for the streaming transport method, such as In-Band Bytestreams ("IBB") as defined in <cite>XEP-0261</cite> or SOCKS5 Bytestreams ("S5B") as defined in <cite>XEP-0260</cite>.</p></li>
  </ol>
  <p class='box'>Note: It is STRONGLY RECOMMENDED to encrypt all end-to-end XML streams as described in <cite>Jingle-XTLS</cite> (currently located at &lt;<link url='http://xmpp.org/extensions/inbox/jingle-xtls.html'>http://xmpp.org/extensions/inbox/jingle-xtls.html</link>&gt;). Those security flows are NOT described here.</p>
  <p>In this example, the initiator is &lt;romeo@montague.lit&gt;, the responder is &lt;juliet@capulet.lit&gt;, and the initiation request specifies a transport method of "jingle-ibb" (i.e., <cite>XEP-0261</cite>).</p>
  <p>The flow is as follows.</p>
  <code><![CDATA[
 Romeo                           Juliet
   |                               |
   |   session-initiate            |
   |------------------------------>|
   |   ack                         |
   |<------------------------------|
   |   session-accept              |
   |<------------------------------|
   |   ack                         |
   |------------------------------>|
   |   [ XML stream over IBB ]     |
   |<=============================>|
   |   terminate                   |
   |<------------------------------|
   |   ack                         |
   |------------------------------>|
   |                               |
  ]]></code>
  <p>First the initiator sends a Jingle session-initiate.</p>
  <example caption="Initiator sends session-initiate"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='ty1bf726'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='xmlstream'>
      <description xmlns='urn:xmpp:jingle:apps:xmlstream:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:ibb:0'
                 block-size='4096'
                 sid='vj3hs98y'/>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The responder immediately acknowledges receipt of the Jingle session-initiate.</p>
  <example caption="Responder acknowledges session-initiate"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='ty1bf726'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <p>If the responding user accepts the session then her client sends a session-accept.</p>
  <example caption="Responder sends session-accept"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hwd987h'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-accept'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <description xmlns='urn:xmpp:jingle:apps:stub:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:ibb:0'
                 block-size='4096'
                 sid='vj3hs98y'/>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The initiator acknowledges receipt.</p>
  <example caption="Initiator acknowledges session-accept"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hwd987h'
    to='juliet@capulet.lit/balcony'
    type='result'/>
  ]]></example>
  <p>The clients can then begin to exchange XMPP data over the in-band bytestream. Because the transport is an in-band bytestream, the XMPP data is prepared as described in &xep0047; (i.e., Base64-encoded).</p>
  <p>First the initiator sends an initial stream header to the responder.</p>
  <example caption="Initial stream header (unencoded)"><![CDATA[
<stream:stream
        xmlns='jabber:client'
        xmlns:stream='http://etherx.jabber.org/streams'
        from='romeo@montague.lit/orchard'
        to='juliet@capulet.lit/balcony'
        version='1.0'>
  ]]></example>
  <p>Note: In accordance with &xmppim;, the initial stream header SHOULD include the 'to' and 'from' attributes, which SHOULD specify the full JIDs of the clients. If the initiator supports stream features and the other stream-related aspects of XMPP 1.0 as specified in <cite>RFC 3920</cite>, then it SHOULD include the version='1.0' flag as shown in the previous example.</p>
  <example caption="Initial stream header (encoded in IBB) and IQ-result"><![CDATA[
<iq from='romeo@montague.net/orchard'
    id='ur73n153'
    to='juliet@capulet.com/balcony'
    type='set'>
  <data xmlns='http://jabber.org/protocol/ibb' seq='0' sid='vj3hs98y'>
    PHN0cmVhbTpzdHJlYW0geG1sbnM9J2phYmJlcjpjbGllbnQnIHhtbG5zOnN0cmVh
    bT0naHR0cDovL2V0aGVyeC5qYWJiZXIub3JnL3N0cmVhbXMnIGZyb209J3JvbWVv
    QG1vbnRhZ3VlLmxpdC9vcmNoYXJkJyB0bz0nanVsaWV0QGNhcHVsZXQubGl0L2Jh
    bGNvbnknIHZlcnNpb249JzEuMCc+
  </data>
</iq>

<iq from='juliet@capulet.com/balcony'
    id='ur73n153'
    to='romeo@montague.net/orchard'
    type='result'/>
  ]]></example>
  <p>The responder then sends a response stream header back to the initiator (because this stream header is sent in the other direction, the IBB 'seq' attribute has a value of zero, not 1).</p>
  <example caption="Response stream header"><![CDATA[
<stream:stream
        xmlns='jabber:client'
        xmlns:stream='http://etherx.jabber.org/streams'
        from='juliet@capulet.lit/balcony'
        id='hs91gh1836d8s717'
        to='romeo@montague.lit/orchard'
        version='1.0'>
  ]]></example>
  <example caption="Response stream header (encoded in IBB) and IQ-result"><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='pd61g397'
    to='romeo@montague.net/orchard'
    type='set'>
  <data xmlns='http://jabber.org/protocol/ibb' seq='1' sid='vj3hs98y'>
    PHN0cmVhbTpzdHJlYW0geG1sbnM9J2phYmJlcjpjbGllbnQnIHhtbG5zOnN0cmVh
    bT0naHR0cDovL2V0aGVyeC5qYWJiZXIub3JnL3N0cmVhbXMnIGZyb209J2p1bGll
    dEBjYXB1bGV0LmxpdC9iYWxjb255JyBpZD0naHM5MWdoMTgzNmQ4czcxNycgdG89
    J3JvbWVvQG1vbnRhZ3VlLmxpdC9vcmNoYXJkJyB2ZXJzaW9uPScxLjAnPg==
  </data>
</iq>

<iq from='romeo@montague.net/orchard'
    id='pd61g397'
    to='juliet@capulet.com/balcony'
    type='result'/>
  ]]></example>
  <p>Once the streams are established, either entity then can send XMPP message, presence, and IQ stanzas, with or without 'to' and 'from' addresses.</p>
  <example caption="A message (unencoded)"><![CDATA[
<message from='romeo@montague.lit/orchard' to='juliet@capulet.lit/balcony'>
  <body>M&apos;lady, I would be pleased to make your acquaintance.</body>
</message>
  ]]></example>
  <example caption="A message (encoded in IBB) and IQ-result"><![CDATA[
<iq from='romeo@montague.net/orchard'
    id='iq7dh294'
    to='juliet@capulet.com/balcony'
    type='set'>
  <data xmlns='http://jabber.org/protocol/ibb' seq='1' sid='vj3hs98y'>
    PG1lc3NhZ2UgZnJvbT0ncm9tZW9AbW9udGFndWUubGl0L29yY2hhcmQnIHRvPSdq
    dWxpZXRAY2FwdWxldC5saXQvYmFsY29ueSc+PGJvZHk+TSZhcG9zO2xhZHksIEkg
    d291bGQgYmUgcGxlYXNlZCB0byBtYWtlIHlvdXIgYWNxdWFpbnRhbmNlLjwvYm9k
    eT48L21lc3NhZ2U+
  </data>
</iq>

<iq from='juliet@capulet.com/balcony'
    id='iq7dh294'
    to='romeo@montague.net/orchard'
    type='result'/>
  ]]></example>
  <p>The responder could then send a reply.</p>
  <example caption="A reply (unencoded)"><![CDATA[
<message from='juliet@capulet.lit/balcony' to='romeo@montague.lit/orchard'>
  <body>Art thou not Romeo, and a Montague?</body>
</message>
  ]]></example>
  <example caption="A reply (encoded in IBB) and IQ-result"><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='hr91hd63'
    to='romeo@montague.net/orchard'
    type='set'>
  <data xmlns='http://jabber.org/protocol/ibb' seq='1' sid='vj3hs98y'>
    PG1lc3NhZ2UgZnJvbT0nanVsaWV0QGNhcHVsZXQubGl0L2JhbGNvbnknIHRvPSdy
    b21lb0Btb250YWd1ZS5saXQvb3JjaGFyZCc+PGJvZHk+QXJ0IHRob3Ugbm90IFJv
    bWVvLCBhbmQgYSBNb250YWd1ZT88L2JvZHk+PC9tZXNzYWdlPg==
  </data>
</iq>

<iq from='romeo@montague.net/orchard'
    id='kr91n475'
    to='juliet@capulet.com/balcony'
    type='result'/>
  ]]></example>
  <p>To end the XML stream, either party sends a closing &lt;/stream:stream&gt; element.</p>
  <example caption="Stream close (unencoded)"><![CDATA[
</stream:stream>
  ]]></example>
  <example caption="Stream close (encoded in IBB) and IQ-result"><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='kr91n475'
    to='romeo@montague.net/orchard'
    type='set'>
  <data xmlns='http://jabber.org/protocol/ibb' seq='2' sid='vj3hs98y'>
    PC9zdHJlYW06c3RyZWFtPg==
  </data>
</iq>

<iq from='romeo@montague.net/orchard'
    id='kr91n475'
    to='juliet@capulet.com/balcony'
    type='result'/>
  ]]></example>
  <p>However, even after the application-level XML stream is terminated, the negotiated Jingle transport (here in-band bytestream) continues and could be re-used. To completely terminate the Jingle session, the terminating party would then also send a Jingle session-terminate message.</p>
  <example caption="Responder terminates the stream and session"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='psy617r4'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-terminate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'/>
</iq>
  ]]></example>
  <p>The other party then acknowledges the Jingle session-terminate.</p>
  <example caption="Initiator acks session-terminate"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='psy617r4'
    to='juliet@capulet.lit/balcony'
    type='result'/>
  ]]></example>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Mandatory to Implement Technologies' anchor='impl-mti'>
    <p>An implementations MUST support the Jingle IBB Transport Method (<cite>XEP-0261</cite>) as a dependable method of last resort. An implementation SHOULD support other streaming transport methods as well, such as the Jingle S5B Transport Method (<cite>XEP-0260</cite>).</p>
  </section2>
  <section2 topic='Preference Order of Transport Methods' anchor='impl-pref'>
    <p>An application MAY present transport methods in any order, except that the Jingle IBB Transport Method MUST be the lowest preference.</p>
  </section2>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>No interaction with &IANA; is required as a result of this document.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>This specification defines the following XML namespace:</p>
    <ul>
      <li>urn:xmpp:jingle:apps:xmlstream:0</li>
    </ul>
    <p>Upon advancement of this specification from a status of Experimental to a status of Draft, the &REGISTRAR; shall add the foregoing namespaces to the registry located at &NAMESPACES;, as described in Section 4 of &xep0053;.</p>
  </section2>
  <section2 topic='Protocol Versioning' anchor='registrar-versioning'>
    &NSVER;
  </section2>
  <section2 topic='Jingle Application Formats' anchor='registrar-content'>
    <p>The XMPP Registrar shall include "xmlstream" in its registry of Jingle application formats. The registry submission is as follows:</p>
    <code><![CDATA[
<application>
  <name>xmlstream</name>
  <desc>Jingle sessions for an end-to-end XML stream</desc>
  <transport>streaming</transport>
  <doc>XEP-0247</doc>
</application>
    ]]></code>
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:jingle:apps:xmlstream:0'
    xmlns='urn:xmpp:jingle:apps:xmlstream:0'
    elementFormDefault='qualified'>

  <xs:element name='description' type='empty'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
    ]]></code>
</section1>

</xep>
