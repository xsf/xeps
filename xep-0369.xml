<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<?xml-stylesheet type="text/css" href="xmpp.css"?>
<xep>
<header>
  <title>Mediated Information eXchange (MIX)</title>
  <abstract>This document defines Mediated Information eXchange (MIX), an XMPP protocol extension for the exchange of information among multiple users through a mediating service. The protocol can be used to model group communication applications such as chatrooms, although with greater flexibility and extensibility than existing groupchat technologies such as Multi-User Chat (MUC). MIX supports standard groupchat features such as discussion topics and invitations, and  defines a strong access control model similar to that of MUC. MIX also enables users to participate without sharing presence, allows communication of any structured data (not only textual messages).  MIX uses Publish-Subscribe to provide flexible access and publication, and uses Message Archive Management (MAM) to provide storage and archiving. </abstract>
  &LEGALNOTICE;
  <number>0369</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0128</spec>
    <spec>XEP-0313</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>MIX</shortname>
  &ksmithisode;
  <!-- AUTHOR NOTE: replace withe  xep.ent? -->
  <author>
    <firstname>Steve</firstname>
    <surname>Kille</surname>
    <email>Steve.Kille@isode.com</email>
    <jid>Steve.Kille@isode.com</jid>
  </author>

  &stpeter;
  <revision>
    <version>0.1.1</version>
    <date>2016-03-17</date>
    <initials>XEP Editor (ssw)</initials>
    <remark><p>Fix XML in join example.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2016-01-07</date>
    <initials>XEP Editor (asw)</initials>
    <remark><p>Initial published version approved by the XMPP Council.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2015-10-12</date>
    <initials>kis/psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>Multi-User Chat (MUC) is a major application of XMPP that was developed in 2002 and standardized in &xep0045;. The Mediated Infromation eXchange (MIX) protocol defined here implements the same basic MUC patterns in a more flexible and extensible way in order to address requirements that have emerged since MUC was developed. MIX supports all of the core chatroom features that are familiar from MUC, such as discussion topics and invitations. Like MUC, it also defines a strong access control model, including the ability to kick and ban users, to name  administrators, and to require membership in order to participate in channels. MIX is intended as a medium term replacement for MUC.</p>
  <p>MUC exists and works, so why replace it? There are several reasons:</p>
  <ul>
    <li>A number of use cases for group communication have emerged since MUC was first published.</li>
    <li>Experience has shown that it is difficult to use MUC to build several kinds of communication applications (such as a multimedia conference focus) without undesirable adaptations.</li>
    <li>It is impractical to address a number of the requirements listed in the next section with MUC or with extensions to MUC. </li>
    <li>In the years after MUC was designed, both &xep0060; and &xep0313; have been developed and it is desirable to reuse these building blocks (e.g., MAM can be used for message history) rather than using the less robust methods defined in &xep0045;.</li>
  </ul>
  <p>Because it is anticipated that there will significant co-existence between MUC and MIX, this specification is designed so that:</p>
  <ul>
    <li>XMPP clients can implement MUC and this specification in a way that provides a coherent user experience.</li>
    <li>XMPP servers can implement this specification and also provide a MUC interface in order to support clients that only implement MUC.</li>
  </ul>
  <p>If a server wishes to expose both MUC and MIX representations of chatrooms, it is recommended to do so by serving MUC and MIX on different domains, but a server MAY serve them on the same domain. The MIX service SHOULD include a reference to the MUC mirror, so that clients understanding both protocols can choose to show only one copy of the service.</p>
</section1>

<section1 topic='Requirements' anchor='reqs'>
  <ul>
    <li>A user's participation in a channel persists and is not modified by the user's client going online and offline.</li>
    <li>Multiple devices associated with the same account can share the same nick in the channel, with well-defined rules making each client individually addressable.</li>
    <li>Channels are not required to support or reflect presence for participants.</li>
    <li>A reconnecting client can quickly resync with respect to messages and presence.</li>
    <li>A user may (subject to configuration) receive messages from a channel as an invisible observer.</li>
    <li>Configuration can be observed externally to the channel (e.g., list of participants, access control rights, etc.).</li>
    <li>MIX services should provide mechanisms to prevent JIDs from being harvested.</li>
    <li>MIX and Message Archive Management (MAM) should work well together.</li>
    <li>A user can determine which channels they participate in.</li>
    <li>Provide extensibility regarding data formats that can be sent within a channel (files, structured data, indications about media sources in multimedia conferences, etc.) as well as flexibility regarding which data formats a user wants to receive.</li>
    <li>Enable federation of a channel across multiple servers, to provide a service equivalent to "federated MUC" &xep0289;.</li>
    <li>(Desirable) Make it easier to reduce duplicate traffic.</li>
 </ul>
</section1>

<section1 topic='Concepts' anchor='reqs'>
  <p>The following concepts underlie the design of MIX.</p>
  <ul>
    <li>MIX channels (roughly equivalent to MUC rooms) are hosted on one or more MIX domains, (examples: `mix.example.com`; 'conference.example.com'; 'talk.example.com'), which are discoverable through &xep0030;. Each channel on a MIX service may then be discovered and queried.</li>
    <li> In MIX each channel (e.g., `channel@mix.example.com`) is a pubsub service. This is based on the model from &xep0163; where every user JID (e.g., `user@example.com`) is its own pubsub service. </li>
    <li>A channel's pubsub service contains a number of nodes for different event types or data formats. As described below, this document defines several standard nodes; however, future specifications or proprietary services can define their own nodes for extensibility.</li>
    <li>Affiliations with the nodes are managed by the MIX service by channel level operations, so that the user does not have to separately manage affiliations with the individual PubSub nodes.
     </li>
    <li>&xep0313; (MAM) is used for all history access, with each node being individually addressable for MAM queries. This simplifies implementation compared to MUC (which had a specialized and rather limited history retrieval mechanism).</li>
    <li>A client can achieve a 'quick resync' of a node by requesting just those changes it has not yet received, using standard MAM protocol. This solves the old MUC issue of either receiving duplicate messages when rejoining a room or potentially missing messages.</li>
    <li>Because MAM is used for history, only those nodes that have a 'current value' need to store any items in them - e.g., 'urn:xmpp:mix:nodes:presence' and 'urn:xmpp:mix:nodes:subject' would store their current values (with older values being queryable through MAM), while 'urn:xmpp:mix:nodes:messages' would store no items.</li>
    <li>A user's participation in a channel outlives their presence session. A user who is offline will not share presence within the channel, but will still be listed as an participant. This too is a significant departure from MUC.</li>
    <li>MIX decouples addressing of occupants from their nicknames, so that nickname changes do not affect addressing.</li>
    <li>Each participant is addressable by a single bare JID, which is a proxy JID (not the user's real JID) to make it straightforward to hide the user's real JID from other channel participants. Full JIDs comprised of this bare JID plus a resource are then constructed, allowing transparency when a user has multiple online resources participating in the MIX.</li>
  </ul>
  <section2 topic="MIX and PubSub" anchor="concepts-pubsub">
    <p>MIX is based upon domains providing a MIX service, such as `mix.shakespeare.example`. Note that although PubSub communication is used, a domain used for MIX is a MIX domain and not a standard &xep0060; domain. (Note that, like in MUC, there is no requirement on the naming of these domains; the label 'mix' and the fact that it is a subdomain of a 'shakespeare.example' service are each purely an example).</p>
    <p>Every MIX channel is an addressable PubSub service (with additional MIX semantics) that will be addressed by an XMPP client using a bare JID, for example coven@mix.shakespeare.example. While &xep0060; is used as the basis for the MIX model, MIX uses standard presence and groupchat messages to provide an interface to the MIX service that does not expose PubSub for many of the more common functions.
</p>
  </section2>
  <section2 topic="MIX and MAM" anchor="concepts-mam">
    <p>Message Archive Management is used for all storage of historical data (such as the history of messages sent within the channel). Each node can be archived separately (e.g., the presence node or the configuration node). MIX clients can retrieve information archived in MAM in order to quickly resync messages with regard to a channel, and can do so without necessarily providing presence information.</p>
  </section2>
  <section2 topic="Delivering Messages to Users" anchor="concepts-delivery">
     <p>
       The primary model is that a user will join a channel over an extended period, and that the user (not a specific client used by the user) joins the channel.  The primary subscription is with the clients bare JID.  The user will receive messages from the channel and/or access channel presence from time to time with one or more clients.
     </p>
    <p>
      Where a user has no clients active, the approach expected by MIX is that messages will be archived using MAM and that when clients come online they will use MAM to access messages that have not been delivered to the client.   Following the rules of &rfc6121;, arriving MIX messages (which will be of type=groupchat) will be discarded if all clients are offline.    Offline messages are not used with MIX.
    </p>
    <p>
      Online clients are handled use &xep0376;.
      The model is that the server will know which of the user's clients are interested in MIX messages, possibly filtered by MIX channel, and will deliver messages appropriately to these clients.  MIX will simply send messages to the user's server addressed with the bare JID of the user.   The user's server will then deliver messages to the user's clients, in a manner that is transparent to the MIX server. The same approach is used for sending presence updates to the user, noting that presence information is distributed by a channel to the bare JID of subscribers and then the user's server will distribute to clients as appropriate.
    </p>
  </section2>
  <section2 topic="User Presence in MIX" anchor="concepts-presence">
    <p>
      MIX channels store presence in the presence node using the proxy JID of each online client for a user.   User presence may be included for all or selected clients of a given user, based on client choice to publish presence.    Where a user publishes presence for multiple clients, this information is available to all users subscribing to the channel presence. Queries such as disco requests will be directed to a specific client, routing through the MIX channel, while private messaging will be addressed to the user's bare proxy JID, and routed by the MIX to the user's bare real JID, where standard distribution rules will apply.
    </p>
    <p>
      Presence updates are distributed by a channel to the bare JID of subscribers and then the subscriber's server will distribute to each of the subscriber's currently online clients.
    </p>
  </section2>
  <section2 topic="Proxy JIDs and JID Visibility" anchor="proxy-jid">
    <p>
      MIX channels have two modes controlling JID visibility:
    </p>
    <ul>
      <li>'JID Visible': In these channels, some or all participant JIDs are visible to all channel members.</li>
      <li>'JID Hidden': In these channels, no participant JIDs are visible to channel members, but they are visible to channel administrators.</li>
    </ul>
    <p>
      A channel member may specify their preferences for JID visibility, with one of the following values:
    </p>
    <ul>
      <li>'No JID Visibility Preference': The users JID will be visible in JID Visible channels and hidden in JID Hidden channels.</li>
      <li>'Prefer Hidden': The user's JID will be hidden in JID Visible channels if the channel policy allows this.</li>
      <li>'Enforce Hidden': The user's JID will never be shown and the user will be removed from channel if channel administrator enforces visibility.</li>
      <li>'Enforce Visible': The users JID will always be shown and the user will be removed from channel if mode is changed to 'JID Hidden'.</li>
    </ul>
    <p>
      The primary representation of a participant in a MIX channel is a proxy JID, which is an anonymized JID using the same domain as the channel and with the name of the channel encoded, using the format "&lt;channel&gt;+&lt;generated identifier&gt;@&lt;mix domain&gt;".   For example in the channel 'coven@mix.shakespeare.example',   the user 'hag66@shakespeare.example' might have a proxy JID of 'coven+123456@mix.shakespeare.example'.   The reason for the proxy JID is to support JID Hidden channels.   Proxy JIDs are also used in JID Visible channels, for consistency and to enable switching of JID visibility.  The "urn:xmpp:mix:nodes:jidmap" node maps from proxy JID to real JID.
    </p>
     <p>
       The full JIDs held in presence are anonymized using a similar mechanism.  First the bare JID is mapped to a bare proxy JID, using the mapping held in the "urn:xmpp:mix:nodes:jidmap" node for the bare JID.  Then the resource is replaced with a generated value.   For example,   'hag66@shakespeare.example' in the channel coven might have a proxy JID of 'coven+123456@mix.shakespeare.example/789'.   There is no client visible mapping of proxy full JIDs maintained as this is not needed.   The MIX channel will need to maintain a mapping, to support directly addressing clients, such as for client to client disco#info queries.
     </p>
  </section2>
  <section2 topic="Standard Nodes" anchor="concepts-nodes">
    <p>The standard nodes are as follows (although note that not every channel will necessarily use each node):</p>
    <ul>
      <li>'urn:xmpp:mix:nodes:messages' for publishing messages. Each item of this node will contain a message sent to the channel.</li>
      <li>'urn:xmpp:mix:nodes:subject' for publishing the subject of the channel.</li>
      <li>'urn:xmpp:mix:nodes:participants' for publishing the list of participants (identified by anonymized bare proxy JID), and identifying the nick.  This is a list of users who would receive messages (by subscription to the messages node) and/or would receive presence (by subscription to the presence node).</li>

      <li>'urn:xmpp:mix:nodes:jidmap' for publishing a list of anonymized bare JIDs from the participants node with a 1:1 mapping to the corresponding real JIDs.</li>


      <li>'urn:xmpp:mix:nodes:presence' for publishing information about the availability status of online participants, which may include multiple clients for a single participant. </li>


      <li>'urn:xmpp:mix:nodes:config' for storing configuration information. </li>

      <li>'urn:xmpp:mix:nodes:acl' for storing information about access control lists (such as the list of owners and administrators). This information will generally be restricted to authorized users.</li>
    </ul>
    <p>
      jidmap is the only node that will always be present for a MIX channel and all other nodes are optional.   All channels will have either a message node, a presence node or both, because a channel will always share messages and/or presence.   MIX provides mechanisms to allow users to conveniently subscribe to a chosen set of nodes and to unsubscribe to all nodes with a single operation.
    </p>
    <p>
      The structure of each of the standard nodes is now considered in more detail
    </p>
    <section3 topic="Messages Node" anchor="messages-node">
      <p>Items in this node will contain a message identified by a unique ID.  A MIX implementation SHOULD NOT make messages available for retrieval from this node using pubsub.  The recommended approach is that zero history is held in the messages node, and that this node is used for publication only.   The recommended approach to retrieve message history is MAM. Users subscribe to this node to receive messages.</p>
      <p>Private Messages are not stored in the messages node.</p>
    </section3>
    <section3 topic="Subject Node" anchor="subject-node">
      <p>The subject node publishes the current subject of channel.  Subject history is stored in MAM.    The id of each node is the current value of the channel subject.   A single item is stored in this node at a time.  Users subscribe to this node to receive subject updates. The following example shows the format of a item in the Subject node.</p>
      <example caption="Subject Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:subject'>
  <item id='How to use Toads' />
</items>]]></example>
    </section3>
    <section3 topic="Participants Node" anchor="participants-node">
      <p>Each channel participant is represented as an item of the 'urn:xmpp:mix:nodes:participants' channel node.   Each item is named by the bare JID of the participant.   For example 'coven+123456@mix.shakespeare.example' might name the node item associated with participant 'hag66@shakespeare.example'.  The nick associated with the user is mandatory and is stored in the item.
      This node may be subscribed to for jid-visible channels that permit subscription to this node - this will allow users to see changes to channel membership.
      </p>
      <p>
        QUESTION: Is there a requirement to mandate format of nick?
      </p>
      <example caption="Value of Participants Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:participants'>
  <item id='coven+123456@mix.shakespeare.example/8765'>
    <participant xmlns='urn:xmpp:mix:0'
                 nick='thirdwitch'/>
  </item>
</items>]]></example>
    </section3>
    <section3 topic="JID Map Node" anchor="jid-map-node">

      <p>The JID Map node is used to map from proxy bare JID to real bare JID.
       Each item is identified by proxy bare JID, mapping to the real bare JID.  This node is used to give administrator access to real JIDs and participant access to real JIDs in jid-visible channels.
        In JID visible channels, all participants may subscribe to this node.  In JID hidden channels, only administrators can subscribe.  </p>
      <example caption="Value of JID Map Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:jidmap'>
  <item id='coven+123456@mix.shakespeare.example'>
    <participant xmlns='urn:xmpp:mix:0'
                 jid='hecate@mix.shakespeare.example'/>
  </item>
</items>]]></example>
    </section3>
    <section3 topic="Presence Node" anchor="presence-node">


      <p>
        The presence node contains the presence value for clients belonging to participants that choose to publish presence to the channel.   A MIX channel may require that all participants publish presence.  Each item in the presence node is identified by the full anonymized proxy JID, and contains the current presence value for that JID.  The presence is encoded in the same way as data that would be sent in a presence message.  The full anonymized JID is always used in this node.   In MIX it is possible to have a 'presence-less channel' by not using this node. Access Control may be set to enforce that for each of the full JIDs in this list, the bare JID MUST be in the participants list.
      </p>
      <p>QUESTION:  The current specification allows channels to be configured so that node subscription is not restricted to participants (although this restriction is the default).  Is this flexibility desirable, or should we restrict to participants?</p>
      <p>
        This node may be subscribed to by users using bare JID.  So presence of online clients is sent to all users subscribed to this node, noting that presence is always sent using standard presence protocol.
      </p>
      <example caption="Value of Presence Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:presence'>
  <item id='coven+123456@mix.shakespeare.example/8765'>
    <presence xmlns='jabber:client'>
      <show>dnd</show>
      <status>Making a Brew</status>
    </presence>
  </item>
</items>]]></example>
    </section3>
    <section3 topic="Configuration Node" anchor="config-node">

      <p>The Configuration node holds the configuration of the channel as a single item, named by the date-time of the last update to the configuration.  A single item is stored in the node at a time, with previous configuration history accessed by MAM.  Users subscribed to the configuration node will enable notification of configuration change.  The configuration node is optional for a MIX channel.  For example, configuration choices could be fixed and not exposed.   A subset of the defined configuration options may be used and additional non-standard configuration options may be added.   If configuration options to control functionality of the nature described here are provided, the options defined in this standard MUST be used. The following configuration options are provided:</p>
      <ul>
        <li>'Date of Configuration Change'.  Encoded as the item ID.</li>
        <li>'Last Change Made By'.  Bare JID of the user making the last change.</li>
        <li>'Name'.  The name of the channel</li>
        <li> 'Members'.  List of JIDs with member rights.  The rights of members are configured in the ACL node.  </li>
        <li>'Outcast'.  List of JIDs banned from subscribing to any nodes in the MIX channel.  </li>
      </ul>
      <p>TEMPORARY NOTE AND QUESTION:  This is currently work in progress.  Suggestions for other items to be included in configuration are welcome.</p>
      <p>The format of the Configuration node follows &xep0004;.  This allows configuration to be updated by MIX defined commands and that the results of update commands can be directly written to the PubSub node.   Updates to the Configuration may use these commands or direct writing to the PubSub node.</p>
      <example caption="Configuration Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:config'>
  <item id='2016-05-30T09:00:00'
        name='A Dark Cave'>
    *** TBS ****
  </item>
</items>]]></example>
    </section3>
    <section3 topic="ACL Node" anchor="acl-node">
      <p>The ACL node is closely related to the configuration node, and contains more information that will generally be more restricted as to who can access and modify.   An anticipated configuration reflected in the defaults has ACL node configured so that it can be modified by channel owners and read only by channel owners and administrators.  The default for the configuration node is update by owners or administrators and visibility to list members.  Split of functionality has been made on the basis of this model. </p>
      <p>TEMPORARY NOTE AND QUESTION:  The split of configuration/acl is arbitrary.  It would be possible to merge them, or to split into more nodes, giving finer control granularity.  Input is solicited on the split an detailed assignment of items to nodes.</p>


      <p>The ACL node holds access control related configuration of the channel as a single item, named by the date-time of the last update to the ACL.  History MUST be set to 1.  Previous ACL history is accessed by MAM.  Users may subscribe to the ACL node if allowed using bare JID.  The ACL node is optional for a MIX channel.  For example, ACL choices could be fixed and not exposed.   A subset of the defined ACL options may be used and additional non-standard ACL options may be added.   If configuration options to control functionality of the nature described here are provided, the options defined in this standard MUST be used. The following ACL options are provided:</p>
      <ul>
        <li>'Date of Configuration Change'.  Encoded as the item ID.</li>
        <li>'Last Change Made By'.  Bare JID of the user making the last change.</li>
        <li>'Owners'.  List of bare JIDs with Owner rights as defined in ACL node.  When a list is created, the JID creating the list is configured as an owner, unless this attribute is explicitly configured to another value.  Owners will generally have full rights to make changes to channel configuration and access control.</li>
        <li>'Administrators'.  List of bare JIDs with Administrator rights.  An Administrator has rights to make changes to channel access control and configuration as defined in ACL node.  An Administrator also has operational right on a channel, such a kicking users out of the channel.  These rights are analogous to moderator rights defined in &xep0045;.</li>

        <li>'End of Life'.  The date and time at which the channel will be automatically removed by the server.   If this is not set, the channel is permanent.</li>
        <li>'Nodes Present'.  Specifies which nodes are present: "participants"; "presence"; "subject"; "acl".  Note that "config" is implicit,  and "jidmap" is implied by "participants". </li>
        <li>'Message Node Subscription'.  Controls who can subscribe to messages node: "members-only"; "participants-only"; "anyone".  Users with banned affiliation may not subscribe.  Default "participants-only".</li>
        <li>'Participants Node Subscription'.  Controls who can subscribe to participants node: "members-only"; "participants-only"; "anyone"; "nobody".  Users with banned affiliation may not subscribe.  Default "participants-only".</li>
        <li>'Participants Node Subscription'.  Controls who can subscribe to participants node: "members-only"; "participants-only"; "anyone"; admins-and-owners" "nobody".  Users with banned affiliation may not subscribe.  Default "participants-only".   Note that this value needs to be restricted to "admins-and-owners" for channels with JID visibility set to a value other than "jid-mandatory-visible".</li>
        <li>'Presence Node Subscription'.  Controls who can subscribe to presence node: "members-only"; "participants-only"; "anyone"; "nobody".  Users with banned affiliation may not subscribe.  Default "participants-only".</li>
        <li>'Subject Node Subscription'.  Controls who can subscribe to subject node: "members-only"; "participants-only"; "anyone"; "nobody".  Users with banned affiliation may not subscribe.  Default "participants-only".</li>
        <li>'Configuration Node Access'.  Controls who can subscribe to and has read access configuration node: "members-only"; "participants-only"; "admins-and-owners"; "owners-only"; "anyone"; "nobody". Default "admins-and-owners".</li>
        <li>'ACL Node Access'.  Controls who can subscribe to and has read access acl node: "members-only"; "admins-and-owners"; "owners-only"; "anyone"; "nobody". Default "admins-and-owners".</li>
        <li>'Configuration Node Update'.  Controls who can modify configuration node: "owners-only"; "admins-and-owners". Default "admins-and-owners".</li>
        <li>'ACL Node Update'.  Controls who can modify acl node: "owners-only"; "admins-and-owners". Default "owners-only".</li>

        <li>'JID Visibility'. Choice of "jid-hidden", "jid-optionally-visible", "jid-mandatory-visible". </li>
        <li>'Open Presence'.  If selected, any client may register presence.  If not selected, only clients with bare JID in the participants list may register presence.</li>
        <li>'Allow Message Retraction'.  If this option is selected users will be able to retract messages sent to the MIX channel.</li>
        <li>'Membership Extension by Invitation'.  This option extends a members only channel so that an invitation from a channel member will add the invited user to the members list.
        </li>
        <li>'No Private Messages'.  If this option is selected, private messages may not be used with the channel.</li>

      </ul>
      <p>TEMPORARY NOTE:  This is currently work in progress.  Suggestions for other items to be included in ACL are welcome.</p>
      <p>The format of the ACL node follows &xep0004;. </p>
      <example caption="ACL Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:acl'>
  <item id='2016-05-30T09:00:00'>
    *** TBS ****
  </item>
</items>]]></example>



    </section3>

  </section2>
</section1>

<section1 topic='Discovery' anchor='discovery'>
  <section2 topic='Discovering a MIX service' anchor='disco-service'>
    <p>To determine if a domain hosts a MIX service, a &xep0030; info query should be sent in the usual manner</p>
      <example caption="Entity queries a service" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]></example>
    <p>The MIX service then MUST return its identity and the features it supports, which MUST include the 'urn:xmpp:mix:0' feature, and the identity MUST have a category of 'conference' and a type of 'text'. </p>
    <p>
      QUESTION: Is there a need for a different type than text?    Provisional answer: no.
    </p>
    <example caption="Service responds with Disco Info result" ><![CDATA[
<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='urn:xmpp:mix:0'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>urn:xmpp:mix:0#serviceinfo</value>
      </field>
      <field var='muc-mirror'
             type='jid-single'
             label='Location of MUC mirror service'>
        <value>chat.shakespeare.example</value>
      </field>
    </x>
  </query>
</iq>]]></example>
    <p>The result is returned in an extended disco results in a form whose type value is 'urn:xmpp:mix:0#serviceinfo'.
      If the MIX service is mirrored to a MUC service for backwards-compatibility, this SHOULD be signaled by the inclusion of field with var='muc-mirror', the value of which is the mirrored MUC domain's JID.  Where a MIX server supports MIX channels as &xep0045; rooms, the domain used for MUC may be different to the MIX domain or it MAY be the same.</p>
    <p>Note that the MIX service itself doesn't advertise support for &xep0313;, nor is support for generic &xep0060; advertised.</p>
  </section2>
  <section2 topic='Discovering the Channels on a Service' anchor='disco-channel-list'>
    <p>The list of channels supported by a MIX service is obtained by a disco command.</p>
    <p>AUTHOR'S NOTE:  This version contains a number of AUTHOR NOTES, which are reminder instructions to the author as to editing actions to be taken, and also indicate where changes are anticipated in future versions.</p>
    <p>
      AUTHOR'S NOTE:  Need to add  example.   This standard disco approach is going to replace the earlier proposed "urn:xmpp:mix:nodes:channels", unless there are objections.   
    </p>
  </section2>
  <section2 topic='Discovering Channel Information' anchor='disco-channel-info'>
    <p>In order to find out more information about a given channel, a user can send a disco#info query to the channel.</p>
    <example caption='Entity Queries for Information about a Specific Channel'><![CDATA[
<iq from='hag66@shakespeare.lit/pda'
    id='ik3vs715'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]></example>
    <p>The channel MUST return its identity and the features it supports:</p>
    <example caption='Channel Returns Disco Info Result'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='ik3vs715'
    to='hag66@shakespeare.lit/pda'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='A Dark Cave'
        type='mix'/>
    <feature var='urn:xmpp:mix:0'/>
  </query>
</iq>]]></example>
  </section2>
  <section2 topic='Discovering Nodes at a Channel' anchor='disco-channel-nodes'>
    <p>Use disco#items to find the nodes associated with a channel.   The MIX server MUST only return nodes that exist and that the user making the query has rights to subscribe to.</p>
    <example caption='Entity Queries for Nodes at a Channel'><![CDATA[
<iq from='hag66@shakespeare.lit/pda'
    id='kl2fax27'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>]]></example>
    <example caption='Room Returns Disco Items Result'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='kl2fax27'
    to='hag66@shakespeare.lit/pda'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:presence'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:participants'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:messages'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:subject'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:config'/>
  </query>
</iq>]]></example>
  </section2>
  <section2 topic='Discovering Participants in a Channel' anchor='disco-channel-participants'>
    <p>
      Online clients in the channel are determined from the presence node.   Participants in the channel are determined from the "urn:xmpp:mix:nodes:participants" node which will give proxy JID and nick. The jidmap node is used to map to real JIDs.  </p>
    <p>AUTHOR'S NOTE:  Add example</p>
  </section2>
</section1>

<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Common User Use Cases' anchor='usecases-user'>
    <section3 topic='Joining a Channel' anchor='usecase-user-join'>
      <p>A user joins a channel by sending a MIX "join" command. There is no default set of nodes, so user MUST specify the set of nodes to be subscribed to. To achieve the equivalent service to MUC, a user would subscribe to messages, presence and subject.
         This will lead to the server subscribing the user to each of the requested nodes associated with the channel. The MIX server will also add the user to the participant list by injecting a new item into the "urn:xmpp:mix:nodes:participants" node automatically.

      </p>
      <p>The default MIX model is that only channel participants may subscribe to nodes.    A MIX channel MAY allow non-participant subscription.   This will be handled by clients directly subscribing to the desired PubSub nodes.</p>
        <example caption="User Joins a Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
    <subscribe node='urn:xmpp:mix:nodes:config'/>
  </join>
</iq>]]></example>
      <p>The channel must process the join atomically. The channel responds with an IQ-result. This stanza includes the nodes to which the user has been successfully subscribed, as well as the bare JID that will be used for the user in this channel and added to the participant list.  If a user cannot be subscribed to one or more of the requested nodes (e.g., because the node does not exist), but can be subscribed to some the response simply lists the nodes successfully subscribed.    If none of the nodes requested are successfully subscribed to, and error response is sent indicating the reason that the first node requested was not subscribed to.   This response will also include other nodes requested where subscription failed for the same reason.  A user may subsequently request subscription to nodes in a channel to which the user was not initially subscribed.  </p>
      <example caption="Channel Successfully Processes Join"><![CDATA[
<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example/pda'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
    <subscribe node='urn:xmpp:mix:nodes:config'/>
  </join>
</iq>]]></example>
      <p>As noted, the participant might not be subscribed to all nodes associated with the channel (in this case only messages, participants, and subject).</p>
      <example caption="Channel Processes Join With Modifications"><![CDATA[
<iq type='result'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
  </join>
</iq>]]></example>
      <p>The channel also adds the user to the participants node and sends a notification.</p>
      <example caption="Channel Adds User to Participants Node"><![CDATA[
<message from='coven@mix.shakespeare.example'
         to='hecate@shakespeare.example'
         id='5A9C7398-DB13-4BFA-A091-2D466C710AAF'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <item id='123456@mix.shakespeare.example'>
        <participant xmlns='urn:xmpp:mix:0'
                     nick='thirdwitch'/>
      </item>
    </items>
  </event>
</message>]]></example>
      <p>The user that has been added to the channel is identified by the item id of the item added to the pubsub node, which is the proxy JID of the new channel participant. Each &lt;participant&gt; element will include the nick of the user being added, which will be how the user will typically be shown in the channel.</p>
      <p>
        Following the MIX server side processing, the user's server will usually add the MIX channel to the user's roster using one way presence.   This means that the MIX channel will get presence information from the user.  This roster entry will lead to correct handling of the user's presence in the MIX channel.   If the user does not wish to publish presence and the channel permits this, then this roster addition does not happen.  If the channel requires presence and the user removes the channel from the user's roster, the channel MAY remove the user as a channel participant.
      </p>
    </section3>

   <section3 topic="User Preferences and Additional Information" anchor="usecase-visibilty-pref">
     <p>A channel may store additional user preferences and parameters.  Where the channel requires a value to be explicitly a &xep0004; form will be returned in response to the join request with mandatory and optional fields.  If parameters are optional, the user may request to set them. </p>
     <p>
       A user may set their JID visibility preference to one of the following values:
     </p>
     <ol>
       <li>'Use Channel Default'.   In this setting, the channel default value will be used.  This value is used if another value is not explicitly set.</li>
       <li>'Never Show JID'.  If this is set, JID will never be shared and user will be removed from the channel if its mode changes to JID-visible-mandatory.</li>
       <li>'Prefer Not Show JID.   If this is set, JID will only be shared if mode is JID-visible-mandatory.</li>
     </ol>
     <p>AUTHOR'S NOTE AND QUESTION:  Add protocol specifications  and examples.   Are there any other specific per user values that should be listed here? </p>
   </section3>

    <section3 topic='Leaving a Channel' anchor='usecase-user-leaving'>
      <p>Users generally remain in a channel for an extended period of time.  In particular membership of the channel does not change when the user goes offline as happens with &xep0045;. So, leaving the channel is a permanent action for a user across all clients, not just a matter of telling the channel that the user is not currently available or for a single client.  In order to  leave a channel, a user sends a MIX "leave" command to the channel. When a user leaves the channel, the user's server will remove the channel from the user's roster.</p>
      <example caption="User Leaves a Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <leave xmlns='urn:xmpp:mix:0'/>
</iq>]]></example>
      <p>When the user leaves the channel, the MIX service is responsible for unsubscribing the user from all nodes in the channel and for removing the user from the participants and presence list.  If the user has online presence when the user leaves the channel, the change of presence status caused by removing the user's entry or entries from the presence node will ensure that subscribers to the presence node are correctly updated on presence status.


        Deletion from the participants and presence functions as if the item (channel member) had been deleted using the PubSub retract mechanism with notification set to true.    Notification of the deletion is sent to clients subscribed to the participants  PubSub nodes, as shown in the example below.
        </p>
      <example caption="Reporting when User Leaves a Channel"><![CDATA[
<message from='coven@mix.shakespeare.example' to='hecate@shakespeare.example' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <retract id='123456@mix.shakespeare.example'/>
    </items>
  </event>
</message>

<message from='coven@mix.shakespeare.example' to='hecate@shakespeare.example' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:presence'>
      <retract id='123456@mix.shakespeare.example/8765'/>
    </items>
  </event>
</message>]]></example>

    </section3>

    <section3 topic="Setting a Nick" anchor="usecase-setting-nick"></section3>
    <p>
      Each member of a channel may have a nick, which is how other users in the channel will see the user.  In some cases a nick is not needed, for example where a user reads messages in a channel but does not send messages or share presence information.    A nick MUST be present for a user to send a message to a channel or for a user's presence to be shared on a channel.   There are four ways that a user's nick can be obtained.   The choice of mechanism or mechanisms is dependent on channel policy:
    </p>
    <ol>
      <li>The nick is registered with the user account in some way, for example as part of user provisioning with nick configured as an attribute in a directory service.   This may be chosen by corporate services that wish to ensure consistent nick values for a set of users and channels.</li>
      <li>The nick is registered with the MIX service, as described in  <link url='#usecase-user-register'> Registering a Nick </link>.</li>
      <li>The user explicitly sets the nick, as described in this section.</li>
      <li>The MIX service generates the nick.  In this case it is recommended that the assigned nick is a UUID unique identifier following &rfc4122;.  </li>
    </ol>
    <p>AUTHOR'S NOTE AND QUESTION:  REVIEW use of UUID.  Can it make sense for other algorithms, such as a string from the JID</p>
    <p>
   A user will typically set a nick when joining a channel and may update this nick from time to time.   The user does this by sending a command to the channel to set the nick.  If the user wishes the channel to assign a nick (or knows that the channel will assign a nick) the nick field can be left blank, so that the user can see what is assigned in the result.
    </p>
    <example caption="User sets Nick on Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </query>
</iq>]]></example>

    <p>
      The channel will return the nick that is to be used, noting that this may be different to the requested nick.   MIX services SHOULD apply the "nickname" profile of the PRECIS OpaqueString class, which is defined in draft-ietf-precis-nickname.
    </p>

    <example caption="Channel informs user of Nick"><![CDATA[
<iq type='result'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </query>
</iq>]]></example>
    <section3 topic='Registering a Nick' anchor='usecase-user-register'>
      <p>A user can register a nick with the MIX service.  Nick registration can be used ensure that a user is able to use the same nick in all channels in the service and to prevent other users from using a registered nick.   This can help achieve a consistent experience across a set of channels and prevent user confusion.  Support for nick registration by a MIX service is optional.  Where nick registration is supported, nick registration may be optional or mandatory.
        Where a user has registered a Nick with the MIX service, it may be used by each channel according to policy for the channel.   A Nick is associated with the user's bare JID.
      </p>
      <p>
        In order to determine if a Nick may be registered, the user may use disco to determine capabilities of the MIX service.
      </p>
      <example caption="User Determines features of the MIX service"><![CDATA[
<iq type='get'
    from='hag66@shakespeare.example/pda'
    to='mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]></example>
      <p>
        The response will be a list of features of the MIX channel.  If Nick Registration is supported, then the result set will include &lt;feature var="mix_nick_register"/&gt;.
      </p>
      <p>
        To register a nick with the MIX service the user sends
 a &lt;register/&gt; command to the service. </p>
      <example caption="User Registers with Service"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='mix.shakespeare.example'
    id='7nve413p'>
  <register xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </register>
</iq>]]></example>
      <p>On success, the service informs the user of its nick. The nick that is issued might be different from the nick that was requested, for example if the service completes normalization of nicknames for purposes of internationalization.</p>
      <p>MIX services SHOULD apply the "nickname" profile of the PRECIS OpaqueString class, which is defined in draft-ietf-precis-nickname.</p>
      <example caption="Service Returns User of Nick"><![CDATA[
<iq type='result'
    to='mix.shakespeare.example'
    from='hag66@shakespeare.example/pda'
    id='7nve413p'>
  <register xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </register>
</iq>]]></example>
      <p>If the requested nick is already taken, the MIX service returns a &lt;conflict/&gt; error:</p>
      <example caption="Nick is Taken"><![CDATA[
<iq type='error'
    to='mix.shakespeare.example'
    from='hag66@shakespeare.example/pda'
    id='7nve413p'>
  <error type='cancel'>
    <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>]]></example>
      <p>If the register request does not contain a &lt;nick/&gt; element, then the MIX service assigns one.  It is recommended that the assigned nick is a UUID unique identifier following &rfc4122;.
</p>


    </section3>
    <section3 topic='Setting User Presence' anchor='usecase-user-presence'>
      <p>

        A user joins a channel over an extended period, and membership in a channel does not generally change when user goes online or offline.   The users  membership of the channel is reflected by the user's bare JID in the participant node.   All messages to the channel are sent to this JID.

      </p>
      <p>

        A user may share presence information with the channel, for one or more online clients.   Where a user shares presence information with a channel, the channel is entered by the user's server into the user's roster when the user subscribes to the channel.  When an XMPP client comes online or changes presence status, this will be communicated by the user to the user's server using broadcast presence.  The user's XMPP server is then responsible to share this presence information to each entry in the roster and in particular to each MIX channel in the roster.  The MIX channel will update the "urn:xmpp:mix:nodes:presence" node with any change of status and the updated presence information and then share this updated presence with users subscribed to this node, as described below.   When the user sets an explicit status, this is used to modify the presence node in the channel.   When a client being used by the user goes offline, the associated server will send presence status "unavailable" to the MIX channel, which will cause the full JID for that client to be removed from the presence node.
      </p>
      <p>
        A channel may require that all channel members share presence information with the channel, which is represented in the "urn:xmpp:mix:nodes:presence" node.   If sharing presences is required by the channel, an XMPP client conforming to this specification SHALL share presence with the channel by including the channel in the user's roster. Note that the MIX server cannot generally enforce this, but it can require and enforce that when a message is sent to the channel, that the sender of the message is in the presence list.
      </p>
      <p>
      Presence status and availability is set in a MIX channel by standard presence messages sent to the MIX channel by the user's server.   User's wishing to receive presence updates will subscribe to the MIX channel presence node.   Presence updates are sent out to subscribing using standard XEP-0045 compatible presence messages.
      </p>
      <p>
        A user setting status is now used as an example.   Unlike in &xep0045; where coming online is a special action, coming online in MIX is implicit when presence status is set.  Going offline is a achieved by setting presence status to unavailable, which removes the client full JID entry from the presence node.  When a user sets a presence status, the user's server sends updated presence to the MIX channel, and the MIX server then publishes the user's  availability to the "urn:xmpp:mix:nodes:presence" node. If there is not an item named by the full JID of the client with updated presence status, this item is created.   If there is not an item named by the full JID of the client with updated presence status, then an item is created.</p>
      <example caption="User Setting Presence Status"><![CDATA[
<presence xmlns='jabber:client' from=‘hag66@shakespeare.example/pda’ to='coven@mix.shakespeare.example'>
  <show>dnd</show>
  <status>Making a Brew</status>
</presence>]]></example>
      <p>The user's presence information is then published by the service to the "urn:xmpp:mix:nodes:presence" node, with the 'publisher' attribute set to the user's participant identifier (the proxy JID. The MIX channel then broadcasts the presence change to all users who are subscribed to the "urn:xmpp:mix:nodes:presence" node.  The presence message is sent from the proxy (anonymized) full JID of the user. </p>
      <example caption="Channel Distributes Presence"><![CDATA[
<presence from='coven+123435@mix.shakespeare.example/678'
          to='coven@mix.shakespeare.example'
          id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'>
  <nick xmlns='http://jabber.org/protocol/nick'>thirdwitch</nick>
  <show>dnd</show>
  <status>Making a Brew</status>
</presence>]]></example>
    <p>
     The presence is distributed to those subscribing to the MIX channel presence node using a standard XMPP presence message.   The presence change is recorded on the "urn:xmpp:mix:nodes:presence" node in the item for the full JID of the client to which the presence relates. The history of this node will be held as PubSub format in the MAM archive, so that presence history may be viewed.
    </p>
    </section3>

    <section3 topic="Coming Online: Obtaining Presence" anchor="usecase-obtaining-presence">
      <p>
        The presence information for a channel  is stored in the urn:xmpp:mix:nodes:presence node and distributed using standard presence messages to users subscribing to this presence node.  The user's server will then pass this presence information on to all online clients.   When a client goes offline, it will lose synchronization with the presence node.    When the client comes online, the clients server will send a directed presence message to the MIX channel.   This will happen as a consequence of the MIX channel being in the user's roster and the MIX channel sending a presence update to the MIX channel.  When the MIX channel adds or modifies presence for a client to the roster, this presence change will be distributed to all users subscribing to the presence node.
      </p>
      <p>
        When the full JID of a client is added to the MIX channel presence node and that full JID is not in the presence list, the MIX channel will send to the client presence for all of the items in the presence node using standard presence messages.  This will give the client full current presence.
      </p>
    </section3>

    <section3 topic="Determining Real JIDs" anchor="usecase-real-jids">
      <p>
        Presence information will provide a MIX client with the nicks and anonymized proxy JIDs for participants.   For JID visible rooms, the user may look up the real JID using the "urn:xmpp:mix:nodes:jidmap" node.   The items in this node are identified by proxy JID, and so the real JID can be retrieved using a straightforward PubSub query.    While a user may subscribe to the jidmap node, it is more likely to be used to directly look up JIDs as and when needed.
      </p>

    </section3>

    <section3 topic="Coming Online: Synchronizing Message History" anchor="usecase-sync-history">
      <p>
        A MIX client will typically display message history of the channel to the user.   When a client comes online it will need to obtain this message history from the MAM archive associated with the channel.  There are three basic approaches a client will take:
      </p>
      <ol>
        <li>If the client has previously displayed message history and has been offline for a reasonably small time, the client will wish to retrieve all messages since the last one displayed to the user.</li>
        <li>The client may wish to display a fixed number of messages, perhaps finding more messages if the client subsequently requests.</li>
        <li>The client may wish to display messages from a recent time period, perhaps finding more messages if the client subsequently requests.</li>
      </ol>
      <p>AUTHOR'S NOTE:  Examples to be added</p>
    </section3>


    <section3 topic='Going Offline' anchor='usecase-user-offline'>
      <p>When a client goes offline, this presence update is sent by the client's server to the MIX channel.   From the client perspective, this is the same as any other presence change.   Handling by the MIX channel is slightly different.</p>
      <example caption="Client Goes Offline in the Channel"><![CDATA[
<presence type='unavailable'
          from='hag66@shakespeare.example/pda'
          to='coven@mix.shakespeare.example'/>]]></example>
      <p>The MIX channel will retract (remove) the item in the presence node of the MIX channel identified by the client's full JID.  The MIX channel will notify subscribers to the presence node of the user going offline using a presence message from the proxy JID of the client.</p>
      <example caption="Channel Distributes Notification of Client going Offline"><![CDATA[
<presence from='coven+12345@mix.shakespeare.example/678'
          to='hecate@shakespeare.example'
          id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
          type='unavailable'/>]]></example>

      <p>
        There is the possibility that the message associated with the user going offline will be lost.   If this happens, "ghost" entries will appear in the presence node.   A MIX server may take steps to address this, for example by probing client with a disco for presence items that remain unchanged for a long period.
      </p>
      <p>
        It is desirable to prevent clients from going offline briefly and then coming back online again, as this will lead to "flapping presence".   The recommended approach to achieve this is use of &xep0198; to maintain an XMPP client connection in the event of short term TCP failure.
      </p>
    </section3>



    <section3 topic='Sending a Message' anchor='usecase-user-message'>
      <p>A user sends a message to a MIX channel as a standard groupchat message, in exactly the same way as for &xep0045;. </p>
      <example caption="User Sends Message to Channel"><![CDATA[
<message from='hag66@shakespeare.example/pda'
         to='coven@mix.shakespeare.example'
         id='92vax143g'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
</message>]]></example>
      <p>The message comes from the channel as a pubsub notification, with the 'publisher' attribute set to the participant identifier of the sender.</p>
      <example caption="Channel Reflects Message to Participants"><![CDATA[
<message from='coven+12345@mix.shakespeare.example/678'
         to='hecate@shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
</message>]]></example>
    </section3>

    <section3 topic="Retracting a Message" anchor="usecase-retract">
      <p>
        A MIX channel MAY support message retraction, where the sender of a messages deletes a messages from the message history and optionally replace it with another message.   This retraction mechanism will be based on the &xep0060; retract operation.   A client looking at message history may choose to look at "current state" which will show status after the retraction or "full history" which will include the message that was retracted.
      </p>
      <p>
        AUTHOR'S NOTE: Define new protocol to support this and add example.
      </p>
    </section3>
    <section3 topic='Inviting another user to joing a Channel' anchor='usecase-user-invite'>
      <p>When a channel member invites another user to join a channel, a sequence of steps are followed.

      </p>
      <ol>
        <li>The channel member sends to the channel requesting an invite for the user.</li>
        <li>The channel sends an invitation to the user requesting the invite.</li>
        <li>The channel member sends the invitation to the invitee.</li>
        <li>The invitee uses the invitation to construct a request to join the channel.</li>
      </ol>
      <p> AUTHOR'S NOTES AND QUESTION:   To be expanded considerably.   Dave (Cridland?) raised a point about contact preverification about users' invites.  If this is still relevant, please raise it again and we will consider how to address it. </p>
    </section3>


    <section3 topic='Sending Private Messages' anchor='usecase-user-private-messages'>

      <p>
        A user may add a proxy JID from the participants node of a MIX channel to the user's roster.  This will enable convenient communication with the user through the MIX channel, without the user knowing the real JID of the channel participant.
      </p>
      <p> AUTHOR'S NOTE:   To be expanded considerably. </p>
    </section3>



    <section3 topic="Requesting vCard" anchor="usecase-vcard">
      <p>A user may request the vCard of a channel participant by sending a requestion through the channel.</p>
      <p> AUTHOR'S NOTES:   To be expanded considerably. </p>
    </section3>
  </section2>



  <section2 topic="Use of MAM" anchor="use-mam">
    <p>
      All nodes of each MIX channel are archived using MAM.   Access to history in these nodes uses standard MAM protocol to access the channel nodes and to retrieve information from the nodes.   Information retrieved using MAM will be of the format stored on the node and will include &xep0060; PubSub wrapping.  MAM is the MIX mechanism to get at this information, in preference to direct use of PubSub.
    </p>
    <p>
      AUTHOR'S NOTE:  Add example of message retrieved using MAM, showing XEP-0060 wrapping
    </p>
    <p>
      There are XEPs that extend MAM and in some cases modify core MAM requirements.   Such XEPs may be used in conjunction with MAM, provided that they are supported by the MIX channel.   If such XEPs are used, the requirements specified MUST be followed.
    </p>
    <p>
      PubSub provides the ability to modify the state of the node, and distinguishes between current state and full history.   It is anticipated that MAM will be extended with an option to choose between "current state" and "full history".   This capability will be useful for and used by MIX.
    </p>
    <p>
      AUTHOR'S NOTE: This specification will be updated to reference this MAM extension when it is written.
    </p>

  </section2>


  <section2 topic='Administrative Use Cases' anchor='usecases-admin'>
    <section3 topic='Checking For Permission To Create a Channel' anchor='usecase-admin-check-create'>
      <p>
        MIX does not standardize an access control model for creating and deleting MIX channels.    The choice is left to the MIX implementer, and could be a very simple or complex approach.


      </p>
      <p>
        AUTHOR'S NOTE:   MIX Protocol to be added to create channel; check for permission to create channel; delete channel
      </p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Creating a Channel' anchor='usecase-admin-create'>
      <p>

       AUTHOR'S NOTE: Dave Cridland has suggested the following protocol.

        <![CDATA[
<iq to='mix.cridland.im' type='set'>
  <create channel='some-room-here@mix.cridland.im' xmlns='urn:xmpp:mix:0'>
    <optional-configuration-form/>
  </create>
</iq>]]>
      </p>
        <example caption="" ><![CDATA[

]]></example>

    </section3>


    <section3 topic='Creating a Channel for Ad Hoc User' anchor='usecase-admin-create-adhoc'>
      <p>
        Rooms may be created for ad hoc use between a set of users.  Channels of this nature will have channel name created by the server and will not be addressable or discoverable.
      </p>
      <example caption="" ><![CDATA[

]]></example>

    </section3>


    <section3 topic='Configuring a Channel' anchor='usecase-admin-'>
      <p>
        Channel jid is set on channel creation and may not be changed.   All other channel may be changed if channel configuration allows.
      </p>
      <p>

     AUTHOR'S NOTE:  Allow configuration by direct writes to 'urn:xmpp:mix:nodes:config' and ACL node.    Also specify MIX XEP-0004 commands to achieve this.


      </p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Destroying a Channel' anchor='usecase-admin-destroy'>
      <p>
        MIX channels are always explicitly destroyed by an owner of the channel or by a server operator.   There is no concept of temporary channel, equivalent to &xep0045; temporary room which is automatically destroyed by the server when the users leave.   However, channels may be configured with an explicit lifetime, after which the channel MUST be removed by the MIX server.   Where a channel is created for ad hoc use, it may be desirable to keep the channel for history reference or for re-use by the same set of users.


      </p>

      <p>Note that the owner of the channel does not need to have presence registered in the channel in order to destroy it.</p>
      <p>
        AUTHOR'S NOTE: More TBS


      </p>

        <example caption="" ><![CDATA[

]]></example>

    </section3>

    <section3 topic='Server Destroying a Channel' anchor='usecase-server-destroy'>
      <p>
       Servers may destroy channels which have no participants and/or presence according to local policy.   There will often be good reasons to not destroy rooms in these scenarios.

      </p>

    </section3>


    <section3 topic='Modifying User Affiliations' anchor='usecase-admin-affiliations'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Removing a User From a Channel (Kicking)' anchor='usecase-admin-kick'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>


    </section3>


  </section2>

</section1>




<!--<section1 topic='Implementation Notes' anchor='impl'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Accessibility Considerations' anchor='access'>
  <p>OPTIONAL.</p>
</section1>-->

 <section1  topic="Capabilities not provided in MIX" anchor="not-included-from45">
   <p>This section lists a number of capabilities not specified in this version of MIX which were provided in &xep0045;.   </p>
   <section2 topic="Password Controlled Channels" anchor="password-control">
     <p>
       &xep0045; provides a mechanism to control access to MUC rooms using passwords.  An equivalent mechanism is not included in MIX, as it has a number of security issues.  Control of access to channels is better achieved using an explicit members list.
     </p>
   </section2>

   <section2 topic="Conversion from 1:1 Chat" anchor="chat-conversion">
     <p>
       &xep0045; describes how to convert from a 1:1 chat to a MUC room.  Conversion from 1:1 chat is a straightforward and useful capability, that is not described in this version of the MIX specification.   Options that may be considered in the future are:
     </p>
     <ol>
       <li>Describe in a new separate XEP.</li>
       <li>Describe in an updated version of this XEP.</li>
       <li>Do not specify in a XEP and leave to implementer.</li>
     </ol>
     <p>QUESTION: Input on these choices is solicited.</p>
   </section2>

   <section2 topic="Voice Control" anchor="voice-control">
     <p>
       &xep0045; defines a mechanism so that MUC moderators can control who is able to send messages to a MUC room using a "voice" mechanism.  The current version of MIX does not include this.
     </p>
     <p>AUTHOR'S NOTE AND QUESTION: Input on the desirability of adding voice control to MIX is solicited.  It would appear reasonably straightforward, and probably be achieved by adding two additional nodes to the MIX channel.</p>
   </section2>

 </section1>

<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>TBD.</p>
  <p>Discuss normalization of nicknames.</p>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>TBD.</p>
  <p>Topics to cover:</p>
  <ul>
    <li>transparent vs. opaque channels</li>
    <li>nickname registration and security implications of normalization</li>
  </ul>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>None.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>Register a namespace.</p>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <p>TBD.</p>
</section1>
<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to the following who have made contributions: Dave Cridland, Philipp Hancke, Waqas Hussain, Ralph Meijer, Lance Stout, Sam Whited, and Matthew Wild.</p>
  <p>TEMPORARY NOTE: If you have been missed off, or know anyone who has been missed off, let Steve Kille know.</p>
</section1>
</xep>

<!--TODO: Query whole service for MAM. Provide data form for filtering by node ID.
TODO: Two config nodes - one public read one private read?
TODO: Open Issue: How many config nodes do you need? Do you do different access to different items within a node for reading? Writing?
TODO: Subscription option to check channel config (e.g., transparency of JIDs) before join.
-->
