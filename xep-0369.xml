<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<?xml-stylesheet type="text/css" href="xmpp.css"?>
<xep>
<header>
  <title>Mediated Information eXchange (MIX)</title>
  <abstract>This document defines Mediated Information eXchange (MIX), an XMPP protocol extension for the exchange of information among multiple participants through a mediating service. The protocol can be used to model group communication applications such as chatrooms, although with greater flexibility and extensibility than existing groupchat technologies such as Multi-User Chat (MUC). Although MIX supports standard groupchat features such as discussion topics and invitations, and also defines a strong access control model similar to that of MUC, it enables users to participate without sharing presence, allows communication of any structured data (not only textual messages), reuses Publish-Subscribe so that users can receive only the information formats in which they are interested, and reuses Message Archive Management (MAM) to provide more robust storage and archiving.</abstract>
  &LEGALNOTICE;
  <number>0369</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0313</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>MIX</shortname>
  &ksmithisode;
  &stpeter;
  <revision>
    <version>0.1</version>
    <date>2016-01-07</date>
    <initials>XEP Editor (asw)</initials>
    <remark><p>Initial published version approved by the XMPP Council.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2015-10-12</date>
    <initials>kis/psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>Multi-User Chat (MUC) is a major application of XMPP that was developed in 2002 and standardized in &xep0045;. This Mediated Infromation eXchange (MIX) protocol defined here implements the same basic MUC patterns in a more flexible and extensible way in order to address requirements that have emerged since MUC was developed. MIX supports all of the core chatroom features that are familiar from MUC, such as discussion topics and invitations. Like MUC, it also defines a strong access control model, including the ability to kick and ban users, to name moderators and administrators, and to require membership in order to participate in conversations. MIX is intended as a medium term replacement for MUC.</p>
  <p>MUC exists and works, so why replace it? There are several reasons:</p>
  <ul>
    <li>A number of use cases for group communication have emerged since MUC was first published.</li>
    <li>Experience has shown that it is difficult to use MUC to build several kinds of communication applications (such as a multimedia conference focus) without undesirable hacks.</li>
    <li>It is impractical to address a number of the requirements listed in the next section with MUC or with extensions to MUC. </li>
    <li>In the years after MUC was designed, both &xep0060; and &xep0313; have been developed and it is desirable to reuse these building blocks (e.g., MAM can be used for message history) rather than use the less robust methods defined in &xep0045;.</li>
  </ul>
  <p>Because it is anticipated that there will significant co-existence between MUC and MIX, this specification is designed so that:</p>
  <ul>
    <li>XMPP clients can implement MUC and this specification in a way that provides a coherent user experience.</li>
    <li>XMPP servers can implement this specification and also provide a MUC interface in order to support clients that only implement MUC.</li>
  </ul>
  <p>If a server wishes to expose both MUC and MIX representations of chatrooms, it SHOULD do so by serving MUC and MIX on different domains. The MIX service SHOULD include a reference to the MUC mirror, so that clients understanding both protocols can choose to only show one copy of the service.</p>
</section1>

<section1 topic='Requirements' anchor='reqs'>
  <ul>
    <li>Participation in a conversation can persist beyond clients being offline.</li>
    <li>Multiple devices associated with the same account can share the same handle in the conversation, with well-defined rules and all resources individually addressable.</li>
    <li>Conversations are not required to support or reflect presence for participants.</li>
    <li>A client that rejoins a conversation can quickly resync with respect to messages.</li>
    <li>A participant can be an invisible observer.</li>
    <li>Configuration can be observed from outside the conversation (e.g., list of participants, ability to reading messages, etc.).</li>
    <li>MIX services should not allow JIDs to be harvested.</li>
    <li>Play nicely with Message Archive Management (MAM).</li>
    <li>A user can know which conversations they participate in, globally across all MIX services.</li>
    <li>Provide extensibility regarding data formats that can be sent within a conversation (files, structured data, indications about media sources in multimedia conferences, etc.) as well as flexibility regarding which data formats a user wants to receive.</li>
    <li>(Desirable) Make it easier to distribute a conversation across services in the spirit of "federated MUC" &xep0289;.</li>
    <li>(Desirable) Make it easier to reduce duplicate traffic.</li>
 </ul>
</section1>

<section1 topic='Concepts' anchor='reqs'>
  <p>The following concepts underlie the design of MIX.</p>
  <ul>
    <li>MIX channels (roughly equivalent to MUC rooms) are hosted on a MIX domain, e.g., `mix.example.com`, which is discoverable through &xep0030;. Each channel on the service may then be discovered and queried.</li>
    <li>Re-using the model from &xep0163; (where every user JID (e.g., `user@example.com`) is its own pubsub service), in MIX each channel (e.g., `channel@mix.example.com`) is a pubsub service.</li>
    <li>A channel's pubsub service can contains any number of nodes for different event types or data formats. As described below, this document defines several standard nodes; however, future specifications or proprietary services can define their own nodes for extensibility.</li>
    <li>Affiliations with the nodes are, by default, tied together as affiliations on the channel itself rather than individual PubSub nodes, so that allowing or denying access to a channel is a single affiliation change.</li>
    <li>&xep0313; (MAM) is used for all history access, with each node being individually addressable for MAM queries. This simplifies implementation compared to MUC (which had a specialized and rather limited history retrieval mechanism).</li>
    <li>A client can achieve a 'quick resync' of a node by requesting just those changes it has not yet received, using standard MAM protocol. This solves the old MUC issue of either receiving duplicate messages when rejoining a room or potentially missing messages.</li>
    <li>Because MAM is used for history, only those nodes that have a 'current value' need to store any items in them - e.g., 'urn:xmpp:mix:nodes:presence' and 'urn:xmpp:mix:nodes:subject' would store their current values (with older values being queryable through MAM), while 'urn:xmpp:mix:nodes:messages' would store no items.</li>
    <li>A user's participation in a conversation outlives their presence session. A user who is offline will not share presence within the conversation, but will still be listed as an participant. This too is a significant departure from MUC.</li>
    <li>MIX decouples addressing of occupants from their nicknames, such that nickname changes don't affect addressing, adding flexibility.</li>
    <li>Each particapant is addressible by a single JID, which is a proxy JID (not the user's real JID) to make it straightforward to hide the user's real JID from other channel participants. These are full JIDs, allowing transparency when a user has multiple online resources participating in the MIX.</li>
  </ul>
  <section2 topic="MIX and PubSub" anchor="concepts-pubsub">
    <p>MIX is based upon domains providing a MIX service, such as `mix.shakespeare.example`. Note that although PubSub communication is used, a domain used for MIX is a MIX domain and not a standard &xep0060; domain. (Note that, like in MUC, there is no requirement on the naming of these domains; the label 'mix' and the fact that it is a subdomain of a 'shakespeare.example' service is purely an example).</p>
    <p>Every MIX channel is an addressable PubSub service (with additional MIX semantics) that will be addressed by an XMPP client using a bare JID, for example coven@mix.shakespeare.example. While &xep0060; is used as the basis for the MIX model, some protocol is added or optimised in this document for the MIX use cases. For example, when a message is published to the 'urn:xmpp:mix:nodes:messages' node, a message unlike a &xep0060; payload is distributed to occupants (more akin to the old &xep0045;); this enables standard XMPP semantics of message stanzas to be used.</p>
  </section2>
  <section2 topic="MIX and MAM" anchor="concepts-mam">
    <p>Message Archive Management is used for all storage of historical data (such as the history of messages sent within the conversation). Each node can be archived separately (e.g., the presence node or the configuration node). MIX clients can retrieve information archived in MAM in order to quickly resync with regard to a conversation, and can do so without necessarily providing presence information.</p>
  </section2>
  <section2 topic="Delivering Messages to Users" anchor="concepts-delivery">
     <p>
       The primary model is that a user will join a channel over an extended period, and that the user (not a specific client) joins the channel.  The primary subscription is with the clients bare JID.  The user will access the channel from time to time with one or more clients.
     </p>
    <p>
      Where a user has no clients active, the approach expected by MIX is that messages will be archived using MAM and that when clients come online they will use MAM to access messages that have not been delivered to the client.   Offline messages are not used with MIX.
    </p>
    <p>
      Online clients are handled use "XEP-xxxx: Pubsub Account Management" http://xmpp.org/extensions/inbox/pubsub-account.html .  NOTE: [This specification is a key dependency of MIX and needs to be completed for MIX to work as intended].    The model is that the server will know which of the users clients are interested in MIX messages, possibly filtered by MIX channel, and will deliver messages appropriately to these clients.  MIX will simply send messages to the user's serever addressed with the bare JID of the user.   The user's server will then deliver messages to the user's clients, in a manner that is transparent to the MIX server.
    </p>
  </section2>
  <section2 topic="User Presence in MIX" anchor="concepts-presence">
    <p>
      MIX channels handle presence based on all clients for the user.   User presence may be included for all or selected clients of a given user, based on client choice to publish presence.    Where a user publishes presence for multiple clients, this information is available to all users subscribing the the channel presence.   Private messaging and vCard requests will be directed to a specific client, routing through the MIX channel.   
    </p>
  </section2>
  <section2 topic="Proxy JIDs and JID Visibility" anchor="proxy-jid">
    <p>
      MIX channels have two modes controlling JID visibility:
    </p>
    <ul>
      <li>'JID Visible': In these channels, some or all participant JIDs are visible to all channel members.</li>
      <li>'JID Hidden': In these channels, no participant JIDs are visible to channel members, but they are visible to channel moderators.</li>
    </ul>
    <p>
      A channel member may specify their preferences for JID visibility, with one of the following values:
    </p>
    <ul>
      <li>'No JID Visibility Preference': The users JID will be visible in JID Visible channels and hidden in JID Hidden channels.</li>
      <li>'Prefer Hidden': The user's JID will be hidden in JID Visible channels if the channel policy allows this.</li>
      <li>'Enforce Hidden': The user's JID will never be shown and the user will be removed from channel if channel moderator enforces visibility.</li>
      <li>'Enforce Visible': The users JID will always be shown and the user will be removed from channel if mode is changed to 'JID Hidden'.</li>
    </ul>
    <p>
      The primary representation of a participant in a MIX channel is a proxy JID, which is a random JID using the same domain as the channel.   For example in the channel 'coven@mix.shakespeare.example',   the user 'hag66@shakespeare.example' might have a proxy JID of '123456@mix.shakespeare.example'.   The reason for the proxy JID is to support JID Hidden channels.   Proxy JIDs are also used in JID Visible channels, to enable easy switching of JID visibility.
    </p>
     <p>
       When a user joins a channel with a full JID, this MUST be mapped to a full Proxy JID.   This is important for supporting a user joining a channel with multiple clients.   When this mapping is made, the resource is also mapped to a randomized resource as part of the proxy JID.
     </p>
  </section2>
  <section2 topic="Standard Nodes" anchor="concepts-nodes">
    <p>The standard nodes are as follows (although note that not every conversation will necessarily use each node):</p>
    <ul>
      <li>'urn:xmpp:mix:nodes:messages' for publishing messages. Each item of this node will contain one message, containing each of the distributed payloads.</li>
      <li>'urn:xmpp:mix:nodes:subject' for publishing the subject of the conversation.</li>
      <li>'urn:xmpp:mix:nodes:participants' for publishing the list of participants (identified by bare JID), and identifying the nick.  This is the list of clients to which messages to the channel are sent, and is independent of presence.</li>
      
      <li>'urn:xmpp:mix:nodes:presence' for publishing information about the availability status of online participants, which may include multiple clients for a single participant. This is a significant departure from MUC, where occupancy and presence were tightly coupled. In MIX it is possible to have a 'presenceless conversation' by not using this node. This is significant difference to MUC (where a participant is active in the room from multiple resources). In MIX, information about the presence of each resource associated with an account is individually available as an item in the node.  For each of the full JIDs in this list, the bare JID MUST be in the participants list.</li>
      
      <li>'urn:xmpp:mix:nodes:jidmap' for publishing a list of anonymized JIDs with a 1:1 mapping with the presence node.   Each item is identified by proxy JID, mapping to the real JID.  Access to this node will be limited to those who allowed to see the real JID.  This will be moderators in all channels and all participants in jid-visible channels.</li>
      <li>'urn:xmpp:mix:nodes:config' for storing configuration information. In another departure from MUC, by storing configuration in the same manner as other data, it is possible to tweak access rights such that participants are able to read the configuration if desired. A further benefit is that notifications of configuration changes fall out "for free".</li>
      <li>'urn:xmpp:mix:nodes:acl' for storing information about access control lists (such as the list of owners and moderators). This information will generally be restricted to authorized users.</li>
    </ul>
    <p>
      The structure of each of the standard nodes is now considered in more detail
    </p>
    <section3 topic="Messages Node" anchor="messages-node">
      <p>Items in this node will contain a message idetified by a unique ID.  A MIX implementation SHOULD NOT make messages available for retrieval from this node using pubsub.  The recommended approach is that zero history is held in the messages node, and that this node is used for publication only.   The recommended approach to retrieve message history is MAM. </p>
    </section3>
    <section3 topic="Subject Node" anchor="subject-node">
      <p>The subject node publishes the current subject of conversation.  Subject history is stored in MAM.    Items in the node use the item id to represent the subject and do not contain a value.  History SHOULD be set to 1.</p>
      <example caption="Subject Node"><![CDATA[
    <items node='urn:xmpp:mix:nodes:subject'>
      <item id='A better brew' />
      <item id='How to use Toads' />
    </items>
      ]]></example>   
    </section3>
    <section3 topic="Participants Node" anchor="participants-node">
      <p>Each channel participant is represented as an item of the 'urn:xmpp:mix:nodes:participants' channel node.   Each item is named by the bare JID of the particpant.   For example '123456@mix.shakespeare' might name the node item associated with participant 'hag66@shakespeare.exmaple'.  The nick associated with the user is mandatory and is stored in the item.
      *** Kev notes possible requirment to mandate format of Nick ***
      
      </p>
      <example caption="Value of Participants Node"><![CDATA[
    <items node='urn:xmpp:mix:nodes:participants'>
      <item id='123456@mix.shakespeare.example/8765'>
        <participant xmlns='urn:xmpp:mix:0'
                     nick='thirdwitch'/>
      </item>
    </items>
      ]]></example>
    </section3>
    <section3 topic="JID Map Node" anchor="jid-map-node">
      <p>The JID Map node is used to map from proxy JID to real JID.   In JID visible channels, all participants may subscribe to this node.  In JID hidden channels, only administrators can subscribe.  Items in the node are names by the proxy JID and the item contains the real JID.</p>
      <example caption="Value of JID Map Node"><![CDATA[
    <items node='urn:xmpp:mix:nodes:jidmap'>
      <item id='123456@mix.shakespeare.example/8765'>
        <participant xmlns='urn:xmpp:mix:0'
                     jid='hecate@mix.shakespeare.example/pda'/>
      </item>
    </items>
      ]]></example>
    </section3>
    <section3 topic="Presence Node" anchor="presence-node">
      <p>The presence node contains the presence value for participants that choose to publish presence to the channel.   A MIX channel may require that all participants publish presence.  Each item in the presence node is identified by the proxy JID, and contains the current presence value for that JID.  The presence is encoded in the same way as data that would be sent in a presence message.  Full JID is always used in this node.
      </p>
      <example caption="Value of Presence Node"><![CDATA[
    <items node='urn:xmpp:mix:nodes:presence'>
      <item id='123456@mix.shakespeare.example/8765'>  
        <presence>
          <show>dnd</show>
          <status>Making a Brew</status>
        </presence>
      </item>
    </items>
      ]]></example>
    </section3>
    <section3 topic="Configuration Node" anchor="config-node">
      <p>TBS</p>
    </section3>
    <section3 topic="ACL Node" anchor="acl-node">
      <p>TBS</p>
    </section3>
   
  </section2>
</section1>

<section1 topic='Discovery' anchor='discovery'>
  <section2 topic='Discovering a MIX service' anchor='disco-service'>
    <p>To determine if a domain hosts a MIX service, a &xep0030; info query should be sent in the usual manner</p>
      <example caption="Entity queries a service" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <p>The MIX service then MUST return its identity and the features it supports, which MUST include the 'urn:xmpp:mix:0' feature, and the identity MUST have a category of 'conference' and a type of 'text'. TODO: do we want a different type?</p>
    <example caption="Service responds with Disco Info result" ><![CDATA[
<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='urn:xmpp:mix:0'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>urn:xmpp:mix:0#serviceinfo</value>
      </field>
      <field var='urn:xmpp:mix:nodes:muc_mirror'
             label='Location of MUC mirror service'>
        <value>chat.shakespeare.example</value>
      </field>
    </x>
  </query>
</iq>
]]></example>
    <p>If the MIX service is mirrored to a MUC service for backwards-compatibility, this SHOULD be signaled by the inclusion of a 'urn:xmpp:mix:nodes:muc_mirror' field, the value of which is the mirrored MUC domain, in the extended disco results in a form whose type value is 'urn:xmpp:mix:0#serviceinfo'. Note that the MIX service itself doesn't advertise support for &xep0313;, nor is support for generic &xep0060; advertised.</p>
  </section2>
  <section2 topic='Discovering the Conversations on a Service' anchor='disco-conversation-list'>
    <p>There is no need for using Service Discovery here, since the MIX service provides a node "urn:xmpp:mix:nodes:conversations" that pushes out one event for each conversation that has been created at the service.</p>
  </section2>
  <section2 topic='Discovering Conversation Information' anchor='disco-conversation-info'>
    <p>In order to find out more information about a given conversation, a user can send a disco#info query to the conversation.</p>
    <example caption='Entity Queries for Information about a Specific Conversation'><![CDATA[
<iq from='hag66@shakespeare.lit/pda'
    id='ik3vs715'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
    ]]></example>
    <p>The conversation MUST return its identity and the features it supports:</p>
    <example caption='Conversation Returns Disco Info Result'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='ik3vs715'
    to='hag66@shakespeare.lit/pda'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='A Dark Cave'
        type='mix'/>
    <feature var='urn:xmpp:mix:0'/>
  </query>
</iq>
    ]]></example>
  </section2>
  <section2 topic='Discovering Nodes at a Conversation' anchor='disco-conversation-nodes'>
    <p>Use disco#items to find the nodes associated with a conversation.</p>
    <example caption='Entity Queries for Nodes at a Conversation'><![CDATA[
<iq from='hag66@shakespeare.lit/pda'
    id='kl2fax27'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>
    ]]></example>
    <example caption='Room Returns Disco Items Result'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='kl2fax27'
    to='hag66@shakespeare.lit/pda'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:presence'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:participants'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:messages'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:subject'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:config'/>
  </query>
</iq>
    ]]></example>
  </section2>
  <section2 topic='Discovering Participants in a Conversation' anchor='disco-conversation-participants'>
    <p>*Not* done with disco#items (which returns nodes), instead query items on the "urn:xmpp:mix:nodes:participants" node (if you're allowed).</p>
  </section2>
</section1>

<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Common User Use Cases' anchor='usecases-user'>
    <section3 topic='Joining a Channel' anchor='usecase-user-join'>
      <p>A user joins a channel by sending a MIX "join" command. There's no default set of nodes: all nodes must be specified if the user wants that information (but clients should select the standard MIX ones at least by default for normal usage). This will lead to the server subscribing the user to each of the requested nodes associated with the channel. The MIX server will also add the user to the particioant list by injecting a new item into the "urn:xmpp:mix:nodes:participants" node automatically. </p>
      
        <example caption="User Joins a Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
    <subscribe node='urn:xmpp:mix:nodes:config'/>
  </join>
</iq>
]]></example>
      <p>The channel must process the join atomically. The channel responds with an IQ-result. This stanza includes the nodes to which the user has been successfully subscribed, as well as the bare JID that will be used for the user in this channel and added to the participant list.  If a user cannot be subscribed to one or more of the requested nodes (e.g., because the node does not exist), but can be subscribed to some the response simply lists the nodes successfully subscribed.    If none of the nodes requested are successully subscribed to, and error response is sent indicating the reason that the first node requested was not subscribed to.   This response will also include other nodes requested where subscription failed for the same reason.  A user may subsequently request subscription to nodes in a channel to which the user was not initially subscribed.  </p>
      <example caption="Conversation Successfully Processes Join"><![CDATA[
<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example/pda'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
    <subscribe node='urn:xmpp:mix:nodes:config'/>
  </join>
</iq>
      ]]></example>
      <p>As noted, the participant might not be subscribed to all nodes associated with the channel (in this case only messages, participants, and subject).</p>
      <example caption="Channel Processes Join With Modifications"><![CDATA[
<iq type='result'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
  </join>
</iq>
      ]]></example>
      <p>*** This should only be for JID Visible.  Checking with Kev **** The channel also adds the user to the participants node and sends a notification.</p>
      <example caption="Conversation Adds User to Participants Node"><![CDATA[
<message from='coven@mix.shakespeare.example'
         to='hecate@shakespeare.example'
         id='5A9C7398-DB13-4BFA-A091-2D466C710AAF'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <item id='123456@mix.shakespeare.example'>
        <participant xmlns='urn:xmpp:mix:0'
                     nick='thirdwitch'/>
      </item>
    </items>
  </event>
</message>
      ]]></example>
      <p>The user that has been added to the channel is identified by the item id of the item added to the pubsub node, which is the proxy JID of the new channel participant. Each &lt;participant&gt; element will include the nick of the user being added, which will be how the user will typically be shown in the channel.</p>
    </section3>
    
    

    <section3 topic='Leaving a Channel' anchor='usecase-user-leaving'>
      <p>Users generally remain in a channel for an extended period of time.  In particular membership of the channel does not change when the user goes offline as happens with &xep0045;. So, leaving the conversation is a permanent action for a user across all clients, not just a matter of telling the conversation that the user is not currently available or for a single client.  In order to  leave a channel, a user sends a MIX "leave" command to the channel.</p>
      <example caption="User Leaves a Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <leave xmlns='urn:xmpp:mix:0'/>
</iq>
      ]]></example>
      <p>When the user leaves the channel, the MIX service is responsible for unsubscribing the user from all nodes in the channel and for removing the user from the participants and presence list.  If the user has online presence when the user leaves the channel, the change of presence status caused by removing the user's entry or entries from the presence node will ensure that subscribers to the presence node are correctly updated on presence status.
        
        
        Deletion from the participants and presence functions as if the item (channel member) had been deleted using the PubSub retract mechanism with notification set to true.    Notification of the deletion is sent to clients subscribed to the participants  PubSub nodes, as shown in the example below.  **** Again, only for Visible Lists ****
        </p>
      <example caption="Reporting when User Leaves a Channel"><![CDATA[
        <message from='coven@mix.shakespeare.example' to='hecate@shakespeare.example' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <retract id='123456@mix.shakespeare.example/8765'/>
    </items>
  </event>
</message>
        
      <message from='coven@mix.shakespeare.example' to='hecate@shakespeare.example' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:presence'>
      <retract id='123456@mix.shakespeare.example/8765'/>
    </items>
  </event>
</message>
      ]]></example>
      
    </section3>
    
    <section3 topic="Setting a Nick" anchor="usecase-setting-nick"></section3>
    <p>
      Each member of a channel may have a nick, which is how other users in the channel will see the user.  In some cases a nick is not needed, for example where a user reads messages in a channel but does not send messages or share presence information.    A nick MUST be present for a user to send a message to a channel or for a user's presence to be shared on a channel.   There are four ways that a user's nick can be obtained.   The choice of mechanism or mechanisms is dependent on channel policy:
    </p>
    <ol>
      <li>The nick is registered with the user account in some way, for example as part of user provisioning with nick configured as an attribute in a directory service.   This may be chosen by corporate services that wish to ensure consistent nick values for a set of users and channels.</li>
      <li>The nick is registered with the MIX service, as described in  <link url='#usecase-user-register'> Registering a Nick </link>.</li>
      <li>The user explicitly sets the nick, as described in this section.</li>
      <li>The MIX service generates the nick.  In this case it is recommended that the assigned nick is a UUID unique identifier following &rfc4122;.  *** REVIEW use of UUID.  Can it make sense for other algorithsms, such as a string from the JID ****</li>
    </ol>
    <p>
   A user will typically set a nick when joining a channel and may update this nick from time to time.   The user does this by sending a command to the channel to set the nick.  If the user wishes the channel to assign a nick (or knows that the channel will assign a nick) the nick field can be left blank, so that the user can see what is assiged in the result. 
    </p>  
    <example caption="User sets Nick on Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </query>
</iq>
      ]]></example>
    
    <p>
      The channel will return the nick that is to be used, noting that this may be different to the reqested nick.   MIX services SHOULD apply the "nickname" profile of the PRECIS OpaqueString class, which is defined in draft-ietf-precis-nickname.
    </p>
    
    <example caption="Channel informs user of Nick"><![CDATA[
<iq type='result'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </query>
</iq>
      ]]></example>
    <section3 topic='Registering a Nick' anchor='usecase-user-register'>
      <p>A user can register a nick with either the MIX service.  Nick registration can be used ensure that a user is able to use the same nick in all channels in the service and to prevent other users from using a registered nick.   This can help achieve a consistent experience across a set of channels and prevent user confusion.  Support for nick registration by a MIX service is optional.  Where nick registration is supported, nick registration may be optional or mandatory.
        Where a user has registered a Nick with the MIX service, it may be used by each channel according to policy for the channel.   A Nick is associated with the user's bare JID.
      </p>  
      <p>
        In order to determine if a Nick may be registered, the user may use disco to determine capabilities of the MIX service.
      </p>
      <example caption="User Determines features of the MIX service"><![CDATA[
<iq type='get'
    from='hag66@shakespeare.example/pda'
    to='mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
      ]]></example>
      <p>
        The response will be a list of features of the MIX channel.  If Nick Registration is supported, then the result set will include &lt;feature var="mix_nick_register"/&gt;.
      </p>
      <p>
        To register a nick with the MIX service the user sends 
 a &lt;register/&gt; command to the service. </p>
      <example caption="User Registers with Service"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='mix.shakespeare.example'
    id='7nve413p'>
  <register xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </register>
</iq>
      ]]></example>
      <p>On success, the service informs the user of its nick. The nick that is issued might be different from the nick that was requested, for example if the service completes normalization of nicknames for purposes of internationalization.</p>
      <p>MIX services SHOULD apply the "nickname" profile of the PRECIS OpaqueString class, which is defined in draft-ietf-precis-nickname.</p>
      <example caption="Service Returns User of Nick"><![CDATA[
<iq type='result'
    to='mix.shakespeare.example'
    from='hag66@shakespeare.example/pda'
    id='7nve413p'>
  <register xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </register>
</iq>
      ]]></example>
      <p>If the requested nick is already taken, the MIX service returns a &lt;conflict/&gt; error:</p>
      <example caption="Nick is Taken"><![CDATA[
<iq type='error'
    to='mix.shakespeare.example'
    from='hag66@shakespeare.example/pda'
    id='7nve413p'>
  <register xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </register>
  <error type='cancel'>
    <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
      ]]></example>
      <p>If the register request does not contain a &lt;nick/&gt; element, then the MIX service assigns one.  It is recommended that the assigned nick is a UUID unique identifier following &rfc4122;.
</p>
    
      
    </section3>
    <section3 topic='Setting User Presence' anchor='usecase-user-presence'>
      <p> 
   
        A user joins a channel over an extended period, and membership in a channel does not generally change when user goes online or offline.   The users  membership of the channel is reflected by the user's bare JID in the participant node.   All messages to the channel are sent to this JID.
        
      </p>
      <p>
        
        A user may share presence information with the channel, for one or more online clients.   Where a user shares presence information with a channel, the channel is entered by the user's server into the user's roster when the user subscribes to the channel.  When an XMPP client comes online or changes presence status, this will be communicated by the user to the user's server using broadcast presence.  The user's XMPP server is then responsible to share this presence information to each entry in the roster and in particular to each MIX channel in the roster.  The MIX channel will update the "urn:xmpp:mix:nodes:presence" node with any change of status and the updated presence information and then share this updated presence with users subscribed to this node, as described below.   When the user sets an explicit status, this is used to modify the presence node in the channel.   When a client being used by the user goes offline, the assocaited server will send presence status "unavailable" to the MIX channel, which will cause the full JID for that client to be removed from the presence node.
      </p>
      <p>
        A channel may require that all channel members share presence information with the channel, which is represented in the "urn:xmpp:mix:nodes:presence" node.   If sharing presences is required by the channel, an XMPP client conforming to this specification SHALL share presence with the channel by including the channel in the user's roster. Note that the MIX server cannot generally enforce this, but it can require and enforce that when a message is sent to the channel, that the sender of the message is in the presence list.
      </p>
      <p>
      Presence status and availability is set in a MIX channel by standard presence messages sent to the MIX channel by the user's server.   User's wishing to receive presence updates will subscribe to the MIX channel presence node.   Presence updates are sent out to subscribing using standard XEP-0045 compatible presence messages, and not using PubSub protocol.
      </p>
      <p>
        A user setting status is now used as an example.   Unlike in &xep0045; where coming online is a special action, coming online in MIX is implicit when presence status is set.  Going offline is a achieved by setting presence status to unavailable, which removes the client full JID entry from the presence node.

When a user sets a presence status, the user's server sends updated presense to the MIX channel, and the MIX server then publishes the user's  availability to the "urn:xmpp:mix:nodes:presence" node. If there is not an item named by the full JID of the client with updated presence status, this item is created.   If there is not an item named by the full JID of the client with updated presence status, then an item is created.</p>
      <example caption="User Setting Presence Status"><![CDATA[

        <presence xmlns='jabber:client' from=‘hag66@shakespeare.example/pda’ to='coven@mix.shakespeare.example'>
          <show>dnd</show>
          <status>Making a Brew</status>
        </presence>
      
      ]]></example>
      <p>The user's presence information is then published by the service to the "urn:xmpp:mix:nodes:presence" node, with the 'publisher' attribute set to the user's participant identifier (the proxy JID. The MIX channel then broadcasts the presence change to all users who are subscribed to the "urn:xmpp:mix:nodes:presence" node.   </p>
      <example caption="Channel Distributes Presence"><![CDATA[
<presence from='mix.shakespeare.example'
         to='coven@mix.shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'>
          <nick xmlns='http://jabber.org/protocol/nick'>thirdwitch</nick>
          <show>dnd</show>
          <status>Making a Brew</status>
        </presence>
 
      ]]></example>
    <p>
     The presence is distributed to those subscribing to the MIX channel presence node using a standard XMPP presence message and NOT using PubSub.   The presence change is recorded on the "urn:xmpp:mix:nodes:presence" node in the item for the full JID of the client to which the presence relates. The history of this node will be held as PubSub format in the MAM archive, so that presence history may be viewed.
    </p>  
    </section3>
    <section3 topic='Going Offline' anchor='usecase-user-offline'>
      <p>When a client goes offline, this presence update is sent by the client's server to the MIX channel.   From the client perspective, this is the same as any other presence change.   Handling by the MIX channel is slightly different.</p>
      <example caption="Client Goes Offline in the ChAannel"><![CDATA[
<presence type='unavailable'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'/>
      ]]></example>
      <p>The MIX channel will retract (remove) the item in the presence node of the MIX channel idenfified by the client's full JID.  The MIX channel will notify subscribers to the presence node of the user going offline using a presnece message.</p>
      <example caption="Channel Distributes Notification of Client going Offline"><![CDATA[
<presence from='mix.shakespeare.example'
         to='coven@mix.shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'>
          type=unavailable
        </presence>
 
      ]]></example>
    </section3>
    <section3 topic='Sending a Message' anchor='usecase-user-message'>
      <p>A user sends a message by publishing it to messages node. TODO: List discussion about type=groupchat messages vs. xep60 publish.</p>
      <example caption="User Sends Message to Conversation"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/pda'
    to='coven@mix.shakespeare.example'
    id='92vax143g'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:mix:nodes:messages'>
      <item>
        <body xmlns='jabber:client'>Harpier cries: 'tis time, 'tis time.</body>
      </item>
    </publish>
  </pubsub>
</iq>
      ]]></example>
      <p>The message comes from the conversation as a pubsub notification, with the 'publisher' attribute set to the participant identifier of the sender.</p>
      <example caption="Conversation Reflects Message to Participants"><![CDATA[
<message from='mix.shakespeare.example'
         to='hecate@shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:messages'>
      <item id='bnd81g37d61f49fgn581'
            publisher='3608A5E0C4C8'>
        <body xmlns='jabber:client'>Harpier cries: 'tis time, 'tis time.</body>
      </item>
    </items>
  </event>
</message>
      ]]></example>
    </section3>  
    
    
    <section3 topic='Inviting a Contact To a Conversation' anchor='usecase-user-invite'>
      <p>User sends to conversation requesting invite, receives it, forwards it to contact. Solves issues with both directed and mediated invites. ### TODO: Dave had a point about contact preverification about users' invites. Discuss.</p>
    </section3>
    <section3 topic='Sending Private Messages' anchor='usecase-user-private-messages'>
      <p>Users' JIDs are available from the "urn:xmpp:mix:nodes:participants" node if the conversation is transparent.</p>
    </section3>
  </section2>

  <section2 topic='Administrative Use Cases' anchor='usecases-admin'>
    <section3 topic='Checking For Permission To Create a Conversation' anchor='usecase-admin-check-create'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Creating a Conversation' anchor='usecase-admin-create'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Configuring a Conversation' anchor='usecase-admin-'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Destroying a Conversation' anchor='usecase-admin-destroy'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Modifying User Affiliations' anchor='usecase-admin-affiliations'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Removing a User From a Conversation (Kicking)' anchor='usecase-admin-kick'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>

  </section2>

</section1>

<section1 topic='Configuration options' anchor='config'>
  <section2 topic='Transparency' anchor="config-transparency">
    <p>TODO: transparent vs. opaque conversations</p>
  </section2>
</section1>

<!--<section1 topic='Business Rules' anchor='rules'>
  <ul>
    <li>.</li>
  </ul>
</section1>-->
<!--<section1 topic='Implementation Notes' anchor='impl'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Accessibility Considerations' anchor='access'>
  <p>OPTIONAL.</p>
</section1>-->
<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>TBD.</p>
  <p>Discuss normalization of nicknames.</p>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>TBD.</p>
  <p>Topics to cover:</p>
  <ul>
    <li>transparent vs. opaque conversations</li>
    <li>nickname registration and security implications of normalization</li>
  </ul>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>None.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>Register a namespace.</p>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <p>TBD.</p>
</section1>
<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to the participants in XMPP Summit 18 for their significant input during design sessions: Dave Cridland, Philipp Hancke, Waqas Hussain, Lance Stout, Sam Whited, and Matthew Wild.</p>
</section1>
</xep>

<!--TODO: Query whole service for MAM. Provide data form for filtering by node ID.
TODO: Two config nodes - one public read one private read?
TODO: Open Issue: How many config nodes do you need? Do you do different access to different items within a node for reading? Writing?
TODO: Subscription option to check conversation config (e.g., transparency of JIDs) before join.
-->
