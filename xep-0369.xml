<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<?xml-stylesheet type="text/css" href="xmpp.css"?>
<xep>
<header>
  <title>Mediated Information eXchange (MIX)</title>
  <abstract>This document defines Mediated Information eXchange (MIX), an XMPP protocol extension for the exchange of information among multiple users through a mediating service. The protocol can be used to provide human group communication and communication between non-human entities using channels, although with greater flexibility and extensibility than existing groupchat technologies such as Multi-User Chat (MUC).   MIX uses Publish-Subscribe to provide flexible access and publication, and uses Message Archive Management (MAM) to provide storage and archiving. </abstract>
  &LEGALNOTICE;
  <number>0369</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0128</spec>
    <spec>XEP-0313</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>MIX</shortname>
  &ksmithisode;
  &skille;
  &stpeter;

  <revision>
    <version>0.6.1</version>
    <date>2016-12-05</date>
    <initials>sek</initials>
    <remark><p>
      Clarify Direct PubSub access to each node type  
    </p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2016-12-02</date>
    <initials>sek (XEP Editor: ssw)</initials>
    <remark><p>
     Added Internationalization Consideration section, and various I18n edits;
     Added Security Considerations section;
     Tombstoning of Redaction changes made optional;
     Added a section specifying MIX Proxy;
     Change configuration and information node management to directly use PubSub;
     Provide for XEP-0202 (vCard4 over XMPP) in addition to vcard-temp support.
    </p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2016-11-04</date>
    <initials>sek (XEP Editor: ssw)</initials>
    <remark><p>
      Complete and restructure Administration Section: Creating Channels and modifying configuration;
      Add avatar nodes;
      Add section on roster handling;
      Discovering MIX Services;
      Resolve questions on future capabilities;
      Administration of Allowed/Banned; clarify Kick functionality is replaced;
      User Presence Probes on Channel Start-up;
      Add user Presence preference;
      Clarify and Expand MAM Archiving;
      Sort Retraction;
      Add Marker IQ;
      Conversion 1:1
    </p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2016-09-21</date>
    <initials>sek</initials>
    <remark><p>Clarification of MIX Proxy concept; Clarify node definitions; Make all nodes optional; Merge ACL node into configuration node; Add information node including avatar; Resolve 4.1 question by accepting provisional answer; Add discovery examples; setting and sharing Subject; Protocol to request channel information and participants;  vCard Request;  Private Messages; Set user preferences with XEP-0004; Remove references to member and occupant;  Add Role Definition;  Add Banned and Allowed Nodes;  Update Configuration Definition;Add information on original id to message reflected back to sender  Add XEP-0372 mechanism to reference channel and informal invite;  Channel Invitations </p></remark>
  </revision>
  <revision>
    <version>0.3.1</version>
    <date>2016-09-07</date>
    <initials>sek</initials>
    <remark><p>Introduce MIX Proxy concept.   Add MIX capability in client discovery.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2016-09-05</date>
    <initials>sek</initials>
    <remark><p>Addressing comments from review of 0.2 and expansion/clarification of MUC/MIX dual working</p></remark>
  </revision>
  <revision>
    <version>0.2.3</version>
    <date>2016-09-01</date>
    <initials>ssw, ks</initials>
    <remark><p>Cleanup, use precis nickname for nicknames, and allow multiple subject languages.</p></remark>
  </revision>
  <revision>
    <version>0.2.2</version>
    <date>2016-08-26</date>
    <initials>ssw</initials>
    <remark><p>Phrasing and grammar.</p></remark>
  </revision>
  <revision>
    <version>0.2.1</version>
    <date>2016-08-25</date>
    <initials>sek, egp</initials>
    <remark><p>Includes Link Mauve (Emmanuel Gil PEYROT) editorial changes</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2016-08-16</date>
    <initials>sek, ks</initials>
    <remark><p>Significant update based on XMPP Summit discussions</p></remark>
  </revision>
  <revision>
    <version>0.1.1</version>
    <date>2016-03-17</date>
    <initials>XEP Editor (ssw)</initials>
    <remark><p>Fix XML in join example.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2016-01-07</date>
    <initials>XEP Editor (asw)</initials>
    <remark><p>Initial published version approved by the XMPP Council.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2015-10-12</date>
    <initials>kis/psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>The Mediated Information eXchange (MIX) protocol is intended as a replacement for Multi-User Chat (MUC). MUC is a major application of XMPP that was developed in 2002 and standardized in &xep0045;. MIX implements the same basic MUC patterns in a more flexible and extensible way in order to address requirements that have emerged since MUC was developed. MIX supports all of the core chatroom features that are familiar from MUC, such as discussion topics and invitations. Like MUC, it also defines a strong access control model, including the ability to ban users, to name administrators, and to provide controls as to which users can participate in channels.</p>
  <p>Several reasons exist for replacing MUC:</p>
  <ul>
    <li>A number of use cases for group communication have emerged since MUC was first published.</li>
    <li>Experience has shown that it is difficult to use MUC to build several kinds of communication applications (such as a multimedia conference focus) without undesirable adaptations.</li>
    <li>It is impractical to address a number of the requirements listed in the next section with MUC or with extensions to MUC. </li>
    <li>In the years after MUC was designed, both &xep0060; and &xep0313; have been developed and it is desirable to reuse these building blocks (e.g., MAM can be used for message history) rather than using the less robust methods defined in &xep0045;.</li>
  </ul>
  <p>Because it is anticipated that there will significant co-existence between MUC and MIX, this specification is designed so that:</p>
  <ul>
    <li>XMPP clients can implement MUC and this specification in a way that provides a coherent user experience.</li>
    <li>XMPP servers can implement this specification and also provide a MUC interface in order to support clients that only implement MUC.</li>
  </ul>
  <p>If a server wishes to expose both MUC and MIX representations of chatrooms, it is recommended to do so by serving MUC and MIX on different domains, but a server MAY serve them on the same domain. The MIX service SHOULD include a reference to the MUC mirror, so that clients understanding both protocols can choose to show only one copy of the service.</p>
</section1>

<section1 topic='Requirements' anchor='reqs'>

<p>The following requirements have been identified, which MIX aims to address.</p>
  <ol>
    <li>A user's participation in a channel persists and is not modified by the user's client going online and offline.</li>
    <li>Multiple devices associated with the same account can share the same nick in the channel, with well-defined rules making each client individually addressable.</li>
    <li>Channels are not required to support or reflect presence for participants.</li>
    <li>A reconnecting client can quickly resync with respect to messages and presence.</li>
    <li>A user may (subject to configuration) receive messages from a channel as an invisible observer.</li>
    <li>Configuration can be observed externally to the channel (e.g., list of participants, access control rights, etc.).</li>
    <li>MIX services should provide mechanisms to prevent JIDs from being harvested.</li>
    <li>MIX and Message Archive Management (MAM) should work well together.</li>
    <li>A user can determine which channels they participate in.</li>
    <li>Provide extensibility regarding data formats that can be sent within a channel (files, structured data, indications about media sources in multimedia conferences, etc.) as well as flexibility regarding which data formats a user wants to receive.</li>
    <li>Enable federation of a channel across multiple servers, to provide a service equivalent to "federated MUC" &xep0289;.</li>
    <li>To enable sharing of messages on a channel without requiring sharing of presence.</li>
    <li>To enable sharing of presence without requiring message sending.</li>
    <li>(Desirable) Make it easier to reduce duplicate traffic.</li>
 </ol>
</section1>

<section1 topic='Concepts' anchor='concepts'>
  <p>The following concepts underlie the design of MIX.</p>
  <ol>
    <li>MIX channels (roughly equivalent to MUC rooms) are hosted on one or more MIX domains, (examples: 'mix.example.com'; 'conference.example.com'; 'talk.example.com'), which are discoverable through &xep0030;. Each channel on a MIX service may then be discovered and queried.</li>
    <li> In MIX each channel (e.g., 'channel@mix.example.com') is a pubsub service. This is based on the model from &xep0163; where every user JID (e.g., 'user@example.com') is its own pubsub service. </li>
    <li>A channel's pubsub service contains a number of nodes for different event types or data formats. As described below, this document defines several standard nodes; however, future specifications or proprietary services can define their own nodes for extensibility.</li>
    <li>Affiliations with the nodes are managed by the MIX service by channel level operations, so that the user does not have to separately manage affiliations with the individual PubSub nodes.
     </li>
    <li>&xep0313; (MAM) is used for all history access, with each node being individually addressable for MAM queries. This simplifies implementation compared to MUC (which had a specialized and rather limited history retrieval mechanism).</li>
    <li>A client can achieve a 'quick resync' of a node by requesting just those changes it has not yet received, using standard MAM protocol. This solves the old MUC issue of either receiving duplicate messages when rejoining a room or potentially missing messages.</li>
    <li>Because MAM is used for history, only those nodes that have a 'current value' need to store any items in them &mdash; e.g., 'urn:xmpp:mix:nodes:presence' and 'urn:xmpp:mix:nodes:subject' would store their current values (with older values being queryable through MAM), while 'urn:xmpp:mix:nodes:messages' would store no items.</li>
    <li>A user's participation in a channel outlives their client sessions. A client which is offline will not share presence within the channel, but the associated user will still be listed as an participant. </li>
    <li>Presence is sent to all participants using bare JID, whether or not the user has an online client. </li>
    <li>Online clients MAY register presence, which is then shared with participants who have subscribed to presence.</li>
    <li>MIX decouples addressing of channel participants from their nicknames, so that nickname changes do not affect addressing.</li>
    <li>Each participant is addressable by a single bare JID, which is a proxy JID (not the user's real JID) to make it straightforward to hide the user's real JID from other channel participants. Full JIDs comprised of this bare JID plus a resource (also anonymized) are then constructed, allowing visibility into the number of online resources participating in a channel.</li>
    <li>MIX requires client support and server support from the server providing the MIX service.  Although some protocol is shared with MUC, MUC clients are not interoperable with MIX servers.  This means that where a user chooses to use MIX, all of the users clients need to support MIX.</li>
  </ol>
  <section2 topic="MIX and PubSub" anchor="concepts-pubsub">
    <p>MIX is based upon domains providing a MIX service, such as 'mix.shakespeare.example'. Note that although PubSub communication is used, a domain used for MIX is a MIX domain and not a standard &xep0060; domain. Like MUC, there is no requirement on the naming of these domains; the label 'mix' and the fact that it is a subdomain of a 'shakespeare.example' service are purely for example.</p>
    <p>Every MIX channel is an addressable PubSub service (with additional MIX semantics) that will be addressed using a bare JID by other XMPP entities, for example coven@mix.shakespeare.example. While &xep0060; is used as the basis for the MIX model, MIX uses standard presence and groupchat messages to provide an interface to the MIX service that does not expose PubSub protocol for many of the more common functions.
</p>
  </section2>
  <section2 topic="MIX and MAM" anchor="concepts-mam">
    <p> Historical data (such as the messages sent to the channel) is stored in an archive supporting  Message Archive Management (MAM) so that clients can subsequently access this data with MAM. Each node can be archived separately (e.g., the presence node or the configuration node). MIX clients can retrieve archived information with MAM in order to quickly resync messages with regard to a channel, and can do so without providing presence information.</p>
  </section2>
  <section2 topic="MIX Proxy" anchor="concepts-mix-proxy">
    <p>
      A MIX channel does not send messages and presence directly to an XMPP MIX client. Instead it sends them to a MIX Proxy, which runs on the server which a MIX client accesses.   MIX clients MUST make use of a MIX Proxy.   Use of a MIX proxy enables flexible support of multiple clients for an XMPP user.
       The primary model is that a user will join a channel over an extended period, and that the user (not a specific client used by the user) joins the channel. The primary subscription is with the client's bare JID. The MIX channel will send messages and presences to the MIX Proxy using the bare JID.   The MIX Proxy will then send the messages and presence information to zero or more clients.
       The MIX Proxy provides a number of functions.
     </p>
    <ol>
      <li>Each MIX client will register with the MIX Proxy when it comes online.  A key benefit of this approach is that MIX messages will only be sent to clients that support MIX.   This enables use of clients that do not use MIX in conjunction with the MIX proxy.</li>
      <li>MIX Service and Channel subscription and management is handled through the MIX proxy so that the MIX Proxy can track all subscription changes and share subscription information between MIX clients.   To achieve this, a MIX client sends these MIX management queries to the MIX Proxy using the clients full JID and receives responses back from the MIX Proxy.   The MIX Proxy will communicate these requests to a MIX channel from the MIX using the user's bare JID.   Because the MIX Proxy is aware of subscription information, it can provide integrated support to a set of MIX clients.</li>
      <li>Messages from a MIX client to a MIX channel will go direct to the MIX service and not through the MIX Proxy.</li>
      <li>Messages from a MIX channel to a MIX client MUST be handled by a MIX Proxy.</li>
      <li>The MIX Proxy will only send messages to online clients and will discard messages if no clients are online.
        This means that a MIX client needs to resynchronize with the MIX service when it comes online.  This synchronization will happen directly between the MIX client and MIX channel.</li>
      <li>The MIX Proxy will know which channels are subscribed to, and so can send this list to a MIX client.  Because channel subscriptions are long term, this information will be used instead of the bookmark approach used with MUC.</li>
      <li>The MIX Proxy will manage channel registration and de-registration in the user's roster.</li>
      <li>Different clients may wish to access different channels (e.g., a mobile client may only access a subset of the channels in which a user is interested).   The MIX Proxy enables a client to select only a subset of channels.</li>
    </ol>
    <p>
   Messages being sent from MIX channel to MIX Proxy (which will be of type=groupchat)  and presence information are sent to the bare JID.  This means that the MIX Proxy will use a modification of the standard &rfc6121; rules.
    </p>
    <p>
      The MIX standard specifies how the MIX channel interacts directly with XMPP clients and with the MIX Proxy.
    </p>
    <p>
      The behaviour of a MIX Proxy and the protocol between MIX Proxy and MIX Client is not currently defined in this specification.  It will be defined in one of three places.
      It may be desirable in some situations to provide different service to different clients.  For example, a mobile client may participate in a smaller set of MIX channels than a desktop client.  This needs support from the server to which the client connects, so that MIX client and the connected server can negotiate which channels to send.  MIX Proxy behaviour is specified in this MIX specification.
    </p>

  </section2>
  <section2 topic="User Presence in MIX" anchor="concepts-presence">
    <p>
      MIX channels store presence in the presence node using the proxy JID of each online client for a user.   User presence may be included for all or selected clients of a given user, based on client choice to publish presence.    Where a user publishes presence for multiple clients, this information is available to all users subscribing to the channel presence.
    </p>
    <p>
      External XMPP entities can direct stanzas to clients publishing their presence by sending them to the appropriate full proxy JID in the presence node.   These stanzas MAY be routed to the client by the MIX channel.  The choice to do this is dependent on MIX channel policy.   For example, a disco request MAY be routed through the MIX channel to the client.
    </p>
    <p>
      Presence updates are distributed by a channel to the bare JID of subscribers and then the subscriber's server will distribute to each of the subscriber's currently online clients.
    </p>
  </section2>
  <section2 topic="Private Messages" anchor="concepts-pm">
    <p>
      Private messages MAY be sent to channel participants if allowed by channel policy. Private messages are
 addressed to the user's bare proxy JID determined from the participants node, and routed by the MIX to the user's bare real JID, where standard distribution rules will apply.
    </p>
    <p>
      Private messages MAY also be sent to specific clients identified by the full proxy JID of the client in the participants list, if allowed by channel policy.
    </p>
  </section2>
  <section2 topic="Proxy JIDs and JID Visibility" anchor="proxy-jid">
    <p>
      MIX channels have two modes controlling JID visibility:
    </p>
    <table caption="JID Visibility Modes">
      <tr><th>Mode</th><th>Description</th></tr>
      <tr><td>'JID Visible'</td><td>In these channels, some or all participant JIDs are visible to all channel participants.</td></tr>
      <tr><td>'JID&nbsp;Hidden'</td><td>In these channels, no participant JIDs are visible to channel participants, but they are visible to channel administrators.</td></tr>
    </table>
    <p>
      A channel participant may specify their preferences for JID visibility, with one of the following values:
    </p>
    <table caption="JID Visibility Preference Options">
      <tr><th>Preference</th><th>Description</th></tr>
      <tr><td>'No JID Visibility Preference'</td><td>The users JID will be visible in JID Visible channels and hidden in JID Hidden channels.</td></tr>
      <tr><td>'Prefer Hidden'</td><td>The user's JID will be hidden in JID Visible channels if the channel policy allows this.</td></tr>
      <tr><td>'Enforce Hidden'</td><td>The user's JID will never be shown and the user will be removed from channel if channel administrator enforces visibility.</td></tr>
      <tr><td>'Enforce Visible'</td><td>The users JID will always be shown and the user will be removed from channel if mode is changed to 'JID Hidden'.</td></tr>
    </table>
    <p>
      The primary representation of a participant in a MIX channel is a proxy JID, which is an anonymized JID using the same domain as the channel and with the name of the channel encoded, using the format "&lt;channel&gt;+&lt;generated identifier&gt;@&lt;mix domain&gt;".  They generated identifier MUST NOT contain the '+' characters.  The Channel name MAY contain the '+' character.   For example in the channel 'coven@mix.shakespeare.example',   the user 'hag66@shakespeare.example' might have a proxy JID of 'coven+123456@mix.shakespeare.example'.   The reason for the proxy JID is to support JID Hidden channels.   Proxy JIDs are also used in JID Visible channels, for consistency and to enable switching of JID visibility.  The "urn:xmpp:mix:nodes:jidmap" node maps from proxy JID to real JID.  While a user is a participant in a Channel, the mapping between real JID and proxy JID MUST NOT be changed,
    </p>
     <p>
       The full JIDs held in the  presence nodes are anonymized using a similar mechanism.  First the bare JID is mapped to a bare proxy JID, using the mapping held in the "urn:xmpp:mix:nodes:jidmap" node for the bare JID.  Then the resource is replaced with a generated value.   For example,   'hag66@shakespeare.example' in the channel coven might have a proxy JID of 'coven+123456@mix.shakespeare.example/789'.   There is no client visible mapping of proxy full JIDs maintained as this is not needed.   The MIX channel will need to maintain a mapping, to support directly addressing clients, such as for client to client disco#info queries.  While an anonymized JID is held in the presence node, the mapping to real JID MUST NOT be changed.  When an anonoymized full JID is added to the presence node, mapping to a real full JID that was previously in the presence node, the same anonymized JID as the previous time MAY be used or a different anonymized JID MAY be used.
     </p>
  </section2>
  <section2 topic="Standard Nodes" anchor="concepts-nodes">
    <p>MIX defines a number standard nodes are as follows.   Note that all nodes are optional and that not every channel will necessarily use each node:</p>
    <table caption="Standard MIX Nodes">
      <tr><th>Name</th><th>Node</th><th>Description</th></tr>
      <tr><td>Messages</td><td>'urn:xmpp:mix:nodes:messages'</td><td>For distributing messages to the channel. Each item of this node will contain a message sent to the channel.</td></tr>
      
      <tr><td>Participants</td><td>'urn:xmpp:mix:nodes:participants'</td><td>For storing the list of participants and the associated nick.  Channel participants are added when they join the channel and removed when they leave </td></tr>
      <tr><td>JID Map</td><td>'urn:xmpp:mix:nodes:jidmap'</td><td>For storing a list of anonymized bare JIDs from the participants node with a 1:1 mapping to the corresponding real JIDs.</td></tr>
      <tr><td>Presence</td><td>'urn:xmpp:mix:nodes:presence'</td><td>For storing information about the availability status of online participants, which may include multiple clients for a single participant.</td></tr>
      <tr><td>Information</td><td>'urn:xmpp:mix:nodes:info'</td><td>For storing general channel information, such as description. </td></tr>
      <tr><td>Subject</td><td>'urn:xmpp:mix:nodes:subject'</td><td>For storing and sharing the current subject of a channel</td></tr>
      <tr><td>Allowed</td><td>'urn:xmpp:mix:nodes:allowed'</td><td>For storing JIDs that are allowed to be channel participants.</td></tr>
      <tr><td>Banned</td><td>'urn:xmpp:mix:nodes:banned'</td><td>For storing JIDs that are not allowed to be channel participants. </td></tr>
      <tr><td>Configuration</td><td>'urn:xmpp:mix:nodes:config'</td><td>For storing channel configuration. </td></tr>
    </table>
    <p>
      All of the standard nodes are optional.   A channel providing a service similar to MUC will typically use all of the standard nodes, but other channels may use combinations of these nodes.
      MIX provides mechanisms to allow users to conveniently subscribe to a chosen set of nodes and to unsubscribe to all nodes with a single operation.  Some nodes are accessed and managed with PubSub, whereas other nodes define MIX specific mechanisms for their use.   
    </p>
    <p>
      MIX also makes use of two nodes for support of Avatars.  These nodes and their use is defined in &xep0084;.  These nodes may be created as part of a MIX channel, where it is desired to publish an avatar associated with the channel.
    </p>
    <table caption="MIX Nodes for Avatar Support">
      <tr><th>Name</th><th>Node</th><th>Description</th></tr>
      <tr><td>Avatar Data</td><td>'urn:xmpp:avatar:data'</td><td>For publishing an Avatar</td></tr>
      <tr><td>Avatar Metadata</td><td>'urn:xmpp:avatar:metadata'</td><td>For publishing Avatar metadata</td></tr>
    </table>
    <p>
      The structure of each of the standard nodes defined by MIX is now considered in more detail in the rest of this section, after explaining roles.
    </p>
    <section3 topic="Roles" anchor="roles">
      <p>
        There are a number of MIX roles for each channel, listed in the following table.   Rights will be assigned to the various roles in the channel configuration node.
      </p>
      <table caption="Channel Roles">
        <tr><th>Role</th><th>Membership and Rights</th></tr>
        <tr><td>Owners</td><td>These are owners of the list, as specified in the channel configuration node.  Only owners are allowed to modify the channel configuration node.</td></tr>
        <tr><td>Administrators</td><td>Administrators are defined in the channel configuration node.  Administrators have update rights to the Allowed Node and Banned Node, so can control which users may participate in a channel.  </td></tr>
        <tr><td>Participants</td><td>Participants are users listed by JID in the participants node.</td></tr>
        <tr><td>Allowed</td><td>Allowed is the set of JIDs that are participants or may be allowed to become participants.  A JID is allowed if it does not match entry in the banned node and either it matches an entry in the allowed node or the allowed node is not present. </td></tr>
        <tr><td>Anyone</td><td>Any user, including users in the banned node.</td></tr>
      </table>
      <p>
        There will always be at lease one owner and "anyone" will always have role occupants.   Other roles may not have any role occupants.  Rights are defined in a strictly hierarchical manner, so that for example Owners will always have rights that Administrators have.
      </p>
    </section3>
    <section3 topic="Messages Node" anchor="messages-node">
      <p>Items in this node will contain a message identified by a unique ID.  A MIX implementation SHOULD NOT make messages available for retrieval from this node using pubsub and MUST NOT allow direct pubsub publishing to this node.  Messages are published by sending messages to the channel. Zero history is held in the messages node.   Message history is retrieved by use of  MAM. Users subscribe to this node to indicate that messages from the channel are to be sent to them.</p>
      <p>Private Messages are not stored in the messages node.</p>
    </section3>

    <section3 topic="Participants Node" anchor="participants-node">
      <p>Each channel participant is represented as an item of the 'urn:xmpp:mix:nodes:participants' channel node.  Each item is named by the bare proxy JID of the participant. For example 'coven+123456@mix.shakespeare.example' might name the node item associated with participant 'hag66@shakespeare.example'. The nick associated with the user is mandatory and is stored in the item.  The nick for each channel participant MUST be different to the nick of other participants.   
      </p>
      <p>
        When a user joins a channel, the user's bare JID is added to the participants node by the MIX service.   When a user leaves a channel, they are removed from the participants node.  The participants node MUST NOT be directly modified using pubsub.
      This node MAY be subscribed to for jid-visible channels that permit subscription to this node - this will allow users to see changes to the channel participants.
      </p>
      <p>The participants node is optional.  If the Participants Node is not used, information on channel participants is not shared.  If there is no participants node, the access control value 'participants' MUST NOT be used.</p>
      <example caption="Value of Participants Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:participants'>
  <item id='coven+123456@mix.shakespeare.example'>
    <participant xmlns='urn:xmpp:mix:0'
                 nick='thirdwitch'/>
  </item>
</items>
]]></example>
    </section3>
    <section3 topic="JID Map Node" anchor="jid-map-node">

      <p>The JID Map node is used to associate a proxy bare JID to its corresponding real bare JID.  The JID Map node MUST have one entry for each entry in the Participants node.  This value is added when a user joins the channel and is removed when the user leaves the channel.  
       Each item is identified by proxy bare JID, mapping to the real bare JID.  This node is used to give administrator access to real JIDs and participant access to real JIDs in jid-visible channels.  This node MUST NOT be modified directly using pubsub.
        In JID visible channels, all participants may subscribe to this node.  In JID hidden channels, only administrators can subscribe.  </p>
      <example caption="Value of JID Map Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:jidmap'>
  <item id='coven+123456@mix.shakespeare.example'>
    <participant xmlns='urn:xmpp:mix:0'
                 jid='hecate@mix.shakespeare.example'/>
  </item>
</items>
]]></example>
    </section3>
    <section3 topic="Presence Node" anchor="presence-node">
      <p>
        The presence node contains the presence value for clients belonging to participants that choose to publish presence to the channel. A MIX channel MAY require that all participants publish presence.  Each item in the presence node is identified by the full proxy JID, and contains the current presence value for that JID.  The presence is encoded in the same way as data that would be sent in a presence stanza. The full JID is always used in this node. In MIX it is possible to have a 'presence-less channel' by not using this node. Access Control may be set to enforce that for each of the full JIDs in this list, the bare JID MUST be in the participants list.
      </p>

      <p>
        This node may be subscribed to by users and this subscription MUST use the users bare JID.  So presence of online clients is sent to the MIX Proxy for each user subscribed to this node. Presence is always sent using standard presence protocol and NOT using pubsub protocol.   Clients MUST NOT directly access the presence node using pubsub.
      </p>
      <example caption="Value of Presence Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:presence'>
  <item id='coven+123456@mix.shakespeare.example/8765'>
    <presence xmlns='jabber:client'>
      <show>dnd</show>
      <status>Making a Brew</status>
    </presence>
  </item>
</items>
]]></example>
    </section3>
    <section3 topic="Information Node" anchor="info-node">

      <p>The Information node holds information about the channel.  The information node contains a single item with the current information.  Information node history is held in MAM.
        The information node is named by the date/time at which the item was created.   The information node is accessed and managed using standard pubsub.  Users MAY subscribe to this node to receive information updates. The Information node item may contain the following attributes, each of which is optional:
      </p>
      <table caption="Information Node Attributes">
        <tr><th>Name</th><th>Description</th><th>Field Type</th><th>Values</th><th>Default</th></tr>
        <tr><td>'Name'</td><td>A short string providing a name for the channel.</td><td>text-single</td><td>-</td><td>-</td></tr>
        <tr><td>'Description'</td><td>A longer description of the channel.</td><td>text-single</td><td>-</td><td>-</td></tr>
        <tr><td>'Contact'</td><td>The JID or JIDs of the person or role responsible for the channel.</td><td>jid-multi</td><td>-</td><td>-</td></tr>
      </table>
      <p>The name and description values MUST contain a "text" element and MAY contain additional text elements. Where multiple text elements are provided, each MUST posses an xml:lang attribute that describes the natural language of the subject.  The format of the Information node follows &xep0004;.  This allows configuration to be updated by MIX defined commands and that the results of update commands are the same as the PubSub node.
      The following example shows the format of a item in the information node for the example coven@mix.shakespeare.example channel.
      </p>
      <example caption="Information Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:info'>
  <item id='2016-05-30T09:00:00' xmlns='urn:xmpp:mix:0'>
      <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='Name'>
            <value>Witches Coven</value>
        </field>
        <field var='Description'>
           <value>A location not far from the blasted heath where the three witches meet</value>
         </field>
        <field var='Contact'>
           <value>greymalkin@shakespeare.lit</value>
         </field>
         </x>
  </item>
</items>
]]></example>
    </section3>
    
    <section3 topic="Subject Node" anchor="subject-node">
      <p>The subject node publishes the current subject of channel. Subject history is stored in MAM. A single item is stored in this node at a time which MUST contain a "text" element and MAY contain additional text elements. Where multiple text elements are provided, each MUST posses an xml:lang attribute that describes the natural language of the subject.  </p>
      
      <p>
        Setting and sharing subject uses a message with subject element, in a manner compatible with &xep0045;.  Clients MAY also write or access this node using pubsub. Writes to this node will lead to update of subject by sending messages.   Setting the subject is controlled by configuration; in some channels it may be set by all users and in others restricted to administrators. 
        The following example shows the format of a item in the subject node. 
      </p>
      <example caption="Subject Node">
        <![CDATA[<items node='urn:xmpp:mix:nodes:subject'>
  <item>
    <text xml:lang="en">How to use Toads</text>
    <text xml:lang="de">Wie benutzt man Kröten</text>
  </item>
</items>]]></example>
      <p>
        When a user subscribes to the Subject Node, this will cause the channel to send Subject messages to the user through the MIX Proxy.  This is done on initial user subscription and on subject change.   Clients MAY directly read the channel subject from the Subject Node using PubSub.
      </p>
    </section3>
    
      <section3 topic="Allowed" anchor="allowed-node">
        <p>
          This node represents a list of JIDs that are allowed to become participants. If the allowed node is not present, all JIDs are allowed. This node is accessed and managed using standard pubsub.  The allowed list is always considered in conjunction with the banned list, stored in the banned node.  Only Administrators and Owners have write permission to the allowed node and are also the only roles that are allows to subscribe to this node.    Each item contains a real bare JID.  The following example shows how the allowed list can specify single JIDs and domains.
        </p>
        <example caption="Allowed Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:allowed'>
  <item id='@shakespeare.lit'/>
  <item id='alice@wonderland.lit'/>
</items>
]]></example>
      </section3>
      <section3 topic="Banned" anchor="banned-node">
        <p>
          This node represents a list of JIDs that are explicitly not allowed to become participants. The values in this list take priority over values in the allowed node. This node is accessed and managed using standard pubsub  Only Administrators and Owners have write permission to the allowed node and are also the only roles that are allows to subscribe to this node. Each item contains a real bare JID.
        </p>
        <example caption="Banned Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:banned'>
  <item id='lear@shakespeare.lit'/>
  <item id='macbeth@shakespeare.lit'/>
</items>
]]></example>
      </section3>
    <section3 topic="Configuration Node" anchor="config-node">
      <p>
        The Configuration node holds the configuration of the channel as a single item, named by the date-time of the last update to the configuration.  A single item is stored in the node, with previous configuration history accessed by MAM.  Users with read access to the configuration node MAY subscribe to the configuration node to get notification of configuration change.  This node is accessed and managed using standard pubsub. The configuration node is optional for a MIX channel.  For example, configuration choices could be fixed and not exposed.   A subset of the defined configuration options may be used and additional non-standard configuration options may be added.   If configuration options to control functionality of the nature described here are provided, the options defined in this standard MUST be used. The following configuration attributes are defined:
</p>
      <table caption="Configuration Node Attributes">
        <tr><th>Name</th><th>Description</th><th>Field Type</th><th>Values</th><th>Default</th></tr>
        <tr><td>'Last Change Made By'</td><td>Bare JID of the user making the last change.</td><td>jid-single</td><td>-</td><td>-</td></tr>
        <tr><td>'Owner'</td><td>Bare JIDs with Owner rights as defined in ACL node.  When a channel is created, the JID creating the channel is configured as an owner, unless this attribute is explicitly configured to another value.</td><td>jid-multi</td><td>-</td><td>-</td></tr>
        <tr><td>'Administrator'</td><td>Bare JIDs with Administrator rights.</td><td>jid-multi</td><td>-</td><td>-</td></tr>
        <tr><td>'End of Life'</td><td>The date and time at which the channel will be automatically removed by the server.   If this is not set, the channel is permanent.</td><td>text-single</td><td>-</td><td>-</td></tr>
        <tr><td>'Nodes Present'</td><td>Specifies which nodes are present. Presence of  config nodes is implicit.  Jidmap node MUST be present if participants node is present. 'avatar' means that both Avatar Data and Avatar Metadata nodes are present.</td><td>list-multi</td><td>'participants'; 'presence'; 'subject'; 'information'; 'allowed'; 'banned'; 'avatar'</td><td>-</td></tr>
        <tr><td>'Message Node Subscription'</td><td>Controls who can subscribe to messages node.</td><td>list-single</td><td>'participants'; 'allowed'; 'anyone'</td><td>'participants'</td></tr>
        <tr><td>'Presence Node Subscription'</td><td>Controls who can subscribe to presence node.</td><td>list-single</td><td>'participants'; 'allowed'; 'anyone'</td><td>'participants'</td></tr>
        <tr><td>'Participants Node Subscription'</td><td>Controls who can subscribe to participants node.</td><td>list-single</td><td>'participants'; 'allowed'; 'anyone'; 'nobody'; 'admins'; 'owners'</td><td>'participants'</td></tr>
        <tr><td>'Subject Node Subscription'</td><td>Controls who can subscribe to subject node.</td><td>list-single</td><td>'participants'; 'allowed'; 'anyone' </td><td>'participants'</td></tr>
        <tr><td>'Information Node Subscription'</td><td>Controls who can subscribe to the information node.</td><td>list-single</td><td>'participants'; 'allowed'; 'anyone'</td><td>'participants'</td></tr>
        <tr><td>'Allowed Node Subscription'</td><td>Controls who can subscribe to allowed node.</td><td>list-single</td><td>'participants'; 'allowed';  'nobody'; 'admins'; 'owners' </td><td>'admins'</td></tr>
        <tr><td>'Banned Node Subscription'</td><td>Controls who can subscribe to banned node.</td><td>list-single</td><td>'participants'; 'allowed';  'nobody'; 'admins'; 'owners' </td><td>'admins'</td></tr>
        <tr><td>'Configuration Node Access'</td><td>Controls who can subscribe to configuration node and who has read access to it.</td><td>list-single</td><td>'participants'; 'allowed';  'nobody'; 'admins'; 'owners' </td><td>'owners'</td></tr>
        <tr><td>'Information Node Update Rights'</td><td>Controls who can make changes to the information node</td><td>list-single</td><td>'participants'; 'admins'; 'owners' </td><td>'admins'</td></tr>
        <tr><td>'Avatar Nodes Update Rights'</td><td>Controls who can make changes to the avatar data and metadata nodes</td><td>list-single</td><td>'participants'; 'admins'; 'owners' </td><td>'admins'</td></tr>
        <tr><td>'JID Visibility'</td><td>Controls JID visibility in the channel.</td><td>list-single</td><td>'jid-hidden'; 'jid-optionally-visible'; 'jid-mandatory-visible'</td><td>'jid-hidden'</td></tr>
        <tr><td>'Open Presence'</td><td>If selected, any client may register presence.  If not selected, only clients with bare JID in the participants list may register presence.</td><td>boolean</td><td>-</td><td>false</td></tr>
        <tr><td>'Participants Must Provide Presence'</td><td>If selected, all channel participants are required to share presence information with the channel.</td><td>boolean</td><td>-</td><td>false</td></tr>
        <tr><td>'Allow User Message Retraction'</td><td>If this option is selected users will be able to retract messages sent to the MIX channel.</td><td>boolean</td><td>-</td><td>false</td></tr>
        <tr><td>'Administrator Message Retraction Rights'</td><td>This controls which group is able to retract messages sent to the MIX channel.</td><td>list-single</td><td>'nobody'; 'admins'; 'owners'</td><td>'owners'</td></tr>
        <tr><td>'Participation Addition by Invitation from Participant'</td><td>This option extends a channel  so that  a channel participant has rights to invite and enable other users as participants.</td><td>boolean</td><td>-</td><td>false</td></tr>
        <tr><td>'No Private Messages'</td><td>If this option is selected, private messages may not be used with the channel.</td><td>boolean</td><td>-</td><td>false</td></tr>
      </table>
      <p>
        The configuration node is in &xep0004; format and includes all of the options used by the channel, including values for options using default values.  This means that the value in the form can be directly mapped with the form returned by configuration administration commands. Configuration nodes will typically have a large number of elements. The following short example is provided to illustrate the syntax of the configuration node.
      </p>
      <example caption="Configuration Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:config'>
  <item id='2016-05-30T09:00:00' xmlns='urn:xmpp:mix:0'>
      <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='Owner'>
            <value>hecate@shakespeare.lit</value>
        </field>
        <field var='Owner'>
            <value>greymalkin@shakespeare.lit</value>
        </field>
        <field var='Message Node Subscription'>
           <value>allowed</value>
         </field>
        <field var='JID Visibility'>
           <value>jid-mandatory-visible</value>
         </field>
         <field var='No Private Messages'>
            <value>true</value>
         </field>
         </x>
  </item>
</items>
]]></example>
    </section3>
  </section2>
  <section2 topic="Non-Standard Nodes" anchor="non-standard-nodes">
    <p>
      The MIX standard allows channels to use non-standard nodes, using names that do no conflict with the standard nodes.   The capabilities of these nodes may be specified in a future XEP or be for private agreement.   Non-Standard nodes MUST NOT duplicate or otherwise provide capability that can be provided by standard nodes.
    </p>
  </section2>
</section1>

<section1 topic='Discovery' anchor='discovery'>
  <section2 topic='Discovering a MIX service' anchor='disco-service'>
    <p>
      An entity may discover a MIX service or MIX services by sending a Service Discovery items ("disco#items") request to its own server.
    </p>
    <example caption="Entity queries Server for associated services" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>

<iq from='shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='mix.shakespeare.example'
          name='Shakespearean Chat Service'/>
    <item jid='mix2.shakespeare.example'
          name='Another Shakespearean Chat Service'/>
  </query>
</iq>
]]></example>
    <p>To determine if a domain hosts a MIX service, a &xep0030; info query should be sent in the usual manner to determine capabilities.</p>
      <example caption="Entity queries a service" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <p>The MIX service then MUST return its identity and the features it supports, which MUST include the 'urn:xmpp:mix:0' feature, and the identity MUST have a category of 'conference' and a type of 'text'. </p>
    <example caption="Service responds with Disco Info result" ><![CDATA[
<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='urn:xmpp:mix:0'/>
    <feature var='searchable' xmlns='urn:xmpp:mix:0'>
  </query>
</iq>
]]></example>
    <p>
      A MIX service may return the following features:
     </p>
    <ul>
      <li>'urn:xmpp:mix:0': This indicates support of MIX, and is returned by all MIX services.</li>
      <li>'searchable': This is shown in the above example and indicates that a the MIX Service may be searched for channels.   This presence of this feature can be used by a client to guide the user to search for channels in a MIX service.</li>
      <li>'create-channel': This is described in <link url='#usecase-admin-check-create'> Checking for Permission to Create a Channel</link> in support of channel administration.   An end user client may need to create channels, perhaps for short term usage.   This feature helps the client to identify an MIX channel to use.  It enables a configuration where permanent (searchable) channels are placed in one MIX service and clients will be able to create channels in another MIX service which is not searchable.</li>
    </ul>
    <p>A MIX service MUST NOT advertise support for &xep0313;, as MAM is supported by the channels and not by the service.   A  MIX service MUST NOT advertise support for generic &xep0060;, as although MIX makes use of PubSub it is not a generic PubSub service.</p>
  </section2>
  <section2 topic='Discovering the Channels on a Service' anchor='disco-channel-list'>
    <p>The list of channels supported by a MIX service is obtained by a disco#items command.   The MIX server MUST only return channel that exist and that the user making the query has rights to subscribe to.  This query MAY be made directly by and XMPP client or by a MIX Proxy.</p>
    <example caption='MIX Proxy Queries for Channels on MIX Service'><![CDATA[
<iq from='hag66@shakespeare.lit'
    id='kl2fax27'
    to='mix.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>
]]></example>
    <example caption='MIX Service Returns Disco Items Result'><![CDATA[
<iq from='mix.shakespeare.lit'
    id='kl2fax27'
    to='hag66@shakespeare.lit'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='coven@mix.shakespeare.example' />
    <item jid='spells@mix.shakespeare.example' />
    <item jid='wizards@mix.shakespeare.example' />
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Discovering Channel Information' anchor='disco-channel-info'>
    <p>In order to find out more information about a given channel, a user can send a disco#info query to the channel.  This query MUST be made by a MIX Proxy and not the end client.</p>
    <example caption='Entity Queries for Information about a Specific Channel'><![CDATA[
<iq from='hag66@shakespeare.lit'
    id='ik3vs715'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <p>Note that this query comes from the bare JID to the MIX channel, as it will always be sent to the MIX service by a MIX proxy.  The channel MUST return its identity and the features it supports.  Note that a MIX channel MUST support MAM and so the response will always include both MIX and MAM support.</p>
    <example caption='Channel Returns Disco Info Result'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='ik3vs715'
    to='hag66@shakespeare.lit'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='A Dark Cave'
        type='mix'/>
    <feature var='urn:xmpp:mix:0'/>
    <feature var='urn:xmpp:mam:1'/>
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Discovering Nodes at a Channel' anchor='disco-channel-nodes'>
    <p>Use disco#items to find the nodes associated with a channel.   The MIX server MUST only return nodes that exist and that the user making the query has rights to subscribe to. This query MUST be made by a MIX Proxy and not the end client.</p>
    <example caption='Entity Queries for Nodes at a Channel'><![CDATA[
<iq from='hag66@shakespeare.lit'
    id='kl2fax27'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>
]]></example>
    <example caption='Channel Returns Disco Items Result'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='kl2fax27'
    to='hag66@shakespeare.lit'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:presence'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:participants'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:messages'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:subject'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:config'/>
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic="Determining Information about a Channel" anchor="find-channel-info">
    <p>The Information Node contains various information about the channel that may be useful to the user.   This can be read by the XMPP Client directly or by a MIX Proxy.</p>
    <example caption='MIX Proxy Requests Channel Information'><![CDATA[
<iq from='hag66@shakespeare.lit'
    id='kl2fax27'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='urn:xmpp:mix:0#channel-info'/>
</iq>
]]></example>
    <example caption='MIX Service Returns Channel Information'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='kl2fax27'
    to='hag66@shakespeare.lit'
    type='result'>
  <query xmlns='urn:xmpp:mix:0#channel-info'>
      <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='Name'>
            <value>Witches Coven</value>
        </field>
        <field var='Description'>
           <value>A location not far from the blasted heath where the three witches meet</value>
         </field>
        <field var='Contact'>
           <value>greymalkin@shakespeare.lit</value>
         </field>
      </x>
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Determining the Participants in a Channel' anchor='find-channel-participants'>
    <p>
      Online clients in the channel are determined from the presence node.   Participants in the channel are determined from the Participants Node which will give proxy JID and nick. The jidmap node is used to map to real JIDs.  An operation is provided to list channel participants.   For JID Hidden channels, only the nicks are returned.  For JID Visible channels, nicks and real JIDs are returned.</p>
    <example caption='MIX Proxy Requests Participant List'><![CDATA[
<iq from='hag66@shakespeare.lit'
    id='kl2fax27'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='urn:xmpp:mix:0#get-participants'/>
</iq>
]]></example>
    <example caption='MIX Service Returns Participant List for JID Visible Room'><![CDATA[
<iq from='coven@mix.shakespeare.lit'
    id='kl2fax27'
    to='hag66@shakespeare.lit'
    type='result'>
  <query xmlns='urn:xmpp:mix:0#get-participants'>
  <items>
      <item jid='hag66@shakespeare.lit' nick='thirdwitch'>
      <item jid='hag01@shakespeare.lit' nick='top witch'>
</items>
</iq>
]]></example>
  </section2>
  <section2 topic="Discovering Client MIX Capability" anchor="mix-client-discovery">
    <p>
      Where a client supports MIX, it MUST advertise this capability in response to a Disco request.    This will enable other entities to determine if a client supports MIX.   The following example shows a Disco response from a client that supports both MIX and MUC.
    </p>
    <example caption='Disco Response showing MIX support'><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='disco1'
    to='juliet@capulet.lit/chamber'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='http://code.google.com/p/exodus#QgayPKawpkPSDYmwT/WM94uAlu0='>
    <identity category='client' name='Exodus 0.9.1' type='pc'/>
    <feature var='http://jabber.org/protocol/caps'/>
    <feature var='http://jabber.org/protocol/disco#info'/>
    <feature var='http://jabber.org/protocol/disco#items'/>
    <feature var='http://jabber.org/protocol/muc'/>
    <feature var='http://jabber.org/protocol/mix'/>
  </query>
</iq>
]]></example>
  </section2>
</section1>

<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Common User Use Cases' anchor='usecases-user'>
    <section3 topic='Joining a Channel' anchor='usecase-user-join'>
      <p>A user joins a channel by sending a MIX "join" command. There is no default set of nodes, so user MUST specify the set of nodes to be subscribed to. To achieve the equivalent service to MUC, a user would subscribe to messages, presence and subject.
         This will lead to the server subscribing the user to each of the requested nodes associated with the channel. The MIX server will also add the user to the participant list by injecting a new item into the "urn:xmpp:mix:nodes:participants" node automatically.

      </p>
      <p>The default MIX model is that only channel participants may subscribe to nodes.    A MIX channel MAY allow non-participant subscription.   This will be handled by clients directly subscribing to the desired PubSub nodes.</p>
        <example caption="User Joins a Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
    <subscribe node='urn:xmpp:mix:nodes:config'/>
  </join>
</iq>
]]></example>
      <p>The channel responds with an IQ-result. This stanza includes the nodes to which the user has been successfully subscribed, as well as the bare JID that will be used for the user in this channel and added to the participant list.  The following example shows the result of the above request when the request is completed in full. </p>
      <example caption="Channel Processes Join Request in Full"><![CDATA[
<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
    <subscribe node='urn:xmpp:mix:nodes:config'/>
  </join>
</iq>
]]></example>
      <p>
        If a user cannot be subscribed to one or more of the requested nodes (e.g., because the node does not exist), but can be subscribed to some the response simply lists the nodes successfully subscribed.    If none of the nodes requested are successfully subscribed to, an error response is sent indicating the reason that the first node requested was not subscribed to.   This response will also include other nodes requested where subscription failed for the same reason. The following response example shows a response to the initial request example where
the participant is not be subscribed to all nodes associated with the channel (in this case only messages, participants, and subject).</p>
      <example caption="Channel Processes Join With Some Nodes Not Subscribed To"><![CDATA[
<iq type='result'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:subject'/>
  </join>
</iq>
]]></example>
      <p>The channel also adds the user to the participants node and sends a notification to subscribers to the participants node.</p>
      <example caption="Channel Adds User to Participants Node"><![CDATA[
<message from='coven@mix.shakespeare.example'
         to='hecate@shakespeare.example'
         id='5A9C7398-DB13-4BFA-A091-2D466C710AAF'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <item id='coven+123456@mix.shakespeare.example'>
        <participant xmlns='urn:xmpp:mix:0'
                     nick='thirdwitch'/>
      </item>
    </items>
  </event>
</message>
]]></example>
      <p>The user that has been added to the channel is identified by the item id of the item added to the pubsub node, which is the proxy JID of the new channel participant. Each &lt;participant&gt; element will include the nick of the user being added, which will be how the user will typically be shown in the channel.</p>
      <p>
        A user may subsequently modify subscription to nodes in a channel by sending a subscription modification request, as shown in the following example.
      </p>
      <example caption="User Modifies Subscription Request"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <update-subscription xmlns='urn:xmpp:mix:0'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
  </update-subscription>
</iq>

<iq type='result'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <update-subscription xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
  </update-subscription>
</iq>
]]></example>
    </section3>
    <section3 topic="Roster Management" anchor="usecase-roster-management">
      <p>
        After the user has jointed the channel, the user's MIX Proxy MAY add the MIX channel to the user's roster using standard XMPP to update the roster.  This is done to share the user's presence status with the channel and so the MIX channel will get presence information from the user.  This roster entry will lead to the user's server correctly sending user's presence from all clients to the MIX channel. The roster subscription is configured with one way presence, as presence is sent to the MIX channel but no presence information is sent about the MIX channel. The user's MIX Proxy MUST remove this roster entry after the user leaves the channel.
      </p>
      <p>
           If the user does not wish to publish presence information to the channel, the user will not add the roster entry.  A channel may require presence to be provided by all channel participants, which is controlled by the 'Participants Must Provide Presence' option.   The channel MAY check that channel participants have done this and MAY remove participants that do not do this.
      </p>
      <p>
       A channel MAY publish an Avatar following &xep0084;.  A client MAY make use of this information to associate an Avatar with the roster entry for a channel.
      </p>
    </section3>

   <section3 topic="User Preferences and Additional Information" anchor="usecase-visibilty-pref">
     <p>A channel MAY store user preferences and parameters with each user.    There are two preference options.
       </p>
     <p>
       A user  JID visibility preference have the following values:
     </p>
     <ol>
       <li>'Default'.   In this setting, the channel default value will be used.  This value is used if another value is not explicitly set.</li>
       <li>'Never'.  If this is set, JID will never be shared and user will be removed from the channel if its mode changes to JID-visible-mandatory.</li>
       <li>'Prefer Not'.   If this is set, JID will only be shared if mode is JID-visible-mandatory.</li>
     </ol>
     <p>
      The user may specify that no Private Messages are to be sent from the channel, and allow vCard retrieval.
     </p>
     <p>
       The user may specify that presence is not to be shared, which will prevent the MIX Channel from sending a presence probe for the user on channel start-up.  The user will also choose to not include the MIX channel in the user's roster, so that presence will not be updated.    Where the channel configuration sets 'Participants Must Provide Presence', this variable MUST be set to 'Share'.
     </p>
     <p>
       The following table sets out the standardized user preference values.   A MIX implementation may use other values.
     </p>
     <table caption="Standard User Preference Options">
       <tr><th>Option</th> <th>Values</th><th>Default</th></tr>
       <tr><td>'JID Visibility'</td> <td>'Default', 'Never',  'Prefer Not'</td>  <td>'Use Channel Default'</td></tr>
       <tr><td>'Private Messages'</td><td>'Allow', 'Block'</td> <td>'Allow'</td></tr>
       <tr><td>'vCard'</td><td>'Allow', 'Block'</td> <td>'Block'</td></tr>
       <tr><td>'Presence'</td><td>'Share', 'Not Share'</td><td>'Share'</td></tr>
     </table>
     <p>When joining a channel, the client may specify one or more preference options as a &xep0004; form.   In the response, the  server MUST specify all of the user preferences supported by the server, with default values if the user has not requested a different value.  The following example shows joining a channel and setting a preference.</p>
     <example caption="User Joins a Channel and Specifies a preference"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
    <join xmlns='urn:xmpp:mix:0'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='JID Visibility'>
            <value>Never</value>
        </field>
     </x>
  </join>
</iq>
]]></example>
     <p>The following example shows a successful join, which also reports all the user preferences. </p>
     <example caption="Channel Successfully Processes Join and returns the preferences set"><![CDATA[
<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0' jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='JID Visibility'>
            <value>Never</value>
        </field>
        <field var='Private Messages'>
           <value>Allow</value>
         </field>
        <field var='vCard'>
          <value>Block</value>
         </field>
     </x>
  </join>
</iq>
]]></example>
     <p>The client may also query the channel in order to find out which user preferences are supported and the options available.  This will allow users to set options not specified in the standard, by providing a form template in the result.</p>
     <example caption="User Requests and Recieves Preferences Template Form"><![CDATA[
<iq type='get'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
    <user-preference xmlns='urn:xmpp:mix:0'/>
</iq>

<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
    <user-preference xmlns='urn:xmpp:mix:0'>
    <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field type='list-single' label='Preference for JID Visibility' var='JID Visibility'>
            <option label='JID Never Shown'><value>Never</value></option>
            <option label='Default Behaviour'><value>Default</value></option>
            <option label='Try not to show JID'><value>Prefer Not</value></option>
         </field>
         <field type='list-single' label='Example Custom Preference' var='Custom Preference'>
            <option label='One Option'><value>A</value></option>
            <option label='Another Option'><value>B</value></option>
         </field>
     </x>
  </user-preference>
</iq>
]]></example>
     <p>
       A user may modify preferences using the corresponding set operation.  The set may specify values for some or all attributes.  All attributes are returned in the result.
     </p>
     <example caption="User Updates Preferences"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
    <user-preference xmlns='urn:xmpp:mix:0'/>
     <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='JID Visibility'>
            <value>Never</value>
        </field>
        <field var='Private Messages'>
           <value>Allow</value>
         </field>
        <field var='vCard'>
          <value>Block</value>
         </field>
     </x>
</iq>

<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
    <user-preference xmlns='urn:xmpp:mix:0'>
    <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='JID Visibility'>
            <value>Never</value>
        </field>
        <field var='Private Messages'>
           <value>Allow</value>
         </field>
        <field var='vCard'>
          <value>Block</value>
         </field>
     </x>
  </user-preference>
</iq>
]]></example>
   </section3>

    <section3 topic='Leaving a Channel' anchor='usecase-user-leaving'>
      <p>Users generally remain in a channel for an extended period of time.  In particular the user remains as a participant the channel does not change when the user goes offline as happens with &xep0045;. So, leaving the channel is a permanent action for a user across all clients, not just a matter of telling the channel that the user is not currently available or for a single client.  In order to  leave a channel, a user sends a MIX "leave" command to the channel. When a user leaves the channel, the user's client will remove the channel from the user's roster.</p>
      <example caption="User Leaves a Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <leave xmlns='urn:xmpp:mix:0'/>
</iq>
]]></example>
      <p>When the user leaves the channel, the MIX service is responsible for unsubscribing the user from all nodes in the channel and for removing the user from the participants and presence list.  If the user has online presence when the user leaves the channel, the change of presence status caused by removing the user's entry or entries from the presence node will ensure that subscribers to the presence node are correctly updated on presence status.


        Deletion from the participants and presence functions as if the item (channel participant) had been deleted using the PubSub retract mechanism with notification set to true.    Notification of the deletion is sent to clients subscribed to the participants  PubSub nodes, as shown in the example below.
        </p>
      <example caption="Reporting when User Leaves a Channel"><![CDATA[
<message from='coven@mix.shakespeare.example' to='hecate@shakespeare.example' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <retract id='coven+123456@mix.shakespeare.example'/>
    </items>
  </event>
</message>

<message from='coven@mix.shakespeare.example' to='hecate@shakespeare.example' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:presence'>
      <retract id='coven+123456@mix.shakespeare.example/8765'/>
    </items>
  </event>
</message>
]]></example>


    </section3>

    <section3 topic="Setting a Nick" anchor="usecase-setting-nick">
    <p>
      Each participant of a channel may have a nick, which is how other users in the channel will see the user.  In some cases a nick is not needed, for example where a user reads messages in a channel but does not send messages or share presence information.    A nick MUST be present for a user to send a message to a channel or for a user's presence to be shared on a channel.   There are four ways that a user's nick can be obtained.   The choice of mechanism or mechanisms is dependent on channel policy:
    </p>
    <ol>
      <li>The nick is registered with the user account in some way, for example as part of user provisioning with nick configured as an attribute in a directory service.   This may be chosen by corporate services that wish to ensure consistent nick values for a set of users and channels.</li>
      <li>The nick is registered with the MIX service, as described in  <link url='#usecase-user-register'> Registering a Nick </link>.</li>
      <li>The user explicitly sets the nick, as described in this section.</li>
      <li>The MIX service generates the nick.  In this case it is recommended that the assigned nick is a UUID following &rfc4122;.</li>
    </ol>
    <p>
   A user will typically set a nick when joining a channel and may update this nick from time to time.   The user does this by sending a command to the channel to set the nick.  If the user wishes the channel to assign a nick (or knows that the channel will assign a nick) the nick field can be left blank, so that the user can see what is assigned in the result.
    </p>
    <example caption="User sets Nick on Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </query>
</iq>
]]></example>

    <p>
      The channel will return the nick that is to be used, noting that this may be different to the requested nick. MIX services SHOULD apply the "nickname" profile of the PRECIS OpaqueString class, as defined in &rfc7700;.
    </p>

    <example caption="Channel informs user of Nick"><![CDATA[
<iq type='result'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </query>
</iq>
]]></example>
    </section3>
    <section3 topic='Registering a Nick' anchor='usecase-user-register'>
      <p>A user can register a nick with the MIX service.  Nick registration can be used ensure that a user is able to use the same nick in all channels in the service and to prevent other users from using a registered nick.   This can help achieve a consistent experience across a set of channels and prevent user confusion.  Support for nick registration by a MIX service is optional.  Where nick registration is supported, nick registration may be optional or mandatory.
        Where a user has registered a Nick with the MIX service, it may be used by each channel according to policy for the channel. A nick is associated with the user's bare JID.
      </p>
      <p>
        In order to determine if a Nick may be registered, the user may use disco to determine capabilities of the MIX service.
      </p>
      <example caption="User Determines features of the MIX service"><![CDATA[
<iq type='get'
    from='hag66@shakespeare.example/pda'
    to='mix.shakespeare.example'
    id='7nve413p'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>

<iq type='result'
    to='hag66@shakespeare.example/pda'
    from='mix.shakespeare.example'
    id='7nve413p'>
    <query xmlns='http://jabber.org/protocol/disco#info'/>
        <feature xmlns='urn:xmpp:mix:0' var='mix_nick_register'/>
    </query>
</iq>
]]></example>
      <p>
        The response will be a list of features of the MIX channel.  If Nick Registration is supported, then the result set will include &lt;feature var="mix_nick_register"/&gt;.
      </p>
      <p>
        To register a nick with the MIX service the user sends
 a &lt;register/&gt; command to the service. </p>
      <example caption="User Registers with Service"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='mix.shakespeare.example'
    id='7nve413p'>
  <register xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </register>
</iq>
]]></example>
      <p>On success, the service informs the user of its nick. MIX  SHOULD apply the "nickname" profile of the PRECIS OpaqueString class, as defined in &rfc7700; to the requested nick.  This means that  nick that is issued might be different from the nick that was requested.</p>
      <example caption="Service Returns User of Nick"><![CDATA[
<iq type='result'
    to='mix.shakespeare.example'
    from='hag66@shakespeare.example'
    id='7nve413p'>
  <register xmlns='urn:xmpp:mix:0'>
    <nick>thirdwitch</nick>
  </register>
</iq>
]]></example>
      <p>If the requested nick is already taken, the MIX service returns a &lt;conflict/&gt; error:</p>
      <example caption="Nick is Taken">
<![CDATA[<iq type='error'
    to='mix.shakespeare.example'
    from='hag66@shakespeare.example'
    id='7nve413p'>
  <error type='cancel'>
    <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      <p>If the register request does not contain a &lt;nick/&gt; element, then the MIX service assigns one.  It is recommended that the assigned nick is a UUID following &rfc4122;.
</p>


    </section3>
    <section3 topic='Setting User Presence' anchor='usecase-user-presence'>
      <p>

        A user joins a channel over an extended period, and participation in a channel does not generally change when user goes online or offline.   The user's  participation in a channel is reflected by the user's bare JID in the participant node.   All messages to the channel are sent to this JID.

      </p>
      <p>

        A user may share presence information with the channel, for one or more online clients.   Where a user shares presence information with a channel, the channel is entered by the user's server into the user's roster when the user subscribes to the channel.  When an XMPP client comes online or changes presence status, this will be communicated by the user to the user's server using broadcast presence.  The user's XMPP server is then responsible to share this presence information to each entry in the roster and in particular to each MIX channel in the roster.  The MIX channel will update the "urn:xmpp:mix:nodes:presence" node with any change of status and the updated presence information and then share this updated presence with users subscribed to this node, as described below.   When the user sets an explicit status, this is used to modify the presence node in the channel.   When a client being used by the user goes offline, the associated server will send presence status "unavailable" to the MIX channel, which will cause the full JID for that client to be removed from the presence node.
      </p>
      <p>
        A channel may require that all channel participants share presence information with the channel, which is represented in the "urn:xmpp:mix:nodes:presence" node.   If sharing presences is required by the channel, an XMPP client conforming to this specification SHALL share presence with the channel by including the channel in the user's roster. Note that the MIX server cannot generally enforce this, but it can require and enforce that when a message is sent to the channel, that the sender of the message is in the presence list.
      </p>
      <p>
      Presence status and availability is set in a MIX channel by standard presence stanzas sent to the MIX channel by the user's server.   User's wishing to receive presence updates will subscribe to the MIX channel presence node.   Presence updates are sent out to subscribing using standard XEP-0045 compatible presence stanzas.
      </p>
      <p>
        A user setting status is now used as an example.   Unlike in &xep0045; where coming online is a special action, coming online in MIX is implicit when presence status is set.  Going offline is a achieved by setting presence status to unavailable, which removes the client full JID entry from the presence node.  When a user sets a presence status, the user's server sends updated presence to the MIX channel, and the MIX server then publishes the user's  availability to the "urn:xmpp:mix:nodes:presence" node. If there is not an item named by the full JID of the client with updated presence status, this item is created.   If there is not an item named by the full JID of the client with updated presence status, then an item is created.</p>
      <example caption="User Setting Presence Status">
<![CDATA[<presence xmlns='jabber:client' from=‘hag66@shakespeare.example/pda’ to='coven@mix.shakespeare.example'>
  <show>dnd</show>
  <status>Making a Brew</status>
</presence>]]></example>
      <p>The user's presence information is then published by the service to the "urn:xmpp:mix:nodes:presence" node, with the 'publisher' attribute set to the user's participant identifier (the proxy JID. The MIX channel then broadcasts the presence change to all users who are subscribed to the "urn:xmpp:mix:nodes:presence" node.  The presence stanza is sent from the proxy (anonymized) full JID of the user.
      Note that presence is associated with a client and so will have a full JID as it comes directly from the client and not through the MIX Proxy.</p>
      <example caption="Channel Distributes Presence">
<![CDATA[<presence from='coven+123435@mix.shakespeare.example/678'
          to='coven@mix.shakespeare.example'
          id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'>
  <nick xmlns='http://jabber.org/protocol/nick'>thirdwitch</nick>
  <show>dnd</show>
  <status>Making a Brew</status>
</presence>]]></example>
    <p>
     The presence is distributed to those subscribing to the MIX channel presence node using a standard XMPP presence stanza. The presence change is recorded on the "urn:xmpp:mix:nodes:presence" node in the item for the full JID of the client to which the presence relates. The history of this node will be held as PubSub format in the MAM archive, so that presence history may be viewed.
    </p>
    </section3>

    <section3 topic="Coming Online: Obtaining Presence" anchor="usecase-obtaining-presence">
      <p>
        The presence information for a channel  is stored in the urn:xmpp:mix:nodes:presence node and distributed using standard presence stanzas to users subscribing to this presence node.  The user's server will then pass this presence information on to all online clients.   When a client goes offline, it will lose synchronization with the presence node.    When the client comes online, the clients server will send a directed presence stanza to the MIX channel. This will happen as a consequence of the MIX channel being in the user's roster and the MIX channel sending a presence update to the MIX channel.  When the MIX channel adds or modifies presence for a client to the roster, this presence change will be distributed to all users subscribing to the presence node.
      </p>
      <p>
        When the full JID of a client is added to the MIX channel presence node and that full JID is not in the presence list, the MIX channel will send to the client presence for all of the items in the presence node using standard presence stanzas.  This will give the client full current presence.
      </p>
    </section3>

    <section3 topic="Determining Real JIDs" anchor="usecase-real-jids">
      <p>
        Presence information will provide a MIX client with the nicks and anonymized proxy JIDs for participants.   For JID visible rooms, the user may look up the real JID using the "urn:xmpp:mix:nodes:jidmap" node.   The items in this node are identified by proxy JID, and so the real JID can be retrieved using a straightforward PubSub query.    While a user may subscribe to the jidmap node, it is more likely to be used to directly look up JIDs as and when needed.
      </p>

    </section3>

    <section3 topic="Coming Online: Synchronizing Message History" anchor="usecase-sync-history">
      <p>
        A MIX client will typically display message history of the channel to the user.   When a client comes online it will need to obtain this message history from the MAM archive associated with the channel.  There are three basic approaches a client will take:
      </p>
      <ol>
        <li>If the client has previously displayed message history and has been offline for a reasonably small time, the client will wish to retrieve all messages since the last one displayed to the user.</li>
        <li>The client may wish to display a fixed number of messages, perhaps finding more messages if the client subsequently requests.</li>
        <li>The client may wish to display messages from a recent time period, perhaps finding more messages if the client subsequently requests.</li>
      </ol>
      <p>To achieve this, the client will query the user's own MAM archive using &xep0313;, with the query filtered by the channel JID.   This gives the client flexibility to retrieve and display message history in a manner appropriate to the client implementation.</p>
    </section3>


    <section3 topic='Going Offline' anchor='usecase-user-offline'>
      <p>When a client goes offline, this presence update is sent by the client's server to the MIX channel.   From the client perspective, this is the same as any other presence change.   Handling by the MIX channel is slightly different.</p>
      <example caption="Client Goes Offline in the Channel"><![CDATA[
<presence type='unavailable'
          from='hag66@shakespeare.example/pda'
          to='coven@mix.shakespeare.example'/>
]]></example>
      <p>The MIX channel will retract (remove) the item in the presence node of the MIX channel identified by the client's full JID.  The MIX channel will notify subscribers to the presence node of the user going offline by sending a presence stanza to the full proxy JID of each client.</p>
      <example caption="Channel Distributes Notification of Client going Offline">
<![CDATA[<presence from='coven+12345@mix.shakespeare.example/678'
          to='hecate@shakespeare.example'
          id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
          type='unavailable'/>]]></example>

      <p>
        There is the possibility that the message associated with the user going offline will be lost.   If this happens, "ghost" entries will appear in the presence node.   A MIX server may take steps to address this, for example by probing client with a disco for presence items that remain unchanged for a long period.
      </p>
      <p>
        It is desirable to prevent clients from going offline briefly and then coming back online again, as this will lead to "flapping presence".   The recommended approach to achieve this is use of &xep0198; to maintain an XMPP client connection in the event of short term TCP failure.
      </p>
    </section3>



    <section3 topic='Sending a Message' anchor='usecase-user-message'>
      <p>A client sends a message directly to a MIX channel as a standard groupchat message, in exactly the same way as for &xep0045;. Messages are sent directly to the channel and do not use the MIX Proxy. The message id is selected by the client.</p>
      <example caption="User Sends Message to Channel"><![CDATA[
<message from='hag66@shakespeare.example/pda'
         to='coven@mix.shakespeare.example'
         id='92vax143g'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
</message>
]]></example>
      <p>The MIX channel then puts a copy of the message into the MAM archive for the channel and sends a copy of  the message to each participant in
        standard groupchat format.    These messages sent by the channel are addressed to the bare JID of each participant and this will be handled by the participant's MIX Proxy.  The message from value is the full Proxy JID of the message sender.   The id of the message is the ID from the MAM archive and NOT the id used by the sender.</p>

      <example caption="Channel Reflects Message to Participants"><![CDATA[
<message from='coven+12345@mix.shakespeare.example/678'
         to='hecate@shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
</message>
]]></example>
      <p>
        The messages sent to participants have a different message id to the originally submitted message.  This does not impact most recipients, but it does not allow the message originator to correlate the message with the submitted message.   To address this the MIX channel MUST include an additional element of the message copy going back to the originator's bare JID that includes the original id.  This enables the originator to correlate the received message with the message submitted.
      </p>
      <example caption="Channel Reflects Message back to Originator"><![CDATA[
<message from='coven+12345@mix.shakespeare.example/678'
         to='hag66@shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
  <submission-id xmlns='urn:xmpp:mix:0'>92vax143g</submission-id>
</message>
]]></example>
    </section3>

    <section3 topic="Retracting a Message" anchor="usecase-retract">
      <p>
        A MIX channel MAY support message retraction, where the sender of a messages or an authorized administrator deletes a message.   If this is done the original message MAY be replaced by a tombstone.  The protocol to request retraction does this by a message with a &lt;retract&gt; element as shown in the following example.
      </p>
      <example caption="User Retracts a Message"><![CDATA[
<message from='hag66@shakespeare.example/pda'
         to='coven@mix.shakespeare.example'
         id='92vax143g'>
  <retract id='28482-98726-73623' xmlns='urn:xmpp:mix:0'/>
</message>
]]></example>
      <p>
        The MIX channel will allow a user to retract a message sent by the user if the 'Allow User Message Retraction' option is configured.    The MIX channel will allow an administrative user to retract any message if the user is in the group specified by the 'Administrator Message Retraction Rights' option.
      </p>
      <p>
        If the retraction message is accepted, it will be distributed to channel participants.  This will allow retraction to happen in the MAM archive of each channel participant and to reflect the retraction in client GUI.   A client receiving a retraction message SHOULD ensure that the retracted message is no longer displayed to the end user.
      </p>
      <p>
        Two approaches to message retraction may be used.  In the first approach, the retracted message is simply removed.   This is appropriate where retraction is provided as a user service and the user has rights to remove messages sent from the record.
      </p>
      <p>
        The second approach is to leave a tombstone, which if taken MUST be done in the following manner.   This is appropriate where it is desired to leave a record of the message that was redacted.
        With this approach, the original message &lt;body&gt; is removed and replaced with a tombstone using the &lt;retracted&gt; element that shows the JID of user performing the retraction and the time of the retraction.
      </p>
      <example caption="Retracted message tombstone in a MAM result"><![CDATA[
<message id='aeb213' to='juliet@capulet.lit/chamber'>
  <result xmlns='urn:xmpp:mam:1' queryid='f27' id='28482-98726-73623'>
    <forwarded xmlns='urn:xmpp:forward:0'>
      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>
      <message xmlns='jabber:client' from="hag66@shakespeare.example" to="macbeth@shakespeare.lit">
        <retracted xmlns='urn:xmpp:mix:0' by='hag66@shakespeare.example' time='2010-07-10T23:08:25Z'/>
      </message>
    </forwarded>
  </result>
</message>
]]></example>
    </section3>
    <section3 topic="Setting the Channel Subject" anchor="set-subject">
      <p>
       Setting the subject for a channel follows a similar procedure to sending a message.   An XMPP client will send a message setting the subject directly to the MIX channel.
      </p>
      <example caption="User Sets Channel Subject"><![CDATA[
<message from='hag66@shakespeare.example/pda'
         to='coven@mix.shakespeare.example'
         id='92vax143g'
         type='groupchat'>
  <subject>
   <item>
    <text xml:lang="en">How to use Toads</text>
    <text xml:lang="de">Wie benutzt man Kröten</text>
  </item>
  </subject>
</message>
]]></example>
      <p>
        This message is received by the MIX channel, which will set the Subject Node for the channel, and then distribute the message to participants that are subscribed to the Subject Node, with the message addressed to the MIX Proxy.
      </p>
      <example caption="Channel Reflects New Subject to Participants"><![CDATA[
<message from='coven+12345@mix.shakespeare.example/678'
         to='hecate@shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
         type='groupchat'>
           <subject>
            <item>
                <text xml:lang="en">How to use Toads</text>
               <text xml:lang="de">Wie benutzt man Kröten</text>
            </item>
          </subject>
</message>
]]></example>
      <p>
        When a new Participant joins a channel and subscribes to the Subject Node, the channel MUST send to the user's MIX Proxy a message with the current subject.   An XMPP Client MAY directly read the Subject node using &xep0060;.
      </p>
    </section3>
    <section3 topic='Telling another User about a Channel' anchor='usecase-user-tell'>
      <p>
        A convenient way to reference another channel is to use &xep0372; which enables the JID of a channel to be shared.  This might be used simply to inform the message recipient about the channel or as mechanism to invite the user to join the channel.   This is useful as an invitation mechanism to a channel that any user can join or where the invitee knows that the user may join (e.g., because the channel is for all users in an organization).
      </p>
    </section3>
    <section3 topic='Inviting another User to join a Channel that the user does not have Permission to Join' anchor='usecase-user-invite'>
      <p> Invitation by reference, as described in the previous section, is a convenient approach to invite a user to join a channel that the user has permission to join.   This section describes the approach used when the inviter has permission to grant rights for the invitee to become a channel participant.   This might be because the inviter is an administrator of the channel or the channel may have a special mode where channel participants may grant rights for other users to join a channel ('Participation Addition by Invitation from Participant' enabled).   This approach is used to avoid cluttering the allowed node with JIDs of users who are invited to join, but do not accept the invitation.
        When a channel participant(the inviter) invites  another user (the invitee) to join a channel, the following sequence of steps is followed:

      </p>
      <ol>
        <li>The channel inviter sends to the channel requesting an invite for the invitee.</li>
        <li>The channel sends an invitation to the inviter.</li>
        <li>The inviter sends the invitation to the invitee.</li>
        <li>The invitee MAY use the invitation to join the channel.</li>
        <li>The invitee MAY send a response to the inviter, indicating if the invitation was accepted or declined.</li>
      </ol>
      <p>
        The first step is for the inviter to request an invitation from the channel.   The invitation contains inviter, invitee and a token.  The channel will evaluate if the inviter has rights to issue the invitation.   This will be because the inviter is a channel administrator or if the inviter is a channel participant and the channel has 'Participation Addition by Invitation from Participant' mode enable.  If the inviter has rights to make the invitation, the channel will return a token.  The token is a string that the channel can subsequently use to validate an invitation.   The format of the token is not specified in this standard.   The encoded token MAY reflect a validity time.
      </p>
      <example caption='Inviter Requests and Receives Invitation'><![CDATA[
<iq from='hag66@shakespeare.lit/pda'
    id='kl2fax27'
    to='coven@mix.shakespeare.lit'
    type='get'>
  <query xmlns='urn:xmpp:mix:0#request-invitation'/>
  <invitee>cat@shakespeare.lit</invitee>
</iq>


<iq from='coven@mix.shakespeare.lit'
    id='kl2fax27'
    to='hag66@shakespeare.lit/pda'
    type='result'>
  <query xmlns='urn:xmpp:mix:0#request-invitation'>
        <invitation>
           <inviter>hag66@shakespeare.lit</inviter>
           <invitee>cat@shakespeare.lit</invitee>
           <channel>coven@mix.shakespeare.lit</channel>
           <token>ABCDEF</token>
        </invitation>
</iq>
]]></example>
      <p>
        The inviter can now send the invitee a message containing the invitation, as shown in the following example.
      </p>
      <example caption='Inviter sends Invitation to Invitee'><![CDATA[
<message from='hag66@shakespeare.lit/pda'
    id='foo'
    to='cat@shakespeare.lit'>
    <body>Would you like to join the coven?<body>
    <invitation xmlns='urn:xmpp:mix:0'>
        <inviter>hag66@shakespeare.lit</inviter>
        <invitee>cat@shakespeare.lit</invitee>
        <channel>coven@mix.shakespeare.lit</channel>
        <token>ABCDEF</token>
   </invitation>
</iq>
]]></example>
  <p>The invitation can now be used by the invitee to join a channel. The invitation is simply added to the standard channel join, so that the channel can validate the invitation using the token. If the allowed node is present and the invitee is not matched against any item, the channel MUST add the invitee to the allowed node as part of the join.</p>
      <example caption="User Joins a Channel with an Invitation"><![CDATA[
<iq type='set'
    from='cat@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:0'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <invitation>
        <inviter>hag66@shakespeare.lit</inviter>
        <invitee>cat@shakespeare.lit</invitee>
        <channel>coven@mix.shakespeare.lit</channel>
        <token>ABCDEF</token>
   </invitation>
  </join>
</iq>
]]></example>
      <p>The invitee may send an acknowledgement back to the inviter, noting the status of the invitation.  Values are:</p>
      <ul>
        <li>'Joined': The invitee has joined the channel.</li>
        <li>'Declined': The invitee is not taking up the invitation.</li>
        <li>'Acknowledged': The invitation is acknowledged, without information on action taken or planned.</li>
      </ul>
      <example caption='Invitee sends Acknowledgement to Inviter'><![CDATA[
<message from='cat@shakespeare.lit/miaow'
    id='bar'
    to='hag66@shakespeare.lit/pda'>
    <body>No Thanks - too busy chasing mice....<body>
    <invitation-ack xmlns='urn:xmpp:mix:0'>
        <value>Declined</value>
        <invitation>
             <inviter>hag66@shakespeare.lit</inviter>
             <invitee>cat@shakespeare.lit</invitee>
              <channel>coven@mix.shakespeare.lit</channel>
              <token>ABCDEF</token>
         </invitation>
     </invitation-ack>
</iq>
]]></example>
    </section3>


    <section3 topic='Sending Private Messages' anchor='usecase-user-private-messages'>

      <p>
       Private Messages are used to provide communication with another channel participant through the MIX channel, without the initiating  user knowing the real JID of the channel participant.  A channel MAY support use of Private Messages.  Private messages are standard XMPP messages.   A message goes through a number of stages with different addressing.  This is set out in the following table.
      </p>
      <table caption="Setting From and To when sending Private Messages">
        <tr><th>Message</th><th>From</th><th>To</th></tr>
        <tr><td>First Message from Client to MIX Channel</td><td>Full JID of initiator's client</td><td>Proxy bare JID of responder</td></tr>
        <tr><td>First Message from MIX Channel to responder's MIX Proxy</td><td>Proxy full JID of initiator's client</td><td>Bare JID of responder</td></tr>
        <tr><td>First Message from responder's MIX Proxy to one or more of the responder's clients</td><td>Proxy full JID of initiator</td><td>Full JID of responder's client</td></tr>
        <tr><td>Messages from responder's client to MIX Channel</td><td>Full JID of responder's client</td><td>Proxy full JID of initiator's client</td></tr>
        <tr><td>Messages from MIX channel to initiator's client</td><td>Proxy full JID of responder's client</td><td>Full JID of initiator's client</td></tr>
        <tr><td>Messages from initiator's client to MIX Channel</td><td>Full JID of initiator's client</td><td>Proxy full JID of responder's client</td></tr>
        <tr><td>Message from MIX Channel to responder's client</td><td>Proxy full JID of initiator's client</td><td>Full JID of responder's client</td></tr>
      </table>
      <p>Private Messages MAY be archived using MAM by the XMPP servers associated with initiator and responder.   Private Messages MUST NOT be archived by the MIX channel.</p>
    </section3>



    <section3 topic="Requesting vCard" anchor="usecase-vcard">
      <p>A user may request the vCard of a channel participant by sending a request through the channel.  The request may be sent directly by the client or through a MIX Proxy.  The MIX channel MAY pass this request on or may block it.  vCard requests MAY use &xep0054; (vcard-temp) or &xep0292; (vCard4 over XMPP).  Where a MIX service supports one or both of these protocols, the protocol MUST be advertized as a feature of the MIX service.   In the following example, using vcard-temp, the requesting client sends a message to the anonymized bare JID of the channel participant for which the vCard is desired.</p>
      <example caption="Client directly requests vCard through channel" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='coven+989898@mix.shakespeare.example'
    type='get'>
  <vCard xmlns='vcard-temp'/>
</iq>
]]></example>
      <p>The MIX channel MAY pass on the vCard request or may reject with an error, dependent on channel policy.  The MIX service will then address the vCard request to the MIX proxy (bare JID) using an anonymous full proxy JID to hide the requester.  </p>
      <example caption="Channel passes on vCard request to MIX Proxy" ><![CDATA[
<iq from='coven+123456@mix.shakespeare.example/6789'
    id='lx09df27'
    to='peter@shakespeare.lit'
    type='get'>
  <vCard xmlns='vcard-temp'/>
</iq>
]]></example>
    <p>
      The MIX Proxy, on behalf of the user, MAY send a response or reject with an error.   The MIX Proxy will send the vCard back to the channel.
    </p>
      <example caption="Service responds with Disco Info result" ><![CDATA[
<iq from='peter@shakespeare.lit'
    id='lx09df27'
    to='coven+123456@mix.shakespeare.example/6789'
    type='result'>
    <vCard xmlns='vcard-temp'>
    <FN>Peter Saint-Andre</FN>
    <N>
      <FAMILY>Saint-Andre</FAMILY>
      <GIVEN>Peter</GIVEN>
      <MIDDLE/>
    </N>
    <NICKNAME>stpeter</NICKNAME>
    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>
  </vCard>
  <query xmlns='http://jabber.org/protocol/disco#info'>
</iq>
]]></example>
      <p>
        The MIX channel will then send the vCard response to the requesting client on behalf of the client sending the response.
      </p>
      <example caption="Service responds with Disco Info result" ><![CDATA[
<iq from='coven+989898@mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
 <vCard xmlns='vcard-temp'>
    <FN>Peter Saint-Andre</FN>
    <N>
      <FAMILY>Saint-Andre</FAMILY>
      <GIVEN>Peter</GIVEN>
      <MIDDLE/>
    </N>
    <NICKNAME>stpeter</NICKNAME>
    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>
  </vCard>
</iq>
]]></example>
    </section3>
  </section2>

<section2 topic="Presence Initializion" anchor="use-presence-initialize">
  <p>
    For an active MIX Channel, the presence node is updated as channel participants change status and presence information is sent to the channel.  When a MIX channel starts, typically when the associated MIX Service and Server start, there is a need to initialize the presence node.    This is done by the XMPP server associated with the MIX channel sending out a presence probe for each channel participant, following the presence probe process specified in &rfc6121;.   A presence probe MUST NOT be sent for users who have set presence preference to not sharing.
  </p>
</section2>
  <section2 topic="Ensuring Message Delivery" anchor="use-ensure-delivery">
    <p>
      It is important that messages are all transferred from the MIX channel to the server associated with the each channel participant.   Transfer between servers will typically happen quickly and &xep0198; will deal with short connection failures between servers.   Longer connection failures could lead to message loss.  This would lead to online users (who remain connected to their servers) missing messages, and to messages being missed out of the user archive.  This section describes how MIX addresses this.
    </p>
    <p>
      When there is a long term connection failure, the MIX channel will receive an error from the XMPP server indicating that a message failed to transfer to a recipient.   When this happens, the MIX channel must take responsibility to ensure that the message is retransmitted and delivered.   When the MIX channel detects a failure it will make use of an IQ Marker message to determine when the connection to the peer server is working again.  Once the channel has received a response to the marker IQ it will retransmit the pending messages.
    </p>
    <example caption="Channel Sends Marker Message" ><![CDATA[
 <iq from='coven@mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example'
    type='get'>
  <marker xmlns='urn:xmpp:mix:0'/>
</iq>


<iq from='hag66@shakespeare.example'
    id='lx09df27'
    to='coven@mix.shakespeare.example'
    type='result'>
 <marker xmlns='urn:xmpp:mix:0'/>
</iq>
]]></example>
  </section2>

  <section2 topic="Use of MAM" anchor="use-mam">
   <p>
     All messages sent to a MIX channel MUST be archived using MAM in association with the MIX channel.   All messages MUST also be archived on the server associated with each channel participant receiving the message, which enables clients to always retrieve messages from the clients MAM archive.  Other channel nodes MAY be archived.
   </p>
    <section3 topic="Archive of Messages" anchor="use-mam-messages">
      <p>
        Messages sent to participants MUST be archived by both the MIX channel and by the user's server.   This MUST include messages setting subject and MAY include presence messages.   Correct MIX operation relies on messages being archived.
      </p>
    </section3>
    <section3 topic="Retrieving Messages" anchor="use-mam-retrieve">
      <p>
        Clients will retrieve MIX messages using standard MAM protocol from the user's archive.  The MAM query will filter based on the channel JID to enable access to messages from a given channel. This gives the user a simple mechanism to access all messages sent to the channel.   MAM can be used to retrieve older messages that have not been cached by the client.
      </p>
      <p>
        Messages may also be retrieved from the channel by addressing MAM queries to the channel JID.   This will behave like a standard MAM archive.  This can be useful for administrators to access archived messages.  It can also be useful for new channel participants to access the historical archives.
      </p>
    </section3>
    <section3 topic="MAM Use with other Channel Nodes" anchor="use-mam-other-nodes">
      <p>
        A MIX Channel MAY use MAM to archive nodes other than message nodes.   Clients with rights to access these archives may use MAM to do this, specifying the PubSub node in the MAM query addressed to the channel.
      </p>
    </section3>

  </section2>


  <section2 topic='Administrative Use Cases' anchor='usecases-admin'>
    <section3 topic='Checking For Permission To Create a Channel' anchor='usecase-admin-check-create'>
      <p>
        MIX does not standardize an access control model for creating and deleting MIX channels.    The choice is left to the MIX implementer, and could be a very simple or complex approach.  A client can determine if it has permission to create a channel on a MIX service, which may be used to control options presented to the user.   This is achieved by a disco command on the MIX service.   If the 'create-channel' feature is returned, the user is able to create a channel.
      </p>
        <example caption="Client determines Capability to Create a Channel" ><![CDATA[
 <iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='urn:xmpp:mix:0'/>
    <feature var='create-channel' xmlns='urn:xmpp:mix:0'>
  </query>
</iq>
]]></example>
    </section3>
    <section3 topic='Creating a Channel' anchor='usecase-admin-create'>
      <p>
A client creates a channel by sending a simple request to the MIX service.   A channel may be created with default parameters, as shown in the following example.   The result MUST include the name of the channel which MUST match the channel name in the request (if present).
      </p>
        <example caption="Creating a Channel with Default Parameters" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
  <create channel='coven' xmlns='urn:xmpp:mix:0'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <create channel='coven' xmlns='urn:xmpp:mix:0'/>
</iq>
]]></example>
      <p>
        The client may also include parameters in &xep0004; format as part of channel creation.    If the client wishes to inspect configuration, channel administration procedures should be used.
      </p>
      <example caption="Creating a Channel with Client Specified Parameters" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
  <create channel='coven' xmlns='urn:xmpp:mix:0'>
     <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='Owner'>
            <value>hecate@shakespeare.lit</value>
        </field>
        <field var='Owner'>
            <value>greymalkin@shakespeare.lit</value>
        </field>
        <field var='Message Node Subscription'>
           <value>allowed</value>
         </field>
        <field var='JID Visibility'>
           <value>jid-mandatory-visible</value>
         </field>
         <field var='No Private Messages'>
            <value>true</value>
         </field>
         </x>
  </create>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <create channel='coven' xmlns='urn:xmpp:mix:0'/>
</iq>
]]></example>

    </section3>


    <section3 topic='Creating a Channel for Ad Hoc Use' anchor='usecase-admin-create-adhoc'>
      <p>
        Rooms may be created for ad hoc use between a set of users.  Channels of this nature will have channel name created by the server and will not be addressable or discoverable.  Here a channel is created without specifying the channel name.   Parameters for the channel may also be specified.
      </p>
      <example caption="Creating a Channel for Ad Hoc Use" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
  <create xmlns='urn:xmpp:mix:0'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <create channel='A1B2C345' xmlns='urn:xmpp:mix:0'/>
</iq>
]]></example>
   </section3>
   <section3 topic="Converting a 1:1 Conversation to a Channel" anchor="usecase-admin-converting-chat">
     <p>
       A common use case for an ad hoc channel is where two users are engaged in a 1:1 chat and wish to broaden the discussion. Prior to bringing more users into a channel, using standard invitation process, there is a need to move a dialogue.  The first step is for one of the two users to create an ad hoc channel, as described in the previous section.   The other user will then be invited, and can switch to the new channel.   It may also be useful to share some or all of the messages from the 1:1 discussion into the new channel.   This is done by sending these messages to the channel.  These messages are marked as &lt;resend&gt; which includes the original message time to facilitate appropriate display.
     </p>
     <example caption="Resending a message to create History" ><![CDATA[
<message from='hag66@shakespeare.example/pda'
         to='A1B2C345@mix.shakespeare.example'
         id='92vax143g'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
  <resend xmlns='urn:xmpp:mix:0' time='2010-07-10T23:08:25Z'/>
</message>
]]></example>
   </section3>

    <section3 topic='Destroying a Channel' anchor='usecase-admin-destroy'>
      <p>
        MIX channels are always explicitly destroyed by an owner of the channel or by a server operator. There is no concept of temporary channel, equivalent to &xep0045; temporary room which is automatically destroyed by the server when the users leave.   However, channels MAY be configured with an explicit lifetime, after which the channel MUST be removed by the MIX server.   Where a channel is created for ad hoc use, it may be desirable to keep the channel for history reference or for re-use by the same set of users.  Note that the owner of the channel does not need to have presence registered in the channel in order to destroy it.
     </p>
      <p>
        A client destroys a channel using a simple set operation, as shown in the following example.
      </p>
      <example caption="Client Destroys a Channel" ><![CDATA[
 <iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
  <destroy channel='coven' xmlns='urn:xmpp:mix:0'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
</iq>
]]></example>
    </section3>
    <section3 topic='Server Destroying a Channel' anchor='usecase-server-destroy'>
      <p>
        A server MUST destroy a channel that has exceeded its specified explicit lifetime.
        Servers may destroy channels which have no participants and/or presence according to local policy.   There will often be good reasons to not destroy rooms in these scenarios, in particular to facilitate channel re-use and history access.
      </p>
    </section3>
    <section3 topic='Modifying Channel Information' anchor='usecase-admin-information'>
      <p>Authorized users, typically owners and sometimes administrators, may modify the channel information.   The client MAY issue a pubsub get command to obtain a form that will facilitate update of the information node.   The values in the form show current values, which be defaults or may have been explicitly set.  In the following example, the channel name was previously set, but other values were not. </p>
      <example caption="Getting Information Form" ><![CDATA[
 <iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
     <pubsub xmlns='http://jabber.org/protocol/'>
         <items node='urn:xmpp:mix:nodes:info'/>
     </pubsub>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
    <pubsub xmlns='http://jabber.org/protocol/'>
     <items node='urn:xmpp:mix:nodes:info'>
       <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <title>Information Node Modification</title>
        <field type='text-multi'
               label='Channel Name'
               var='Name'>
            <value>Witches Coven</value>
        </field>
        <field type='text-multi'
               label='Channel Description'
               var='Description'/>
         <field type=jid-single'
                label='Channel Administrative Contact'
                var='Contact'/>
      </x>
    </items>
  </pubsub>
</iq>
]]></example>
      <p>  Updating the information node is done using a pubsub set command.  The MIX channel MUST update the fields with values provided, leaving other fields unchanged.  The result returns the id used in the information node item, which is the date/time of the modification. </p>
      <example caption="Modifying Channel Information" ><![CDATA[
 <iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
     <publish node='urn:xmpp:mix:nodes:info'>
       <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='Name'>
            <value>Witches Coven</value>
        </field>
        <field var='Description'>
           <value>A location not far from the blasted heath where the three witches meet</value>
         </field>
         <field var='Contact'>
           <value>greymalkin@shakespeare.lit</value>
         </field>
      </x>
     </publish>
  </pubsub>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <publish node='urn:xmpp:mix:nodes:info'>
        <item id='2016-05-30T09:00:00' xmlns='urn:xmpp:mix:0'/>
       </publish>
   </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Modifying Channel Configuration' anchor='usecase-admin-information'>
      <p>Channel owners may modify the channel configuration.    The client MAY issue a pubsub get command to obtain a form that will facilitate update of the configuration node.  Other clients MAY be authorized to use this command to see the channel configuration, but only owners may update the configuration.   The values in the form show current values, which be defaults or may have been explicitly set.  The following example shows a short form returned to illustrate the syntax.   A typical configuration form will be much larger with many fields. </p>
      <example caption="Getting Configuration Form" ><![CDATA[
 <iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <items node='urn:xmpp:mix:nodes:config'/>
     </pubsub>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <items xmlns='urn:xmpp:mix:0'  node='urn:xmpp:mix:nodes:config'>
       <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <title>Configuration Node Modification</title>
         <field type=jid-multi'
                label='Channel Administrator'
                var='Administrator'/>
      </x>
     </items>
   </pubsub>
</iq>
]]></example>
      <p>  Updating the information node is done using a pubsub set command.  The MIX channel MUST update the fields with values provided, leaving other fields unchanged.  The result returns the id used in the configuration node item, which is the date/time of the modification. </p>
      <example caption="Modifying Channel Configuration" ><![CDATA[
 <iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <publish node='urn:xmpp:mix:nodes:config'>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
             <value>urn:xmpp:mix:0</value>
        </field>
        <field var='Owner'>
            <value>hecate@shakespeare.lit</value>
        </field>
        <field var='Owner'>
            <value>greymalkin@shakespeare.lit</value>
        </field>
        <field var='Message Node Subscription'>
           <value>allowed</value>
         </field>
        <field var='JID Visibility'>
           <value>jid-mandatory-visible</value>
         </field>
         <field var='No Private Messages'>
            <value>true</value>
         </field>
      </x>
     </publish>
   </pubsub>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <publish node='urn:xmpp:mix:nodes:config'>
        <item id='2016-05-30T09:00:00' xmlns='urn:xmpp:mix:0'/>
       </publish>
   </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Controlling Channel Partipcipants' anchor='usecase-admin-participants'>
      <p>
       Owners and Administrators may control which users can participate in a channel by use of Allowed and Banned lists using PubSub.  These operations follow &xep0060; which sets out detailed protocol use and error handling.
       Allowed and Banned lists may be read by PubSub get of the Banned and Allowed Nodes.  This operation may be used by users as controlled by 'Allowed Node Subscription' and 'Banned Node Subscription' configuration node options (default Administrators).
      </p>
      <example caption="Client Reads Allowed Node" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
         <items node='urn:xmpp:mix:nodes:allowed'/>
    </pubsub>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
         <items node='urn:xmpp:mix:nodes:allowed'>
            <item id='@shakespeare.lit'/>
            <item id='alice@wonderland.lit'/>
         </items>
    </pubsub>
</iq>
]]></example>
      <p>
        JIDs can be added to the  Allowed and Banned nodes  by a pubsub set command.  This is used to add one item to a node.
      </p>
 <example caption="Client Adds a JID to the Allowed Node" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
        <publish node='urn:xmpp:mix:nodes:allowed'>
            <item id='@marlow.lit'/>
         </items>
    </pubsub>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'/>
</iq>
]]></example>
      <p>
        JIDs can be removed from the Allowed and Banned nodes by pubsub retract command.
      </p>
    <example caption="Client Removes a JID to the Banned Node" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
        <retract node='urn:xmpp:mix:nodes:banned'>
            <item id='lear@shakespeare.lit'/>
         </items>
    </pubsub>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'/>
</iq>
]]></example>
      <p>
        When the MIX channel adds a JID to the banned node, other nodes in the MIX channel will be appropriately updated to reflect this change.  In particular, the participants nodes and presence nodes will be updated to remove matching JIDs.    This will have the effect of immediately removing the user from the channel.  For this reason, there is no requirement to have the "kick" functionality of MUC, as this is achieved by banning the user.
      </p>
    </section3>

  </section2>

</section1>


<section1 topic="MIX Proxy" anchor="mix-proxy">
  <p>
    This section defines behaviour of the MIX Proxy Service, so that the full MIX specification for clients and servers is set out in a single document.    MIX Proxy support MUST be provided by servers used by clients that participate in MIX channels.  In future, MIX Proxy specification may be moved to a separate XEP or it may be incorporated into
 &xep0376; (PAM) which follows a model close to MIX Proxy.
  </p>

  <section2 topic="MIX Client Activation" anchor="proxy-activation">
    <p>
      All messages from MIX channels to users are sent to the user's MIX Proxy, which resides on the user's XMPP server.   The MIX Proxy will send on these messages to each of the user's clients that has activated the MIX service.    MIX provides capabilities for an online client to activate and de-activate MIX for that client.  A client may activate MIX for all the user's channels or for a selected list.   This will enable a mobile client to choose to receive only messages from selected MIX channels.    Activation uses  an IQ set with an &lt;activate&gt; element to instruct the MIX proxy to activate the client.   The server responds with a result to confirm activation.  The client may include one or more &lt;channel&gt; elements, to identify an explicit list of channels that are activated for the client.   If mo channels are specified, activation is for all channels where the user is a participant.  A client supporting MIX will typically activate MIX as soon as it comes online, but a client may also choose to only activate MIX for specific periods.
    </p>

      <example caption="Client Activates use of MIX Proxy" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    type='set'>
  <activate xmlns='urn:xmpp:mix:0'>
      <channel>coven@mix.shakespeare.lit</channel>
      <channel>spells@mix.shakespeare.lit</channel>
  </activate>
</iq>

<iq from='shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <activate xmlns='urn:xmpp:mix:0'/>
</iq>
]]></example>

    <p>
      A client will deactivate MIX using a corresponding deactivate command.   This will deactivate all MIX channels.   This will often be done when the client closes down, but may also be done at other times the client chooses. Deactivation uses  an IQ set with an &lt;deactivate&gt; element to instruct the MIX proxy to activate the client.
    </p>

    <example caption="Client Deactivates use of MIX Proxy" ><![CDATA[
<iq from='hag66@shakespeare.example/intibo24'
    id='lx09df27'
    type='set'>
  <deactivate xmlns='urn:xmpp:mix:0'/>
</iq>

<iq from='shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <deactivate xmlns='urn:xmpp:mix:0'/>
</iq>
]]></example>

    <p>
      If a client goes offline, the server's MIX Proxy MUST deactivate MIX immediately.   This will mean that standard client behaviour will be to activate MIX when they come online.
    </p>

  </section2>

  <section2 topic="Messages From MIX Channels" anchor="proxy-from">
    <p>
      Messages from a MIX channel will usually go to the MIX proxy.   The only exception to this is where the MIX channel is responding directly to messages from the client.   Messages and presence distributed but a MIX channel will always be sent to the MIX Proxy.  The MIX Proxy will simply send on the messages from the channel to each of the user's clients which have activated the channel with the MIX Proxy.   If there are no clients activated, the message is dropped.
    </p>
    <p>
      Messages sent to the MIX Proxy will always be addressed to the user's bare JID.  The MIX proxy will modify the recipient to the full JID of each client to which the message is forwarded.    The MIX Proxy MUST NOT make any other modifications to each message.
    </p>
  </section2>

  <section2 topic="Messages To MIX Channels" anchor="proxy-to"></section2>
  <p>
    The MIX specification requires that some messages are sent through the MIX Proxy and allows other messages to be sent through the MIX Proxy.   This enables the MIX Proxy to use information from the client to improve the MIX Proxy function.  The messages sent by the client to the MIX proxy will come from the client's full JID.  The MIX proxy will modify the messages to come from the bare JID.   This modification is transparent to the MIX client.   The client will always send messages from the full JID and the MIX Proxy will modify the message to ensure MIX compliance.
  </p>

  <section2 topic="Roster Management" anchor="proxy-roster">
    <p>
      The MIX Proxy is responsible for ensuring that MIX channels are correctly entered into the user's roster.   This is provided as a generic client independent service for the user.
    </p>
    <p>
      The MIX Proxy SHOULD ensure that only presence information from activated MIX clients is sent to the MIX channel.  So, if a user has two online clients, but only one is activated for a given MIX channel, then the channel SHOULD only receive presence information relating to the activated client.
    </p>
  </section2>

  <section2 topic="MAM Archive Support" anchor="proxy-mam">
    <p>
      MAM Archive is not a part of the MIX Proxy.   However, it is important to note that archive of channel information is done by the user's server.   Where a message is sent to the MIX Proxy and discarded because there are no active clients, it will still be archived.   This means that the messages will be available in the local archive and can be picked up by clients when they come online.
    </p>
  </section2>
</section1>

<section1 topic="Supporting MIX and MUC together" anchor="mix-and-muc-together">
  <p>
    MIX is specified as a service that can be used independent of MUC and a MIX service may be implemented without MUC.  If both MIX and MUC are implemented, three approaches are noted.
  </p>
  <ol>
    <li>Entirely separate MIX and MUC implementation, with MIX and MUC using separate domains and MIX channels being completely separate from MUC rooms.</li>
    <li>Fully integrated MIX and MUC implementation, with MIX and MUC sharing a single domain and rooms/channels equivalent.</li>
    <li>Partially integrated MIX and MUC implementation, with MIX and MUC using separate domains, but rooms/channel are common.  This means that each MIX channel will have MUC room of the same name and same participants.</li>
  </ol>
  <p>The fully integrated approach would be transparent to clients.    Disco of a room or channel would show support for both MUC and MIX, which would enable a client to choose whether to use MUC or MIX.  The following example shows how a MIX service that also supported MUC would respond:</p>
  <example caption="Service responds with Disco Info result showing MIX and MUC support" ><![CDATA[
<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='urn:xmpp:mix:0'/>
    <feature var='http://jabber.org/protocol/muc'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>urn:xmpp:mix:0#serviceinfo</value>
      </field>
    </x>
  </query>
</iq>
]]></example>
  <p>For the partially integrated service, it will be useful for clients that support both MIX and MUC to be able to determine that the server supports both protocols.   For a MIX client, it will be useful to know the MUC service, so that this information can be shared with a MUC client invitation.   This information is provided by the initial service discovery:</p>
    <example caption="MIX Service responds with Disco Info result sharing MUC service location" ><![CDATA[
<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='urn:xmpp:mix:0'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>urn:xmpp:mix:0#serviceinfo</value>
      </field>
      <field var='muc-mirror'
             type='jid-single'
             label='Location of MUC mirror service'>
        <value>chat.shakespeare.example</value>
      </field>
    </x>
  </query>
</iq>
]]></example>
    <p>The result is returned in an extended disco results in a form whose type value is 'urn:xmpp:mix:0#serviceinfo'.  The  field with var='muc-mirror' is the value of which is the mirrored MUC domain's JID.  </p>
    <p>Where a client supporting both MIX and MUC is given a reference to a MUC room, it is desirable that the client can determine the MIX channel and join using MIX.   This is achieved by an equivalent extension to MUC service discover.</p>
  <example caption="MUC Service responds with Disco Info result sharig MIX service location" ><![CDATA[
<iq from='chat.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='http://jabber.org/protocol/muc'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>urn:xmpp:mix:0#serviceinfo</value>
      </field>
      <field var='mix-mirror'
             type='jid-single'
             label='Location of MUC mirror service'>
        <value>mix.shakespeare.example</value>
      </field>
    </x>
  </query>
</iq>
]]></example>
  <p>The result is returned in an extended disco results in a form whose type value is 'urn:xmpp:mix:0#serviceinfo'.  The  field with var='mix-mirror' is the value of which is the mirrored MIX domain's JID.  </p>
  <section2 topic="Choosing Which Invite to Send" anchor="mix-muc-invite-choice">
    <p>
      Where a client supports MUC and MIX and has determined that for a channel that the server also supports a MUC room, the client has a choice as to which type of invite to send.   This SHOULD be done by determining if the client support MIX using the mechanism specified in
       <link url='#mix-client-discovery'>Discovering Client MIX Capability</link>.  If the client supports MIX a MIX invite SHOULD be sent.
    </p>
  </section2>

</section1>

<section1  topic="Capabilities not provided in MIX" anchor="not-included-from45">
  <p>This section lists a number of capabilities not specified in this version of MIX which were provided in &xep0045;.   </p>
  <section2 topic="Password Controlled Channels" anchor="password-control">
    <p>
      &xep0045; provides a mechanism to control access to MUC rooms using passwords.  An equivalent mechanism is not included in MIX, as it has a number of security issues.  Control of access to channels is better achieved using an explicit list of participants.
    </p>
  </section2>
  <section2 topic="Voice Control" anchor="voice-control">
    <p>
      &xep0045; defines a mechanism so that MUC moderators can control who is able to send messages to a MUC room using a "voice" mechanism.  The current version of MIX does not include this.   This might be added to a future version of this XEP or as a separate XEP if this capability becomes an agreed requirement.
    </p>
  </section2>

</section1>

<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>MIX allows specification of a number of human readable strings associated with a MIX channel, in particular the subject of a  MIX channel and name and description information.   These strings may have language set using an xml:lang attribute, and multiple values may be set provided that each one is distinguished using xml:lang.
  </p>

  <p>Nicknames SHOULD be normalized using the "nickname" profile of the PRECIS OpaqueString class, as defined in &rfc7700;. </p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>MIX is built over MAM and PubSub and the security considerations of &xep0313; and &xep0060; should be considered. These services protect MIX channel information, which may be sensitive and needs appropriate protection.</p>
  <p>MIX channels may be JID Hidden, in order to hide the JIDs of channel participants from those accessing the channel.  Care must be taken to ensure that JIDs are fully hidden. In particular when proxy JIDs are prepared, this MUST be done in a manner which ensure that the real JIDs cannot be determined.   Where nicks are assigned by a channel, this MUST be done in a way that does not expose the JID.</p>
  <p>
    There is no MIX equivalent to &xep0045; password controlled rooms, which avoids a number of security issues.
  </p>
  <p>
    MIX provides flexible access control options, which should be used in a manner appropriate to the security requirements of MIX users and services.
  </p>

</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>None.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>The urn:xmpp:mix namespace must be registered.</p>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <p>To be supplied when MIX progresses to proposed standard.</p>
</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to the following who have made contributions: Dave Cridland, Philipp Hancke, Waqas Hussain, Timothée Jaussoin,  Georg Lukas, Ralph Meijer, Edwin Mons, Emmanuel Gil Peyrot, Florian Schmaus, Lance Stout, Sam Whited, Matthew Wild and one anonymous reviewer.</p>
</section1>

</xep>

