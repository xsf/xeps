<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<?xml-stylesheet type="text/css" href="xmpp.css"?>
<xep>
<header>
  <title>Mediated Information eXchange (MIX)</title>
  <abstract>This document defines Mediated Information eXchange (MIX), an XMPP protocol extension for the exchange of information among multiple users through a mediating service. The protocol can be used to provide human group communication and communication between non-human entities using channels, although with greater flexibility and extensibility than existing groupchat technologies such as Multi-User Chat (MUC).   MIX uses Publish-Subscribe to provide flexible access and publication, and uses Message Archive Management (MAM) to provide storage and archiving. </abstract>
  &LEGALNOTICE;
  <number>0369</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0054</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0084</spec>
    <spec>XEP-0128</spec>
    <spec>XEP-0198</spec>
    <spec>XEP-0292</spec>
    <spec>XEP-0297</spec>
    <spec>XEP-0313</spec>
    <spec>XEP-0372</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>MIX-CORE</shortname>
  &ksmithisode;
  &skille;
  <revision>
    <version>0.14.6</version>
    <date>2020-12-01</date>
    <initials>gh/@mathieui</initials>
    <remark><p>Fix minor typo</p></remark>
  </revision>
  <revision>
    <version>0.14.5</version>
    <date>2020-11-03</date>
    <initials>gh/@melvo</initials>
    <remark><p>Fix various typos</p></remark>
  </revision>
  <revision>
    <version>0.14.4</version>
    <date>2020-03-26</date>
    <initials>egp</initials>
    <remark><ul>
      <li>Add missing disco#info features or identities in disco#info examples.</li>
      <li>Fix typo in examples (xlns→xmlns).</li>
      <li>Rename urn:xmpp:mix:nodes:information to urn:xmpp:mix:nodes:info in the text.</li>
      <li>Add a way to unsubscribe from nodes without leaving a channel.</li>
    </ul></remark>
  </revision>
  <revision>
    <version>0.14.3</version>
    <date>2020-03-03</date>
    <initials>ps</initials>
    <remark><p>Minor editorial fixes</p></remark>
  </revision>
  <revision>
    <version>0.14.2</version>
    <date>2019-03-18</date>
    <initials>sek</initials>
    <remark><p>
      Replace &lt;submission-id/&gt; with XEP-0359;
      Make Message Archiving Optional;
      Clarify that participant node only contains real JIDs;
      Change message retrieval from archive to reflect that MIX-PAM archive is now optional;
      Bump namespace to core:1;
    </p></remark>
  </revision>   
  <revision>
    <version>0.14.1</version>
    <date>2019-01-05</date>
    <initials>lnj</initials>
    <remark><p>
      Remove MIX xmlns from pubsub channel info &lt;item/&gt; example;
    </p></remark>
  </revision>   
  <revision>
    <version>0.14.0</version>
    <date>2018-12-10</date>
    <initials>sek</initials>
    <remark><p>
      remove node='mix' for channel discovery;
      ensure conference is type mix, and note registration requirements;
      fix retract id example; 
      clarify that channels always created with default parameters;
      change to reflect that XEP-0004 does not support multiple languages;
      correct retract to use pubsub syntax;
      editorial;
    </p></remark>
  </revision>   
  <revision>
    <version>0.13.0</version>
    <date>2018-06-06</date>
    <initials>sek</initials>
    <remark><p>
     Make Nicks mandatory by default;
     Add Nick Setting to Join;
    </p></remark>
  </revision>   
  <revision>
    <version>0.12.0</version>
    <date>2018-06-05</date>
    <initials>sek</initials>
    <remark><p>
      Remove Proxy JID;
      Add Stable Participant ID;
      Remove recommendation to generate Nick as UUID;
      Add guidance on Nick display;
    </p></remark>
  </revision>  
  <revision>
    <version>0.11.3</version>
    <date>2018-05-24</date>
    <initials>sek</initials>
    <remark><p>
      Fix example message with proxy JID;
    </p></remark>
  </revision> 
  <revision>
    <version>0.11.2</version>
    <date>2018-05-24</date>
    <initials>sek</initials>
    <remark><p>
      Add mandatory/optional table.
    </p></remark>
  </revision>
  <revision>
    <version>0.11.1</version>
    <date>2018-05-22</date>
    <initials>sek</initials>
    <remark><p>
      Editorial;
    </p></remark>
  </revision>
  <revision>
    <version>0.11.0</version>
    <date>2018-05-21</date>
    <initials>sek</initials>
    <remark><p>
      Remove PSA as author (as he requested);
      Major change to move non-core aspects to different XEPs;
    </p></remark>
  </revision>
  <revision>
    <version>0.10.1</version>
    <date>2018-05-12</date>
    <initials>marj</initials>
    <remark><p>Editorial fixes.</p></remark>
  </revision>
  <revision>
    <version>0.10.0</version>
    <date>2018-05-10</date>
    <initials>sek</initials>
    <remark><p>
      Clarify Owner/Administrator separation from participants and descriptions of channel roles;
      Clarify Owner handling on channel join;
      New default for configuration nodes present;
      Clarify configuration Last Change Made By;
      Clarify Mandatory Presence;
      Clarification of MIX annotation of roster updates;
      Replace contents of section 6.3 (Ensuring Message Delivery) with reference to future XEP;
      Add MIX Channels in Roster Section;
      Add Proxy JID Architecture Section;
      Add MUC Comparison Introduction Section;
      Add requirement to clarify MIX is intended for non-human use;
    </p></remark>
  </revision>
  <revision>
    <version>0.9.6</version>
    <date>2018-03-18</date>
    <initials>Editor (jwi)</initials>
    <remark><p>
      Fix typo errors with single quotes (marj). Editorial fixes (ralph)
    </p></remark>
  </revision>
  <revision>
    <version>0.9.5</version>
    <date>2018-01-08</date>
    <initials>sek</initials>
    <remark><p>
      Various Clarifications from Dave Cridland review:
      Remove Recommendation to do MIX/MUC on separate domains,
      Sort Default JID Visibility Preference,
      Make Owner optional,
      Clarify that Nick is optional;
    </p></remark>
  </revision>  <revision>
    <version>0.9.4</version>
    <date>2018-01-02</date>
    <initials>sek</initials>
    <remark><p>
      Various Clarifications from Georg Lukas review:
      Role Membership reword,
      Participant's Node Joining clarification,
      Joining Channel Clarification,
      Coming online clarification,
      Going offline JID error,
      Allow servers to limit retract time frame,
      Clarify that private messages must not be groupchat,
      Creating Channel Clarification,
      Address security concerns on Converting a 1:1 Conversation to a Channel,
      Remove requirement for all user clients to support MIX,
      Change Retract to use MAM-ID;
      Ensure use of .example throughout (follow RFC conventions);
    </p></remark>
  </revision>
   <revision>
    <version>0.9.3</version>
    <date>2017-07-18</date>
    <initials>sek</initials>
    <remark><p>
      Remove Legacy MIX Namespace;
      Add mix element in message to hold MIX additional information;
      Roster Update Clarifications;
      Clarify when messages are delivered to clients;
      Extend Roster Get to select format;
      Ensure that text defining attributes and elements reference the namespace;
      Change mix_nick_register to nick-register;
      Separate namespace for roster information;
      rename jidmap2 to jidmap-visible;
      Namespace bump to mix:1;
      Correct from in response of join/leave IQs;
      Add capability for MIX in client's server;
    </p></remark>
  </revision>
  <revision>
    <version>0.9.2</version>
    <date>2017-04-03</date>
    <initials>sek</initials>
    <remark><p>
      Fix xmpp:nodes typos;
      Remove namespace references in Info/Config nodes;
      Modify Participant and JID Map syntaxes;
      Clarifications on subscription to participants node and using this to receive Nick changes;
      Replace use of "query" as MIX defined operations for setting nick;
    </p></remark>
  </revision>
  <revision>
    <version>0.9.1</version>
    <date>2017-03-29</date>
    <initials>sek</initials>
    <remark><p>
      Editorial Changes (addressing comments  from Timothée Jaussoin);
    </p></remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2017-03-22</date>
    <initials>sek</initials>
    <remark><p>
      Editorial Changes (mainly from Georg Lukas);
      Change to new syntax for proxy JIDs;
      Clarify MAM archive on Send;
      Extend to sort Selected JID visibility;
      Add examples of lookup read JID from proxy JID;
    </p></remark>
  </revision>
  <revision>
    <version>0.8.2</version>
    <date>2017-03-03</date>
    <initials>sek</initials>
    <remark><p>
     Make example ids pseudo-random;
     Shorten the example BIND2 resources;
     Fix Disco features to not use second namespace;
     Correct encoding of jid-multi;
     MAM intro clarification;
     Always add to roster, with direction of roster controlled by share preference;
    </p></remark>
  </revision>
  <revision>
    <version>0.8.1</version>
    <date>2017-02-20</date>
    <initials>sek</initials>
    <remark><p>
      Editorial Updates;
      Clarify Access to MAM history, prior to user joining channel;
      Add option for user to join without presence;
      Check invitee supports MIX;
    </p></remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2017-02-13</date>
    <initials>sek</initials>
    <remark><p>
      Update after Brussels Summit;
      Remove Explicit Client Activation and replace with client capability discovery (summit 3);
      Limit Indirect to Join/Leave;
      Clarify Server use of Disco of Client;
      Add MIX capability information to Roster (summit 10);
      MIX as Core Spec (summit 1);
      Clarifications of password control, voice and name/description (summit 4/5/6)
      Removal of Subject and reference future Sticky Messages XEP (summit 7);
      Use example JIDs aligned to anticipated BIND2 specification;
      Clarify PubSub Node Type;
      Add Error handling section;
      Substantial Editorial Review;
    </p></remark>
  </revision>
  <revision>
    <version>0.7.1</version>
    <date>2017-01-30</date>
    <initials>sek</initials>
    <remark><p>
      Ensure all RFC 2119 keywords are capitalized and used correctly;
      Use MAM ID to identify message;
      Clarify use of the various channel names;
      Require all client operations to be direct or indirect (choice is just confusing);
      Add description of implicit activation ;
      MIX Domains must not contain users;
      Clarification on identifying channels in rosters;
    </p></remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2017-01-27</date>
    <initials>sek</initials>
    <remark><p>
      Correct multi-language subject setting;
      Remove MIX Proxy terminology and replace with Participant Server Behaviour;
    </p></remark>
  </revision>
  <revision>
    <version>0.6.5</version>
    <date>2017-01-10</date>
    <initials>sek</initials>
    <remark><p>
      Modify MIX Proxy so that client sends to bare JID
    </p></remark>
  </revision>
  <revision>
    <version>0.6.4</version>
    <date>2017-01-10</date>
    <initials>sek</initials>
    <remark><p>
      Add node='mix' to channel disco to facilitate MIX and MUC co-existence on same node;
      Return Proxy JID on Join;
      Adjustment to message reflection
    </p></remark>
  </revision>
  <revision>
    <version>0.6.3</version>
    <date>2016-12-22</date>
    <initials>sek</initials>
    <remark><p>
      Add Update and Distribution to Table 3;
      Correct from in messages from channel;
      Use XEP-0297 in message forwarding;
      Update Dependent XEPs
    </p></remark>
  </revision>
  <revision>
    <version>0.6.2</version>
    <date>2016-12-21</date>
    <initials>sek</initials>
    <remark><p>
      Editorial Changes (Georg Lukas Review);
      Improve 1:1 Conversion;
      Sort out MIX Proxy and Presence Update
    </p></remark>
  </revision>
  <revision>
    <version>0.6.1</version>
    <date>2016-12-05</date>
    <initials>sek</initials>
    <remark><p>
      Clarify Direct PubSub access to each node type.
    </p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2016-12-02</date>
    <initials>sek (XEP Editor: ssw)</initials>
    <remark><p>
     Added Internationalization Consideration section, and various I18n edits;
     Added Security Considerations section;
     Tombstoning of Redaction changes made optional;
     Added a section specifying MIX Proxy;
     Change configuration and information node management to directly use PubSub;
     Provide for XEP-0202 (vCard4 over XMPP) in addition to vcard-temp support.
    </p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2016-11-04</date>
    <initials>sek (XEP Editor: ssw)</initials>
    <remark><p>
      Complete and restructure Administration Section: Creating Channels and modifying configuration;
      Add avatar nodes;
      Add section on roster handling;
      Discovering MIX Services;
      Resolve questions on future capabilities;
      Administration of Allowed/Banned; clarify Kick functionality is replaced;
      User Presence Probes on Channel Start-up;
      Add user Presence preference;
      Clarify and Expand MAM Archiving;
      Sort Retraction;
      Add Marker IQ;
      Conversion 1:1
    </p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2016-09-21</date>
    <initials>sek</initials>
    <remark><p>Clarification of MIX Proxy concept; Clarify node definitions; Make all nodes optional; Merge ACL node into configuration node; Add information node including avatar; Resolve 4.1 question by accepting provisional answer; Add discovery examples; setting and sharing Subject; Protocol to request channel information and participants;  vCard Request;  Private Messages; Set user preferences with XEP-0004; Remove references to member and occupant;  Add Role Definition;  Add Banned and Allowed Nodes;  Update Configuration Definition;Add information on original id to message reflected back to sender  Add XEP-0372 mechanism to reference channel and informal invite;  Channel Invitations </p></remark>
  </revision>
  <revision>
    <version>0.3.1</version>
    <date>2016-09-07</date>
    <initials>sek</initials>
    <remark><p>Introduce MIX Proxy concept.   Add MIX capability in client discovery.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2016-09-05</date>
    <initials>sek</initials>
    <remark><p>Addressing comments from review of 0.2 and expansion/clarification of MUC/MIX dual working</p></remark>
  </revision>
  <revision>
    <version>0.2.3</version>
    <date>2016-09-01</date>
    <initials>ssw, ks</initials>
    <remark><p>Cleanup, use precis nickname for nicknames, and allow multiple subject languages.</p></remark>
  </revision>
  <revision>
    <version>0.2.2</version>
    <date>2016-08-26</date>
    <initials>ssw</initials>
    <remark><p>Phrasing and grammar.</p></remark>
  </revision>
  <revision>
    <version>0.2.1</version>
    <date>2016-08-25</date>
    <initials>sek, egp</initials>
    <remark><p>Includes Link Mauve (Emmanuel Gil PEYROT) editorial changes</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2016-08-16</date>
    <initials>sek, ks</initials>
    <remark><p>Significant update based on XMPP Summit discussions</p></remark>
  </revision>
  <revision>
    <version>0.1.1</version>
    <date>2016-03-17</date>
    <initials>XEP Editor (ssw)</initials>
    <remark><p>Fix XML in join example.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2016-01-07</date>
    <initials>XEP Editor (asw)</initials>
    <remark><p>Initial published version approved by the XMPP Council.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2015-10-12</date>
    <initials>kis/psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>The Mediated Information eXchange (MIX) protocol is intended as a replacement for Multi-User Chat (MUC). MUC is a major application of XMPP that was developed in 2002 and standardized in &xep0045;. MIX implements the same basic MUC patterns in a more flexible and extensible way in order to address requirements that have emerged since MUC was developed. MIX supports all of the core chatroom features that are familiar from MUC, such as discussion topics and invitations. Like MUC, it also defines a strong access control model, including the ability to ban users, to name administrators, and to provide controls as to which users can participate in channels.</p>
  <p>Several reasons exist for replacing MUC:</p>
  <ul>
    <li>A number of use cases for group communication have emerged since MUC was first published.</li>
    <li>Experience has shown that it is difficult to use MUC to build several kinds of communication applications (such as a multimedia conference) without undesirable adaptations.</li>
    <li>It is impractical to address a number of the requirements listed in the next section with MUC or with extensions to MUC. </li>
    <li>In the years after MUC was designed, both &xep0060; and &xep0313; have been developed and it is desirable to reuse these building blocks (e.g., MAM can be used for message history) rather than using the less robust methods defined in &xep0045;.</li>
  </ul>
  <p>Because it is anticipated that there will be significant co-existence between MUC and MIX, this specification is designed so that:</p>
  <ul>
    <li>XMPP clients can implement MUC and this specification in a way that provides a coherent user experience.</li>
    <li>XMPP servers can implement this specification and also provide a MUC interface in order to support clients that only implement MUC.</li>
  </ul>
  <p>MIX gives guidance on supporting both MUC and MIX representations of chatrooms.</p>
</section1>

<section1 topic='Requirements' anchor='reqs'>

<p>The following requirements have been identified, which MIX aims to address.</p>
  <ol>
    <li>A user's participation in a channel persists and is not modified by the user's client going online and offline.</li>
    <li>Multiple devices associated with the same account can share the same nick in the channel, with well-defined rules making each client individually addressable.</li>
    <li>Channels are NOT REQUIRED to support or reflect presence for participants.</li>
    <li>A reconnecting client can quickly resync with respect to messages and presence.</li>
    <li>A user MAY (subject to configuration) receive messages from a channel as an invisible observer.</li>
    <li>Configuration can be observed externally to the channel (e.g., list of participants, access control rights, etc.).</li>
    <li>MIX services SHOULD provide mechanisms to prevent JIDs from being harvested.</li>
    <li>MIX and Message Archive Management (MAM) MUST work well together.</li>
    <li>A user can determine which channels they participate in.</li>
    <li>Provide extensibility regarding data formats that can be sent within a channel (files, structured data, indications about media sources in multimedia conferences, etc.) as well as flexibility regarding which data formats a user wants to receive.</li>
    <li>Enable federation of a channel across multiple servers, to provide a service equivalent to "federated MUC" &xep0289;.</li>
    <li>Enable sharing of messages on a channel without requiring sharing of presence.</li>
    <li>Enable sharing of presence without requiring message sending.</li>
    <li>(Desirable) Make it easier to reduce duplicate traffic.</li>
    <li>MIX should be suitable for use by humans and as a building block for other clients.</li>
 </ol>
</section1>

<section1 topic="MIX Specification Family" anchor="family">
  <p>MIX is specified as a family of XEPs that address the full set of requirements.   Only two of these XEPs are mandatory for providing a MIX service.  The others provide additional services and are used when these additional services are required.  Each of these specifications has a short name, which is used to refer the specific XEP.  The term MIX is used to refer to the family of XEPs.   MIX is extensible, and it is anticipated that further XEPs will be added to this family.   The XEPs are:  </p>

  <ol>
    <li>MIX-CORE.  &xep0369;.  This specification is the central mandatory MIX specification.  It sets out requirements addressed by MIX and general MIX concepts and framework.   It defines joining channels and associated participant management.  It defines discovery and sharing of MIX channels and information about them.   It defines use of MIX to share messages with channel participants. </li>
    <li>MIX-PRESENCE. &xep0403;. This optional specification adds the ability for MIX online clients to share presence, so that this can be seen by other MIX clients. It also specifies relay of IQ stanzas through a channel.</li>
    <li>MIX-PAM.  &xep0405;. This  specification defines how a server supporting MIX clients behaves, to support servers implementing MIX-CORE and MIX-PRESENCE.</li>
    <li>MIX-ADMIN. &xep0406;.  This specifies MIX configuration and administration of MIX.</li>
    <li>MIX-ANON.  &xep0404;. This specifies a mechanism to hide real JIDs from MIX clients and related privacy controls.  It also specifies private messages. </li>
    <li>MIX-MISC.  &xep0407;. This specifies a number of small MIX capabilities which are useful but do not need to be a part of MIX-CORE. </li>
    <li>MIX-MUC. &xep0408;. This defines how MIX and MUC can be used together. </li>
    <li>RELIABLE-DELIVERY.  MIX-CORE needs messages to be distributed without loss.   This specification is important for MIX, but may be useful in other places.</li>
  </ol>
  <p>
    The following table shows which of these specification is mandatory or optional for a MIX server, a server supporting MIX users, a general purpose end user client, and a client providing MIX channel administration.
  </p>
  <table caption="Optional/Mandatory Status of the MIX Specifications">
    <tr><th>Specification</th><th>MIX Server</th><th>Server supporting MIX Clients</th><th>End User MIX Client</th><th>Administrative MIX Client</th></tr>
    
    <tr><td>MIX-CORE</td><td>Mandatory</td><td>n/a</td><td>Mandatory</td><td>Mandatory</td></tr>
    <tr><td>MIX-PRESENCE</td><td>Optional</td><td>n/a</td><td>Optional</td><td>Optional</td></tr>
    <tr><td>MIX-PAM</td><td>n/a</td><td>Mandatory</td><td>Mandatory</td><td>Mandatory</td></tr>
    <tr><td>MIX-ADMIN</td><td>Optional</td><td>n/a</td><td>n/a</td><td>Mandatory</td></tr>
    <tr><td>MIX-ANON</td><td>Optional</td><td>n/a</td><td>n/a</td><td>Optional</td></tr>
    <tr><td>MIX-MISC</td><td>Optional</td><td>n/a</td><td>Optional</td><td>Optional</td></tr>
    <tr><td>MIX-MUC</td><td>Optional</td><td>n/a</td><td>Optional</td><td>n/a</td></tr>
    <tr><td>RELIABLE-DELIVERY</td><td>Optional</td><td>Optional</td><td>n/a</td><td>n/a</td></tr>
    
    
  </table>
</section1>

<section1 topic='Concepts' anchor='concepts'>
  <section2 topic="Comparison to MUC" anchor="concepts-muc-comparison">
    <p>
      This  section is written as an introduction to MIX for those with detailed knowledge of &xep0045;, to summarize key differences and some rationale for the differences.   For those unfamiliar with MUC, this section should be ignored.
    </p>
    <p>
      In MUC, a client joins a MUC room.   After this, the client is sent history information, presences, and messages until the client leaves the room by going offline.  Key MIX features as summarized below:
    </p>
    <ol>
      <li>MIX has "channels", which are equivalent to MUC rooms.</li>

      <li>MIX separates out various services, in particular messages and presence.   A MIX channel is implemented as a set of PubSub nodes, and a user (not client) can subscribe to a set of nodes.  This control means that users can subscribe to presence and/or messages, which gives useful flexibility.  This addresses requirements 3 and 5.  Subscribing to message and presence nodes gives a service broadly equivalent to MUC.</li>

      <li>Messages and presence sent by a MIX channel use the same formats as MUC and do not use PubSub encodings.</li>

      <li>Channels do not have a "subject".  This MUC capability is not supported by core MIX.</li>

      <li>Users join MIX channels for an extended period and participation is not impacted by clients going online and offline (requirement 1).   This means that a MIX client uses channel subscriptions as negotiated by the MIX user.</li>

      <li>MIX messages and presence are always sent and are addressed to the user (bare JID).   This addressing is a consequence of users (not clients) being the participants in a MIX channel; It is a key difference between MUC and MIX.  This addressing change means that the user's server needs to have MIX-specific behaviour to correctly distribute arriving messages and presence appropriately to MIX clients; there may be zero or more online clients that support MIX.   This server behaviour is specified by MIX. </li>

      <li>MIX messages are archived using MAM on the user's server.   This enables flexible access to channel history, independent of the MIX channel server. </li>

      <li>A user's roster contains the MIX channels to which the user is subscribed.   A client can use a MIX roster extension to determine which MIX channels the user is subscribed to.   When a client comes online, this will lead to directed presence for the client to be sent to each MIX channel.   A MIX channel can then share the user's presence with channel participants that have subscribed to the presence.    The MIX channel will also return to the client a full list of presence information for the channel.   This means that when a client comes online, it will receive presence updates for the participants in all subscribed MIX channels.</li>

      <li>In MIX, a Nick belongs to the user and not to each client.</li>

      


    </ol>
  </section2>

  <section2 topic="Specification Approach" anchor="concepts-approach">
    <p>
      MIX will enable a wide range of auxiliary services.  The goal of the MIX family of specification is to set out the core capabilities needed for MIX.   It is anticipated that additional XEPs will be written to extend the current MIX specification, and the  MIX specification family notes some areas where this may happen.     Profiles referencing sets of related MIX XEPs may be developed in the future.
    </p>
  </section2>
  <section2 topic="Core Concepts" anchor="concepts-core">
  <p>The following concepts underlie the design of MIX.</p>
  <ol>
    <li>MIX channels (roughly equivalent to MUC rooms) are hosted on one or more MIX domains, (examples: 'mix.example.com'; 'conference.example.com'; 'talk.example.com'), which are discoverable through &xep0030;. Each channel on a MIX service can then be discovered and queried.</li>
    <li> In MIX each channel (e.g., 'channel@mix.example.com') is a specialized pubsub service. This is based on the model from &xep0163; where every user JID (e.g., 'user@example.com') is its own pubsub service. </li>
    <li>A channel's pubsub service contains a number of nodes for different event types or data formats. As described below, this document defines several standard nodes; however, future specifications or proprietary services can define their own nodes for extensibility.</li>
    <li>Affiliations with the nodes are managed by the MIX service by channel level operations, so that the user does not have to separately manage affiliations with the individual PubSub nodes.
     </li>
    <li>&xep0313; (MAM) is used for all history access, with each node being individually addressable for MAM queries. This simplifies implementation compared to MUC (which had a specialized and rather limited history retrieval mechanism).</li>
    <li>A client can achieve a 'quick resync' of a node by requesting just those changes it has not yet received, using standard MAM protocol. This solves the MUC issue of either receiving duplicate messages when rejoining a room or potentially missing messages.</li>
    <li>Because MAM is used for history, only those nodes that have a 'current value' need to store any items in them &mdash; e.g., 'urn:xmpp:mix:nodes:presence' and 'urn:xmpp:mix:nodes:info' would store their current values (with older values being queryable through MAM), while 'urn:xmpp:mix:nodes:messages' would store no items.</li>
    <li>A user's participation in a channel outlives their client sessions. A client which is offline will not share presence within the channel, but the associated user will still be listed as an participant. </li>
    <li>Presence is sent to participants using bare JID, whether or not the user has an online client. </li>
    <li>Online clients MAY register presence, which is then shared with participants who have subscribed to presence.</li>
    <li>MIX decouples addressing of channel participants from their nicknames, so that nickname changes do not affect addressing.</li>
    <li>Each participant has a Stable Participant ID.  This is used in some derived JIDs to provide a stable participant reference.  It is used to hide JIDs in MIX-ANON.
    
    </li>
    <li> Although some protocol is shared with MUC, MUC clients are not interoperable with a MIX service. </li>
    <li>MIX requires the server to which the MIX client connects to provide functionality to support MIX.  This functionality is defined in this specification and referenced as "MIX Participant's Server Behaviour".</li>
    <li>MIX domains MUST NOT be used to host end user JIDs. </li>
  </ol>
  </section2>
  <section2 topic="MIX and PubSub" anchor="concepts-pubsub">
    <p>MIX is based upon domains providing a MIX service, such as 'mix.shakespeare.example'. Note that although PubSub communication is used, a domain used for MIX is a MIX domain and not a standard &xep0060; domain. Like MUC, there is no requirement on the naming of these domains; the label 'mix' used in examples in this specification and the fact that it is a subdomain of a 'shakespeare.example' service are purely for example.</p>
    <p>Every MIX channel is an addressable  service based on PubSub (with additional MIX semantics) that will be addressed using a bare JID by other XMPP entities, for example coven@mix.shakespeare.example. While &xep0060; is used as the basis for the MIX model, MIX uses standard presence and groupchat messages to provide an interface to the MIX service that does not expose PubSub protocol for many of the more common functions.
</p>
  </section2>
  <section2 topic="MIX and MAM" anchor="concepts-mam">
    <p> Historical data (such as the messages sent to the channel) is stored in an archive supporting  Message Archive Management (MAM) so that clients can subsequently access this data with MAM. Each node can be archived separately (e.g., the presence node or the configuration node).  MIX messages are archived by both the MIX channel and the user's server, so that clients can generally use their local MAM archiver.  MIX clients can retrieve archived information with MAM in order to quickly resync messages with regard to a channel, and can do so without providing presence information.</p>
  </section2>



  <section2 topic="Stable Participant ID" anchor="stable-id">

 <p>
   Every channel participant is identified by a Stable Participant ID, which uniquely identifies a channel participant and never changes.  The Stable Participant ID MUST NOT contain the '#', '/' or '@' characters. 

 </p>
   
    <p>
      A Participant's Stable Participant ID is defined when a participant joins a channel.  While a user is a participant in a Channel, the Stable Participant ID MUST NOT be changed.   This mapping between Participant and Stable Participant ID MUST be maintained after the participant leaves the channel.   Stable Participant ID values MUST NOT be re-used.   If a participant that left a channel joins the channel again, the same Stable Participant ID MAY be used again or a different Stable Participant ID MAY be assigned.
    </p>



  </section2>
  <section2 topic="Standard Nodes" anchor="concepts-nodes">
    <p>MIX defines a number of standard nodes, and this specification defines three of these nodes and the framework for adding further nodes.
    </p>
    <table caption="MIX-CORE Nodes">
      <tr><th>Name</th><th>Node</th><th>Description</th><th>Update</th><th>Distribution</th></tr>
      <tr><td>Messages</td><td>'urn:xmpp:mix:nodes:messages'</td><td>For distributing messages to the channel. Each item of this node will contain a message sent to the channel.</td><td>Message</td><td>Message</td></tr>
      <tr><td>Participants</td><td>'urn:xmpp:mix:nodes:participants'</td><td>For storing the list of participants and the associated nick.  Channel participants are added when they join the channel and removed when they leave.</td><td>Join/Leave/Set Nick</td><td>PubSub</td></tr>
      <tr><td>Information</td><td>'urn:xmpp:mix:nodes:info'</td><td>For storing general channel information, such as description. </td><td>PubSub</td><td>PubSub</td></tr>

    </table>
    <p>
      Participants is the only mandatory MIX node for a channel, which defines the set of clients that have joined the channel.   All other nodes are OPTIONAL.

      MIX provides mechanisms to allow users to conveniently subscribe to a chosen set of nodes and to unsubscribe to all nodes with a single operation.  Some nodes are accessed and managed with PubSub, whereas other nodes define MIX specific mechanisms for their use, as shown in the last two columns of the table.
    </p>



    <section3 topic="Node Archiving" anchor="node-archiving">
      <p>
        Nodes MAY be archived and where this is done MAM MUST be used.  Archiving of the Messages node MUST be done as part of the MIX-CORE specification.  Archiving of other nodes is OPTIONAL.
      </p>
    </section3>
    <section3 topic="Messages Node" anchor="messages-node">
      <p>
        The Messages node is used to distribute messages.   The Messages node is a transient node and so no PubSub items are held.  Messages MUST go to the associated MAM archive and history is retrieved by use of  MAM. Users subscribe to this node to indicate that messages from the channel are to be sent to them.   Private Messages are not distributed by the Messages node.

      </p>

    </section3>

    <section3 topic="Participants Node" anchor="participants-node">
      
      <p>Each channel participant is represented as an item of the 'urn:xmpp:mix:nodes:participants' channel node.  Each item is named by the Stable Participant ID of the participant. For example '123456' might name the node item associated with participant 'hag66@shakespeare.example'.  Information is stored in a &lt;participant/&gt; element qualified by the 'urn:xmpp:mix:core:1' namespace.   
      </p>
      <p>
       A Nick MAY be associated with a participant, which provides a user-oriented  description of the participant.  The nick associated with the user is stored in a &lt;nick/&gt; child element of the &lt;participant/&gt; element.   The nick for each channel participant MUST be different to the nick of other participants (where nicks have been assigned).
      </p>
      <p>
        A channel MAY require nicks to be mandatory for all participants.   This is the default behaviour, and nicks MUST only be optional when this is explicitly configured for a channel as specified in MIX-ADMIN.
      </p>
      <p>
        Where a nick is provided for a user, it is generally recommended to use this nick to display the user.   This enables consistent representation of participants for all participants in the channel.
      </p>
      <p>
        The real JID of the user MAY be held in the participants node.   When the real JID is not present, the procedures defined in MIX-ANON must be followed.  Note that only the real JID may be held in participants node.  Any JID derived from the stable ID MUST NOT be held.
        The user's JID is stored in a &lt;jid/&gt; child element of the &lt;participant/&gt; element.
      </p>
      <p>
        When a user joins a channel, an item representing the user is added to the participants node by the MIX service.   When a user leaves a channel, the user's item is removed from the participants node.  The participants node MUST NOT be directly modified using pubsub.
      </p>
      <p>
       It may be useful for clients to read the participants list.   However it is not necessary for message and presence display, as both messages and presence contain sufficient information to enable display.
      </p>
      <p>
        Users MAY subscribe to, and read information from this node, when permitted by the channel.  Standard PubSub access will allow a full list of participants and associated nicks to be determined.  By subscribing to the node, a user will be informed of changes to the Participants Node.
      </p>
      <p>The participants node is MANDATORY.   The Participants node is a permanent node with one item per participant.</p>
      <example caption="Value of Participants Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:participants'>
  <item id='123456'>
    <participant xmlns='urn:xmpp:mix:core:1'>
      <nick>thirdwitch</nick>
      <jid>hag66@shakespeare.example</jid>
    </participant>
  </item>
</items>
]]></example>
    </section3>
    <section3 topic="Information Node" anchor="info-node">

      <p>The Information node holds information about the channel.  It will often be helpful for MIX clients to be able to display this information.   The information node contains a single item with the current information.
        The information node is named by the date/time at which the item was created.   The information node is accessed and managed using standard pubsub.   The Information node is a permanent node with a maximum of one item.  Users MAY subscribe to this node to receive information updates. The Information node item MAY contain the following attributes, each of which is OPTIONAL:
      </p>
      <table caption="Information Node Attributes">
        <tr><th>Name</th><th>Description</th><th>Field Type</th><th>Values</th><th>Default</th></tr>
        <tr><td>'Name'</td><td>A short string providing a name for the channel.  For example "The Coven".  Typical uses of this value will be to present a user with the name of this channel in a list of channels to select from or as the header of UI display of the channel.  It is intended for use where a short string is needed to represent the channel.</td><td>text-single</td><td>-</td><td>-</td></tr>
        <tr><td>'Description'</td><td>A longer description of the channel. For example "The Place where the Macbeth Witches Meet up".   A typical use would be to provide a user with more information about the channel, for example in a tool tip.</td><td>text-single</td><td>-</td><td>-</td></tr>
        <tr><td>'Contact'</td><td>The JID or JIDs of the person or role responsible for the channel.</td><td>jid-multi</td><td>-</td><td>-</td></tr>

      </table>
      <p>
        Name and Description of the channel apply to the whole channel and will usually be changed infrequently.
      </p>
      <p>
        JID visibility is included in the Information Node as this is information that will be useful for participant clients and may also be important when choosing to join a channel.
      </p>
      <p>The name and description values MUST contain a "text" element and MAY contain additional text elements.  The format of the Information node follows &xep0004;.  This allows configuration to be updated by MIX defined commands and that the results of update commands are the same as the PubSub node.
      The following example shows the format of a item in the information node for the example coven@mix.shakespeare.example channel.
      </p>
      <example caption="Information Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:info'>
  <item id='2016-05-30T09:00:00'>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>urn:xmpp:mix:core:1</value>
      </field>
      <field var='Name'>
        <value>Witches Coven</value>
      </field>
      <field var='Description'>
        <value>A location not far from the blasted heath where
               the three witches meet</value>
      </field>
      <field var='Contact'>
        <value>greymalkin@shakespeare.example</value>
      </field>
    </x>
  </item>
</items>
]]></example>
    </section3>
  </section2>
  <section2 topic="Non-Standard Nodes" anchor="non-standard-nodes">
    <p>
      The MIX standard allows channels to use non-standard nodes, using names that do not conflict with the standard nodes.     Non-Standard nodes MUST NOT duplicate or otherwise provide capability that can be provided by standard nodes.
    </p>
  </section2>
</section1>

<section1 topic="Error Handling" anchor="error-handling">
  <p>
    The MIX specification is built on layered services that have defined errors.  This enables the core MIX specification to reflect primarily the successful use case, as in almost all cases the error reporting of the layer service provides what is needed.   A message sender MUST be prepared to handle any valid error from the layer services.   When a message receiver encounters an error situation, it MUST use the most appropriate layer server error to report this issue back to the sender.   For example a  receiving entity might use the "not authorized"  error in response to a  disco query that is not authorized.   Errors for the following layer services need to be handled for MIX:
  </p>
  <ol>
    <li>IQ.  All of the IQ errors of &rfc6120; MUST be supported.</li>
    <li>Messages.  If a message is received and an error situation is encountered, a message of type error MUST be sent back to the message sender. This message format is specified in &rfc6121; containing an error defined in &rfc6120;, which is the same error set as for IQs.</li>
    <li>PubSub.  Where MIX protocol messages use PubSub protocol, the errors defined in &xep0060; MUST be used and supported.</li>
  </ol>
</section1>
<section1 topic='Discovery' anchor='discovery'>
  <section2 topic='Discovering a MIX service' anchor='disco-service'>
    <p>
      An entity MAY discover a MIX service or MIX services by sending a Service Discovery items ("disco#items") request to its own server.
    </p>
    <example caption="Entity queries Server for associated services" ><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='lx09df27'
    to='shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>

<iq from='shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='mix.shakespeare.example'
          name='Shakespearean Chat Service'/>
    <item jid='mix2.shakespeare.example'
          name='Another Shakespearean Chat Service'/>
  </query>
</iq>
]]></example>
    <p>To determine if a domain hosts a MIX service, a &xep0030; info query is sent in the usual manner to determine capabilities.</p>
      <example caption="Entity queries a service" ><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <p>The MIX service then MUST return its identity and the features it supports, which MUST include the 'urn:xmpp:mix:core:1' feature, and the identity MUST have a category of 'conference' and a type of 'mix', as shown in the following example: </p>
    <example caption="Service responds with Disco Info result" ><![CDATA[
<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='mix'/>
    <feature var='http://jabber.org/protocol/disco#info'/>
    <feature var='urn:xmpp:mix:core:1'/>
    <feature var='urn:xmpp:mix:core:1#searchable'>
  </query>
</iq>
]]></example>
    <p>
      A MIX service MUST return the 'urn:xmpp:mix:core:1' feature  and MAY return the other features listed here:
     </p>
    <ul>
      <li>'urn:xmpp:mix:core:1': This indicates support of MIX, and is returned by all MIX services.</li>
      <li>'urn:xmpp:mix:core:1#searchable': This is shown in the above example and indicates that a the MIX Service MAY be searched for channels.   The presence of this feature can be used by a client to guide the user to search for channels in a MIX service.</li>
      <li>'urn:xmpp:mix:core:1#create-channel': This is described in <link url='#usecase-admin-check-create'> Checking for Permission to Create a Channel</link> in support of channel administration.   When an end user client  needs to create channels, perhaps for short term usage, this feature helps the client to identify a MIX service to use.  It enables a configuration where permanent (searchable) channels are placed in one MIX service and clients will be able to create channels in another MIX service which is not searchable.</li>
    </ul>
    <p>A MIX service MUST NOT advertise support for &xep0313;, as MAM is supported by the channels and not by the service.   A  MIX service MUST NOT advertise support for generic &xep0060;, as although MIX makes use of PubSub it is not a generic PubSub service.</p>
  </section2>
  <section2 topic='Discovering the Channels on a Service' anchor='disco-channel-list'>
    <p>The list of channels supported by a MIX service is obtained by a disco#items command.   The MIX service MUST only return channels that exist and that the user making the query has rights to subscribe to.  </p>
    <example caption='Client Queries for Channels on MIX Service'><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='kl2fax27'
    to='mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>
]]></example>
    <example caption='MIX Service Returns Disco Items Result'><![CDATA[
<iq from='mix.shakespeare.example'
    id='kl2fax27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='coven@mix.shakespeare.example' />
    <item jid='spells@mix.shakespeare.example' />
    <item jid='wizards@mix.shakespeare.example' />
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Discovering Channel Information' anchor='disco-channel-info'>
    <p>In order to find out more information about a given channel, a user can send a disco#info query to the channel. </p>
    <example caption='Entity Queries for Information about a Specific Channel'><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='ik3vs715'
    to='coven@mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <p>If the querying user is allowed to subscribe, the channel MUST return its identity and the features it supports.  Note that a MIX channel MUST support MAM and so the response will always include both MIX and MAM support. </p>
    <p>Note that a node MAY be both a MIX channel and a MUC room.   In this case, the node will return both MIX and MUC information.   MIX and MUC clients MUST be able to handle this.</p>
    <example caption='Channel Returns Disco Info Result'><![CDATA[
<iq from='coven@mix.shakespeare.example'
    id='ik3vs715'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='A Dark Cave'
        type='mix'/>
    <feature var='http://jabber.org/protocol/disco#info'/>
    <feature var='urn:xmpp:mix:core:1'/>
    <feature var='urn:xmpp:mam:2'/>
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Discovering Nodes at a Channel' anchor='disco-channel-nodes'>
    <p>Use disco#items to find the nodes associated with a channel.    The MIX service MUST only return nodes that exist and that the user making the query has rights to subscribe to. </p>
    <p>
      Discovering nodes in MIX MUST use a node='mix' attribute in this query.   This is to facilitate server implementations that support a single node being both a MIX channel and a MUC room.  MUC rooms use this query to return a list of occupants.  The  node='mix' attribute allows a server to support both MIX and MUC queries without requiring any change to MUC clients.  Where a node only supports a MIX channel, the server MUST reject queries without a node='mix' attribute.
    </p>
    <example caption='Entity Queries for Nodes at a Channel'><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='kl2fax27'
    to='coven@mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items' node='mix'/>
</iq>
]]></example>
    <example caption='Channel Returns Disco Items Result'><![CDATA[
<iq from='coven@mix.shakespeare.example'
    id='kl2fax27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items' node='mix'>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:presence'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:participants'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:messages'/>
    <item jid='coven@mix.shakespeare.example'
          node='urn:xmpp:mix:nodes:config'/>
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic="Determining Information about a Channel" anchor="find-channel-info">
    <p>The Information Node contains various information about the channel that can be useful to the user, that the client can access using PubSub, as shown below.</p>
    <example caption='Client Requests Channel Information'><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='kl2fax27'
    to='coven@mix.shakespeare.example'
    type='get'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:mix:nodes:info'/>
  </pubsub>
</iq>
]]></example>
    <example caption='MIX Service Returns Channel Information'><![CDATA[
<iq from='coven@mix.shakespeare.example'
    id='kl2fax27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:mix:nodes:info'>
      <item id='2016-05-30T09:00:00'>
        <x xmlns='jabber:x:data' type='result'>
          <field var='FORM_TYPE' type='hidden'>
            <value>urn:xmpp:mix:core:1</value>
          </field>
          <field var='Name'>
            <value>Witches Coven</value>
          </field>
          <field var='Description'>
            <value>A location not far from the blasted heath where
                   the three witches meet</value>
          </field>
          <field var='Contact'>
            <value>greymalkin@shakespeare.example</value>
          </field>
        </x>
      </item>
    </items>
  </pubsub>
</iq>
]]></example>
  </section2>
  <section2 topic='Determining the Participants in a Channel' anchor='find-channel-participants'>
    <p>
         Participants in the channel are determined using PubSub retrieval of the Participants Node which will give  Stable Participant
         ID,  JID and nick. Clients using a channel MAY determine participants on start-up, to enable display of participants.  </p>
    <example caption='User&apos;s Client Requests Participant List'><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='kl2fax27'
    to='coven@mix.shakespeare.example'
    type='get'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <items node='urn:xmpp:mix:nodes:participants'/>
    </pubsub>
</iq>
]]></example>
    <example caption='MIX Service Returns Participant List'><![CDATA[
<iq from='coven@mix.shakespeare.example'
    id='kl2fax27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <item id='123456'>
        <participant xmlns='urn:xmpp:mix:core:1'>
          <nick>thirdwitch</nick>
          <jid>hag66@shakespeare.example</jid>
        </participant>
      </item>
      <item id='87123'>
        <participant xmlns='urn:xmpp:mix:core:1'>
          <nick>top witch</nick>
          <jid>hecate@shakespeare.example</jid>
        </participant>
      </item>
    </items>
  </pubsub>
</iq>
]]></example>

  </section2>
  <section2 topic="Discovering Client MIX Capability" anchor="mix-client-discovery">
    <p>
      Where a client supports MIX, it MUST advertise this capability in response to a Disco request.    This will enable other entities to determine if a client supports MIX, and in particular it facilitates the client's server to determine client support.  This can be optimized by use of CAPS.    The following example shows a Disco request to and response from a client that supports both MIX and MUC.
    </p>
    <example caption='Disco Query for MIX support'><![CDATA[
 <iq from='juliet@capulet.example/UUID-e3r/9264'
     id='d1rt87mr4w'
     to='romeo@montague.example/UUID-m2t/3945'
     type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>


<iq from='romeo@montague.example/UUID-m2t/3945'
    id='d1rt87mr4w'
    to='juliet@capulet.example/UUID-e3r/9264'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='client'
        name='Swift'
        type='pc'/>
    <feature var='http://jabber.org/protocol/caps'/>
    <feature var='http://jabber.org/protocol/disco#info'/>
    <feature var='http://jabber.org/protocol/disco#items'/>
    <feature var='http://jabber.org/protocol/muc'/>
    <feature var='urn:xmpp:mix:core:1'/>
  </query>
</iq>
]]></example>
  </section2>
</section1>

<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Common User Use Cases' anchor='usecases-user'>
    <section3 topic="Model for Join and Leave" anchor="usecase-jl-model">
      <p>
        MIX Join and Leave communication goes through the client's server.   The full specification of client interaction with the client's server is specified in MIX-PAM.    This specification shows the protocol between the user's server and the MIX server and sets out behaviour of the MIX server.
      </p>
    </section3>
    <section3 topic='Joining a Channel' anchor='usecase-user-join'>
      <p>A user joins a channel by sending a MIX "join" command from one of the user's clients, which will be relayed to the server as specified in MIX-PAM. There is no default set of nodes, so the user MUST specify the set of nodes to be subscribed to. To achieve the equivalent service to MUC, a user would subscribe to both messages and presence nodes.  A user will typically subscribe to at least the message and/or presence nodes but MAY join and not subscribe to any nodes.  Note that the presence node is specified in MIX-PRESENCE.  The &lt;join/&gt; is a child element of &lt;iq/&gt; element.     The &lt;join/&gt; element is qualified by the 'urn:xmpp:mix:core:1' namespace.    The requested nodes are encoded as &lt;subscribe/&gt; child elements of the &lt;join/&gt; element.  A nick MAY be specified as a &lt;nick/&gt; child elements of the &lt;join/&gt; element. </p>
      <p>The join leads to the server subscribing the user to each of the requested nodes associated with the channel. The MIX service will also add the user to the participant list by injecting a new item into the "urn:xmpp:mix:nodes:participants" node automatically.</p>
      <p>The default MIX model is that only channel participants are allowed to subscribe to nodes.    A MIX channel MAY allow non-participant subscription to some nodes.   This will be handled by clients directly subscribing to the desired PubSub nodes.</p>
      <p>The user's server needs to make roster changes as part of the join functionality, as specified in MIX-PAM.   This means that the join request to the MIX service will come from the user's server from the user's bare JID.</p>
      <example caption="User's Server sends  Join request to MIX Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:core:1'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:info'/>
    <nick>third witch</nick>
  </join>
</iq>
]]></example>

      <p>The channel responds to the user's sever with an IQ-result addressed to the user's bare JID, which will be processed as specified in MIX-PAM. This stanza includes the nodes to which the user has been successfully subscribed.  The user's Stable Participant ID is returned as an 'id' attribute in the join.
       The following example shows the result of the above request when the request is completed in full. </p>
      <example caption="Channel responds to User's Server"><![CDATA[
<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:core:1'
        id='123456'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:presence'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:info'/>
    <nick>third witch</nick>
  </join>
</iq>
]]></example>
      <p>
        If a user cannot be subscribed to one or more of the requested nodes (e.g., because the node does not exist), but can be subscribed to some the response simply lists the nodes successfully subscribed.    If at least one node is requested and none of the nodes requested are successfully subscribed to, an error response is sent indicating the reason that the first node requested was not subscribed to.   This error response will also include other nodes requested where subscription failed for the same reason. </p>

      <p>
        The following response example shows a successful response to the initial request example where
        the participant is not subscribed to all nodes associated with the channel (in this case only messages, participants, and information). This example shows the message from the MIX channel to the user's server.
      </p>
      <example caption="Channel Processes Join With Some Nodes Not Subscribed To"><![CDATA[
<iq type='result'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <join xmlns='urn:xmpp:mix:core:1'
        id='123456'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <subscribe node='urn:xmpp:mix:nodes:participants'/>
    <subscribe node='urn:xmpp:mix:nodes:info'/>
    <nick>third witch</nick>
  </join>
</iq>
]]></example>
      <p>
        After a successful join and before sending the response, the channel MUST subscribe the user to the negotiated nodes and
        adds the user to the participants node.   When these changes are made, the MIX channel MUST send a PubSub notification of the change to subscribers of the participants node.  The following example shows such a notification.</p>
      <example caption="Channel Distributes New Participant Information"><![CDATA[
<message from='coven@mix.shakespeare.example'
         to='hecate@shakespeare.example'
         id='5A9C7398-DB13-4BFA-A091-2D466C710AAF'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <item id='123456'>
        <participant xmlns='urn:xmpp:mix:core:1'>
          <jid>hag66@shakespeare.example</jid>
          <nick>third witch</nick>
        </participant>
      </item>
    </items>
  </event>
</message>
]]></example>
      <p>The user that has been added to the channel is identified by the item id of the item added to the Participants node, which is the Stable Participant ID of the new channel participant.  The &lt;participant&gt; element MUST include a &lt;jid&gt; element with the JID of the participant, unless MIX-ANON is being followed to hide participant JIDs.    The &lt;nick&gt; element will not be included at this point, unless it is automatically generated by the channel.   In the likely event that a Nick is subsequently added, an update with the &lt;nick&gt; element will be distributed.
</p>

      <p>
        A user MAY subsequently modify subscription to nodes in a channel by sending a subscription modification request encoded as a &lt;update-subscription/&gt;  child element of &lt;iq/&gt; element. The &lt;update-subscription/&gt; element is qualified by the 'urn:xmpp:mix:core:1' namespace.  The requested nodes are encoded as &lt;subscribe/&gt; and &lt;unsubscribe/&gt; child elements of the &lt;update-subscription/&gt; element with the node name encoded as a 'node' attribute.  This modification goes directly from client to the MIX channel, as this change does not impact the roster and so does not need any local action.  The following example shows subscription modification.
      </p>
      <example caption="User Modifies Subscription Request"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/UUID-a1j/7533'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <update-subscription xmlns='urn:xmpp:mix:core:1'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <unsubscribe node='urn:xmpp:mix:nodes:presence'/>
  </update-subscription>
</iq>

<iq type='result'
     from='coven@mix.shakespeare.example'
     to='hag66@shakespeare.example/UUID-a1j/7533'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <update-subscription xmlns='urn:xmpp:mix:core:1'
                       jid='hag66@shakespeare.example'>
    <subscribe node='urn:xmpp:mix:nodes:messages'/>
    <unsubscribe node='urn:xmpp:mix:nodes:presence'/>
  </update-subscription>
</iq>
]]></example>
      <p>
        A user MAY specify a nick when joining the channel.   Channels MAY have mandatory nicks, which is default behavior.   Therefore it will generally be necessary to include a nick when joining a channel.   If nick is missing on a channel where nick is mandatory, the join MUST be rejected.   Other error cases are dealt with below with the nick management commands.  Where a nick is specified, the join will only complete if the nick is accepted.   The nick used MUST be reported back in the join result.
      </p>
    </section3>
    <section3 topic='Leaving a Channel' anchor='usecase-user-leaving'>
      <p>Users generally remain in a channel for an extended period of time.  In particular the user remains as a participant of the channel when the user goes offline.  Note that this is different to  &xep0045;, where the client leaves a room when going offline. So, leaving a MIX channel is a permanent action for a user across all clients.  In order to  leave a channel, the user's server sends a MIX "leave" command to the channel, as specified in MIX-PAM.  The leave command is encoded as a &lt;leave/&gt; child element of &lt;iq/&gt; element.  The &lt;leave/&gt; element is qualified by the 'urn:xmpp:mix:core:1' namespace.  The following example shows a leave request to a MIX channel.  </p>
      <example caption="User's Server sends  Leave Request to  a Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example'
    to='coven@mix.shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <leave xmlns='urn:xmpp:mix:core:1'/>
</iq>
]]></example>

    <p>
      The MIX channel will then remove the user from the channel, as described below.   A response is sent to the user's server.
    </p>
      <example caption="Channel Confirms Leave to User's Server"><![CDATA[
<iq type='result'
    from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example'
    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'>
  <leave xmlns='urn:xmpp:mix:core:1'/>
</iq>
]]></example>
      <p>When the user leaves the channel, the MIX service is responsible for unsubscribing the user from all nodes in the channel and for removing the user from the participants list.  Presence removal is specified in MIX-PRESENCE.
        Deletion from the participants node functions as if the item (channel participant) had been deleted using the PubSub retract mechanism with notification set to true.    Notification of the participant deletion is sent to clients subscribed to the participants  PubSub node using PubSub protocol, with the node identified by the stable id, as shown in the example below.
      </p>

      <example caption="Participant Node Subscriber is Notified of Participant Removal"><![CDATA[
<message from='coven@mix.shakespeare.example'
                to='hecate@shakespeare.example' id='f5pp2toz'>
   <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:mix:nodes:participants'>
      <retract id='123456'/>
    </items>
  </event>            
</message>
]]></example>
      

    </section3>

    <section3 topic="Setting a Nick" anchor="usecase-setting-nick">
    <p>
      Each participant of a channel MAY have a nick, which is how other users in the channel will see the user.  In some cases a nick is not needed, for example where a user reads messages in a channel but does not send messages or share presence information.     There are four ways that a user's nick can be obtained.   The choice of mechanism or mechanisms is dependent on channel policy:
    </p>
    <ol>
      <li>The nick is registered with the user account in some way, for example as part of user provisioning with nick configured as an attribute in a directory service.   For example, this could be chosen by corporate services that wish to ensure consistent nick values for a set of users and channels.</li>
      <li>The nick is registered with the MIX service, as described in  <link url='#usecase-user-register'> Registering a Nick </link>.</li>
      <li>The user explicitly sets the nick, as described in this section.</li>
      <li>The MIX service generates the nick.  </li>
    </ol>
    <p>
      A user will typically set a nick when joining a channel and MAY update this nick from time to time.   The user does this by sending a command to the channel to set the nick.  This command is a &lt;setnick/&gt; child element of &lt;iq/&gt; element. The &lt;setnick/&gt; element is qualified by the 'urn:xmpp:mix:core:1' namespace.   The nick is encoded as a &lt;nick/&gt; child element of the &lt;setnick/&gt; element. If the user wishes the channel to assign a nick (or knows that the channel will assign a nick) the nick field can be left blank, so that the user can see what is assigned in the result.
    </p>
    <example caption="User sets Nick on Channel"><![CDATA[
<iq type='set'
    from='hag66@shakespeare.example/UUID-a1j/7533'
    to='coven@mix.shakespeare.example'
    id='7nve413p'>
  <setnick xmlns='urn:xmpp:mix:core:1'>
    <nick>thirdwitch</nick>
  </setnick>
</iq>
]]></example>
    <p>
      On successful nick assignment, the channel will return the nick that is to be used, noting that this MAY be different to the requested nick. MIX services SHOULD apply the "nickname" profile of the PRECIS OpaqueString class, as defined in &rfc7700;.  The channel MAY return a conflict error or other appropriate error.
    </p>

    <example caption="Channel informs user of Nick"><![CDATA[
<iq type='result'
    from='coven@mix.shakespeare.example'
    to'hag66@shakespeare.example/UUID-a1j/7533'
    id='7nve413p'>
  <setnick xmlns='urn:xmpp:mix:core:1'>
    <nick>thirdwitch</nick>
  </setnick>
</iq>
]]></example>
    </section3>
    <section3 topic="Coming Online: Synchronizing Message History" anchor="usecase-sync-history">
      <p>
        A MIX client will typically display message history of the channel to the user.   When a client comes online it will need to obtain this message history from the MAM archive associated with the channel on the client's server.  There are three basic approaches a client will take:
      </p>
      <ol>
        <li>If the client has previously displayed message history and has been offline for a reasonably small time, the client MAY wish to retrieve all messages since the last one displayed to the user.</li>
        <li>The client MAY wish to display a fixed number of messages, perhaps finding more messages if the user subsequently requests.</li>
        <li>The client MAY wish to display messages from a recent time period, perhaps finding more messages if the user subsequently requests.</li>
      </ol>
      <p>To achieve this, the client will query the user's own MAM archive using &xep0313;, with the query filtered by the channel JID.   This gives the client flexibility to retrieve and display message history in a manner appropriate to the client implementation.</p>
      <p>
        The only exception to this is when a user wishes to access message history in the channel prior to when the user joined the channel.  To achieve this, the client will use MAM to retrieve message history directly from the MAM Archive of the MIX channel.
      </p>
    </section3>
    <section3 topic='Sending a Message' anchor='usecase-user-message'>
      <p>A client sends a message directly to a MIX channel as a standard groupchat message, in exactly the same way as for &xep0045;. Messages are sent directly to the MIX channel from the user's client. The message id is selected by the client.</p>
      <example caption="User Sends Message to Channel"><![CDATA[
<message from='hag66@shakespeare.example/UUID-a1j/7533'
         to='coven@mix.shakespeare.example'
         id='92vax143g'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
</message>
]]></example>
      <p>
        The MIX channel then adds information to the message using a &lt;mix&gt; element qualified by the 'urn:xmpp:mix:core:1' namespace.  This enables are receiver of the MIX message to determine the message sender.  This element contains two child elements:
      </p>
      <ol>
        <li>A &lt;nick&gt; element that contains the Nick of the message sender, taken from the Participants Node.  This MUST be present if a Nick is defined for the user.</li>
        <li>A &lt;jid&gt; element containing the real JID of the sender. This MUST be present, unless following the "JID Hidden" model defined in MIX-ANON.  If this element is omitted, the &lt;nick&gt; element MUST be present.</li>
      </ol>
      <p>
        MIX messages are distributed by the channel with the from using the JID of the channel, with the Stable Participant ID of the sender in the resource.    This enables a receiving system to distinguish messages based on sender using only the JID.   
      </p>
      <p>The MIX channel then puts a copy of the message into the MAM archive for the channel and sends a copy of  the message to each participant in
        standard groupchat format.    These messages sent by the channel are addressed to the bare JID of each participant and this will be handled by the participant's local server as specified in MIX-PAM.  The message 'from' attribute is the JID of the channel.   The id of the message is the ID from the MAM archive and NOT the id used by the sender. The message placed in the MAM archive is the reflected message without a 'to' attribute.</p>


      <example caption="Channel Puts Message in MAM Archive"><![CDATA[
<message from='coven@mix.shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
  <mix xmlns='urn:xmpp:mix:core:1'>
    <nick>thirdwitch</nick>
    <jid>hag66@shakespeare.example</jid>
  </mix>
</message>
]]></example>

      <example caption="Channel Reflects Message to Participants"><![CDATA[
<message from='coven@mix.shakespeare.example/123456'
         to='hecate@shakespeare.example'
         id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
         type='groupchat'>
  <body>Harpier cries: 'tis time, 'tis time.</body>
  <mix xmlns='urn:xmpp:mix:core:1'>
    <nick>thirdwitch</nick>
    <jid>hag66@shakespeare.example</jid>
  </mix>
</message>
]]></example>

 
      <p>
        The message originator may wish to correlate the reflected message with the submitted message.  To do this, the originator should include an &lt;origin-id&gt; element in the message as specified in &xep0359;.

      </p>
      
    </section3>
  </section2>
  <section2 topic="Use of MAM" anchor="use-mam">
   <p>
    MIX channel nodes MAY be archived.  In order to provide a service equivalent to MUC, it is necessary to archive messages sent to the channel.   It is anticipated the most MIX services will archive at least messages using MAM.
   </p>
    <section3 topic="Archive of Messages" anchor="use-mam-messages">
      <p>
        Messages sent to participants MUST be archived by both the MIX channel and by the user's server.   This  MAY include presence messages.   Correct MIX operation relies on messages being archived.
      </p>
    </section3>
    <section3 topic="Retrieving Messages" anchor="use-mam-retrieve">
      <p>
        The client's local server MAY archive messages and advertise this capability as specified in &xep0405;.   If this is done,
        clients MUST retrieve MIX messages using standard MAM protocol from the user's archive.  The MAM query will filter based on the channel JID to enable access to messages from a given channel. This gives the user a simple mechanism to access all messages sent to the channel.   MAM can be used to retrieve older messages that have not been cached by the client.
      </p>
      <p>
        Messages can also be retrieved from the channel by addressing MAM queries to the channel JID.   This will behave like a standard MAM archive.  This can be useful for administrators to access archived messages.  This enables new channel participants to access the historical archives.
      </p>
    </section3>
    <section3 topic="MAM Use with other Channel Nodes" anchor="use-mam-other-nodes">
      <p>
        A MIX Channel MAY use MAM to archive nodes other than message nodes.   Clients with rights to access these archives MAY use MAM to do this, specifying the PubSub node in the MAM query addressed to the channel.
      </p>
    </section3>
  </section2>


  <section2 topic='Administrative Use Cases' anchor='usecases-admin'>


    <section3 topic='Checking For Permission To Create a Channel' anchor='usecase-admin-check-create'>
      <p>
        MIX does not standardize an access control model for creating and deleting MIX channels.    The choice is left to the MIX implementer, and could be a very simple or complex approach.  A client can determine if it has permission to create a channel on a MIX service, which MAY be used to control options presented to the user.   This is achieved by a disco command on the MIX service.   If the 'urn:xmpp:mix:core:1#create-channel' feature is returned, the user is able to create a channel.
      </p>
        <example caption="Client determines Capability to Create a Channel" ><![CDATA[
 <iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='mix'/>
    <feature var='http://jabber.org/protocol/disco#info'/>
    <feature var='urn:xmpp:mix:core:1'/>
    <feature var='urn:xmpp:mix:core:1#create-channel'>
  </query>
</iq>
]]></example>
    </section3>
    <section3 topic='Creating a Channel' anchor='usecase-admin-create'>
      <p>
        A client creates a channel by sending a simple request to the MIX service.   A channel is always created with default parameters, as shown in the following example.   The result MUST include the name of the channel which MUST match the channel name in the request (if present).  The create is encoded as a &lt;create/&gt; child element of &lt;iq/&gt; element.   The &lt;create/&gt; is qualified by the 'urn:xmpp:mix:core:1' namespace.   The &lt;create/&gt; element MUST have a 'channel' attribute to specify the channel name.  This attribute specifies the value that will be used in the LHS of the JID for the MIX channel.
      </p>
        <example caption="Creating a Channel with Default Parameters" ><![CDATA[
<iq from='hag66@shakespeare.example/UUID-a1j/7533'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
  <create channel='coven' xmlns='urn:xmpp:mix:core:1'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/UUID-a1j/7533'
    type='result'>
  <create channel='coven' xmlns='urn:xmpp:mix:core:1'/>
</iq>
]]></example>

      <p>
        When a channel is created , the Owner in the configuration is set to the JID that creates the channel.   Modifying channel parameters is specified in MIX-ADMIN.  Consideration should be given to selection of default parameters.  It will typically be desirable to create channels with restrictive default settings that the owner MAY choose to relax.
      </p>

    </section3>


    <section3 topic='Creating a Channel for Ad Hoc Use' anchor='usecase-admin-create-adhoc'>
      <p>
        Channels MAY be created for ad hoc use between a set of users.  Channels of this nature will have channel name created by the server and will not be addressable or discoverable.  Here a channel is created without specifying the channel name.   Parameters for the channel MAY also be specified.
      </p>
      <example caption="Creating a Channel for Ad Hoc Use" ><![CDATA[
<iq from='hag66@shakespeare.example/UUID-a1j/7533'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
  <create xmlns='urn:xmpp:mix:core:1'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/UUID-a1j/7533'
    type='result'>
  <create channel='A1B2C345' xmlns='urn:xmpp:mix:core:1'/>
</iq>
]]></example>
   </section3>


    <section3 topic='Destroying a Channel' anchor='usecase-admin-destroy'>
      <p>
        MIX channels are always explicitly destroyed by an owner of the channel or by a server operator. There is no concept of temporary channel, equivalent to &xep0045; temporary room which is automatically destroyed by the server when the users leave.   However, channels MAY be configured with an explicit lifetime, after which the channel MUST be removed by the MIX service; This is specified in MIX-ADMIN.   Where a channel is created for ad hoc use, it MAY be desirable to keep the channel for history reference or for re-use by the same set of users.  Note that the owner of the channel does not need to have presence registered in the channel in order to destroy it.
     </p>
      <p>
        The destroy operation is encoded as a &lt;destroy/&gt; child element of an &lt;iq/&gt; element.  The &lt;destroy/&gt; element is qualified by the 'urn:xmpp:mix:core:1' namespace.  The &lt;destroy/&gt; element MUST have a 'channel' attribute to specify the channel to be destroyed.
        A client destroys a channel using a simple set operation, as shown in the following example.
      </p>
      <example caption="Client Destroys a Channel" ><![CDATA[
 <iq from='hag66@shakespeare.example/UUID-a1j/7533'
    id='lx09df27'
    to='mix.shakespeare.example'
    type='set'>
  <destroy channel='coven' xmlns='urn:xmpp:mix:core:1'/>
</iq>

<iq from='mix.shakespeare.example'
    id='lx09df27'
    to='hag66@shakespeare.example/UUID-a1j/7533'
    type='result'>
</iq>
]]></example>
    </section3>
    <section3 topic='Server Destroying a Channel' anchor='usecase-server-destroy'>
      <p>
        A server MUST destroy a channel that has exceeded its specified explicit lifetime.
        Servers MAY destroy channels which have no participants and/or presence according to local policy.   There will often be good reasons to not destroy rooms in these scenarios, in particular to facilitate channel re-use and history access.
      </p>
    </section3>
  </section2>
</section1>




<section1  topic="Capabilities not provided in MIX" anchor="not-included-from45">
  <p>This section lists a number of capabilities not specified in the core MIX which are provided in &xep0045;.   These capabilities will not be added to core MIX but they could in the future be specified as independent XEPs.</p>
  <section2 topic="Password Controlled Channels" anchor="password-control">
    <p>
      &xep0045; provides a mechanism to control access to MUC rooms using passwords.  An equivalent mechanism is not included in core MIX, as it has a number of security issues.  Control of access to channels is better achieved using an explicit list of participants.
    </p>
  </section2>
  <section2 topic="Voice Control" anchor="voice-control">
    <p>
      &xep0045; defines a mechanism so that MUC moderators can control who is able to send messages to a MUC room using a "voice" mechanism.  MIX does not provide an exact functional equivalent, although access control to channels enables some of the goals of voice control to be achieved in a different manner.

    </p>
  </section2>

<section2 anchor="not-subject" topic="Subject">
  <p>&xep0045; provide a Subject capability to enable setting of the current topic of discussion.   The Name and Description attributes provided by MIX enable descriptive information to be associated with a channel.   These attributes can replace Subject in the way it is used in many MUC rooms, but they do not reflect the more limited topic nature of Subject.</p>
  <p>It is likely that a new XEP to be used with MIX will be written, perhaps using a "Sticky Messages" approach to fulfil the Subject capability using a different approach. </p>
</section2>
</section1>

<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>MIX allows specification of a number of human readable strings associated with a MIX channel, in particular the name and description information of a  MIX channel.   These strings MAY have language set using an xml:lang attribute, and multiple values MAY be set provided that each one is distinguished using xml:lang.
  </p>

  <p>Nicknames SHOULD be normalized using the "nickname" profile of the PRECIS OpaqueString class, as defined in &rfc7700;. </p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>MIX is built over MAM and PubSub and the security considerations of &xep0313; and &xep0060; MUST be considered. These services protect MIX channel information, which can be sensitive and needs appropriate protection.</p>
 
  <p>
    There is no MIX equivalent to &xep0045; password controlled rooms, which avoids a number of security issues.
  </p>
  <p>
    MIX-ADMIN defines  flexible access control options, which MUST be used in a manner appropriate to the security requirements of MIX users and services.
  </p>

</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>None.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>The urn:xmpp:mix namespace needs to be registered.</p>
  <p>The conference type 'mix' needs to be registered.</p>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <p>To be supplied when MIX progresses to proposed standard.</p>
</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>Peter St Andre provided key early input to MIX and worked on the original specification with Kevin Smith. </p>
  <p>Thanks to the following who have made contributions to the ongoing MIX specification development: W. Martin Borgert, Dave Cridland, Daniel Gultsch, Tarun Gupta, Philipp Hancke, Waqas Hussain, Timothée Jaussoin, Evgeny Khramtsov, Georg Lukas, Tobias Markmann, Ralph Meijer, Edwin Mons, Emmanuel Gil Peyrot, Manuel Rubio, Florian Schmaus, Lance Stout, Sam Whited, Jonas Wielicki, Matthew Wild and one anonymous reviewer.</p>
</section1>

</xep>
