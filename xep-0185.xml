<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Dialback Key Generation and Validation</title>
  <abstract>This document provides a recommended method for generating and validating the keys used in the XMPP server dialback protocol.</abstract>
  &LEGALNOTICE;
  <number>0185</number>
  <status>Active</status>
  <type>Informational</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>N/A</shortname>
  <author>
    <firstname>Philipp</firstname>
    <surname>Hancke</surname>
    <email>fippo@goodadvice.pages.de</email>
    <jid>fippo@goodadvice.pages.de</jid>
  </author>
  &stpeter;
  <revision>
    <version>1.0</version>
    <date>2007-02-15</date>
    <initials>psa</initials>
    <remark><p>Per a vote of the XMPP Council, advanced specification to Active.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2007-02-09</date>
    <initials>psa/ph</initials>
    <remark><p>Modified order of explanation to ease understanding; removed discussion of alternate algorithms, which is better left to a more in-depth security analysis.</p>
    </remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2006-11-01</date>
    <initials>ph</initials>
    <remark><p>Recommended hashing the secret to satisfy length requirement; hostnames and Stream ID should be separated by spaces to avoid ambiguity; updated example to match revisions to RFC 3920.</p>
    </remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-05-10</date>
    <initials>ph</initials>
    <remark>
      <p>Clarified and corrected roles of originating and receiving servers; updated recommendation and main example to use HMAC-SHA256 for key generation.</p>
    </remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-04-11</date>
    <initials>psa</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2006-03-30</date>
    <initials>ph</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>&rfc3920; does not specify in detail a recommended algorithm for generating the keys used in the server dialback protocol. This document provides such a recommendation as an aid to implementors of XMPP servers. This document is not meant to supersede any text in <cite>RFC 3920</cite>; however, the recommendations in this document have been incorporated into &xep0220;.</p>
</section1>
<section1 topic='Recommended Algorithm' anchor='algorithm'>
  <p>The process for generating and validating a dialback key SHOULD take into account the following four inputs:</p>
  <ul>
    <li>the hostname of the Originating Server</li>
    <li>the hostname of the Receiving Server</li>
    <li>the Stream ID generated by the Receiving Server</li>
    <li>a secret known by the Authoritative Server's network</li>
  </ul>
  <p>In particular, the following algorithm is RECOMMENDED:</p>
  <code>
key = HMAC-SHA256
      (
        SHA256(Secret),
        {
          Receiving Server, ' ',
          Originating Server, ' ',
          Stream ID
        }
      )
  </code>
  <p>Note the following:</p>
  <ol>
    <li>The resulting dialback key is a Keyed-Hash Message Authentication Code (see &nistfips198a;) generated using the SHA256 hashing algorithm (see &nistfips180-2;).</li>
    <li>The Secret is used as a "key" within the HMAC generation process; because <cite>HMAC</cite> recommends that the length of the HMAC key should be at least half the size of the hash function output, the Secret SHOULD be hashed via SHA256 prior to use in the in HMAC generation process.</li>
    <li>The Secret MUST either be set up in a configuration option for each host or process, or generated as a random string when starting the XMPP server. Creation of the Secret MUST NOT require communication between the Originating Server, the Authoritative Server, and optionally a third party (such as a database).</li>
    <li>The output of the SHA256 hashing algorithm MUST be provided in the hexadecimal representation; this helps to avoid encoding problems.</li>
    <li>The hostname of the Receiving Server, the hostname of the Originating Server, and the Stream ID SHOULD be concatenated with a Unicode space character (U+0020) as the delimiter; this helps to avoid ambiguity in concatenation. <note>For example, the string "example.inform.example.org" could be construed as a concatenation of "example.info" and "rm.example.org" or of "example.in" and "form.example.org".</note></li>
  </ol>
</section1>
<section1 topic='Example' anchor='example'>
  <p>This document closely follows the description of the dialback protocol in <cite>RFC 3920</cite> and <cite>XEP-0220</cite>, but omits steps that are not important for the generation and validation of the dialback keys. For ease of comparison the numbering of the steps is the same as in section 8.3 of <cite>RFC 3920</cite> and Appendix C.3 of <cite>XEP-0220</cite>. Any line breaks in the examples are included for the purpose of readability only.</p>
  <p>The following data values are used in the examples:</p>
  <table caption='Data Used in Examples'>
    <tr>
      <td>Originating Server</td>
      <td>example.org</td>
    </tr>
    <tr>
      <td>Authoritative Server</td>
      <td>example.org</td>
    </tr>
    <tr>
      <td>Receiving Server</td>
      <td>xmpp.example.com</td>
    </tr>
    <tr>
      <td>Secret</td>
      <td>s3cr3tf0rd14lb4ck</td>
    </tr>
    <tr>
      <td>Stream ID</td>
      <td>D60000229F</td>
    </tr>
  </table>
  <p>3. Receiving Server sends a stream header back to the Originating Server, including a unique ID for this interaction:</p>
  <code><![CDATA[
<stream:stream
  xmlns:stream='http://etherx.jabber.org/streams'
  xmlns='jabber:server'
  xmlns:db='jabber:server:dialback'
  to='xmpp.example.com'
  from='example.org'
  id='D60000229F'>
]]></code>
  <p>The Originating Server now generates a dialback key to be sent to the Receiving Server:</p>
  <code>
key = HMAC-SHA256(
                   SHA256(secret),
                   { Receiving server, ' ', Originating server, ' ', Stream ID}
                 )
    = HMAC-SHA256(
                   SHA256('s3cr3tf0rd14lb4ck'),
                   { 'xmpp.example.com', ' ', 'example.org', ' ', 'D60000229F' }
                 )
    = HMAC-SHA256(
                   'a7136eb1f46c9ef18c5e78c36ca257067c69b3d518285f0b18a96c33beae9acc',
                   'xmpp.example.com example.org D60000229F'
                 )
    = '37c69b1cf07a3f67c04a5ef5902fa5114f2c76fe4a2686482ba5b89323075643'
  </code>
  <p>4. The Originating Server sends the generated dialback key to the Receiving Server:</p>
  <code><![CDATA[
<db:result
  to='xmpp.example.com'
  from='example.org'>
    37c69b1cf07a3f67c04a5ef5902fa5114f2c76fe4a2686482ba5b89323075643
</db:result>
]]></code>
  <p>8. The Receiving Server sends the Authoritative Server a request for verification of the key:</p>
  <code><![CDATA[
<db:verify
  to='example.org'
  from='xmpp.example.com'
  id='D60000229F'>
    37c69b1cf07a3f67c04a5ef5902fa5114f2c76fe4a2686482ba5b89323075643
</db:verify>
]]></code>
  <p>The Authoritative Server calculates the valid key for this verify request, using data supplied in the packet and the secret shared with the Originating Server.</p>
  <code>
key = HMAC-SHA256(
                   SHA256(secret),
                   { Receiving Server, ' ', Authoritative Server, ' ', Stream ID }
                 )
    = HMAC-SHA256(
                   SHA256('s3cr3tf0rd14lb4ck'),
                   { 'xmpp.example.com', ' ', 'example.org', ' ', 'D60000229F' }
                 )
    = HMAC-SHA256(
                    'a7136eb1f46c9ef18c5e78c36ca257067c69b3d518285f0b18a96c33beae9acc',
                    'xmpp.example.com example.org D60000229F'
                  )
    = '37c69b1cf07a3f67c04a5ef5902fa5114f2c76fe4a2686482ba5b89323075643'
    </code>
    <p>9. The Authoritative Server compares this value to the key contained in the verification requests and informs the Originating Server of the result, in our example a success:</p>
  <code><![CDATA[
<db:verify
  to='xmpp.example.com'
  from='example.org'
  id='D60000229F'
  type='valid'/>
]]></code>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>This document introduces no security considerations or concerns above and beyond those discussed in <cite>RFC 3920</cite> and <cite>XEP-0220</cite>.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>This document requires no interaction with the &REGISTRAR;.</p>
</section1>
<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to Ian Paterson and Matthias Wimmer for their feedback.</p>
</section1>
</xep>
