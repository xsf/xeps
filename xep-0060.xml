<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
<!ENTITY ITEM "&lt;item/&gt;">
<!ENTITY ITEMS "&lt;items/&gt;">
<!ENTITY PUBSUB "&lt;pubsub/&gt;">
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Publish-Subscribe</title>
  <abstract>This specification defines an XMPP protocol extension for generic publish-subscribe functionality. The protocol enables XMPP entities to create nodes (topics) at a pubsub service and publish information at those nodes; an event notification (with or without payload) is then broadcasted to all entities that have subscribed to the node. Pubsub therefore adheres to the classic Observer design pattern and can serve as the foundation for a wide variety of applications, including news feeds, content syndication, rich presence, geolocation, workflow systems, network management systems, and any other application that requires event notifications.</abstract>
  &LEGALNOTICE;
  <number>0060</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0068</spec>
    <spec>XEP-0082</spec>
    <spec>XEP-0131</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>pubsub</shortname>
  <schemaloc>
    <ns>pubsub</ns>
    <url>http://xmpp.org/schemas/pubsub.xsd</url>
  </schemaloc>
  <schemaloc>
    <ns>pubsub#errors</ns>
    <url>http://xmpp.org/schemas/pubsub-errors.xsd</url>
  </schemaloc>
  <schemaloc>
    <ns>pubsub#event</ns>
    <url>http://xmpp.org/schemas/pubsub-event.xsd</url>
  </schemaloc>
  <schemaloc>
    <ns>pubsub#owner</ns>
    <url>http://xmpp.org/schemas/pubsub-owner.xsd</url>
  </schemaloc>
  <discuss>pubsub</discuss>

  &pgmillard;
  &stpeter;
  &ralphm;

  <revision>
    <version>1.13.5</version>
    <date>2016-12-21</date>
    <initials>psa (XEP Editor: ssw)</initials>
    <remark><p>Add missing options to schema.</p></remark>
  </revision>
  <revision>
    <version>1.13.4</version>
    <date>2016-12-02</date>
    <initials>psa</initials>
    <remark><p>Make Multiple Simultaneous Modifications examples consistent with text.</p></remark>
  </revision>
  <revision>
    <version>1.13.3</version>
    <date>2016-12-08</date>
    <initials>ss (XEP Editor: ssw)</initials>
    <remark><p>Include publisher with any item retrieval.</p></remark>
  </revision>
  <revision>
    <version>1.13.2</version>
    <date>2016-10-11</date>
    <initials>ss (XEP Editor: ssw)</initials>
    <remark><p>Be more consistent with reply.</p></remark>
  </revision>
  <revision>
    <version>1.13.1</version>
    <date>2016-07-21</date>
    <initials>ss</initials>
    <remark>
        <ul>
            <li>Fix wording, replace Jabber with XMPP where applicable.</li>
        </ul>
    </remark>
  </revision>
  <revision>
    <version>1.13</version>
    <date>2010-07-12</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Pending further discussion: added but then removed change to allow notifications via IQ stanzas; removed but then retained batch publishing; removed but then retained SubIDs in subscription approvals.</li>
        <li>Corrected a large number of reported errata.</li>
        <li>Removed delete-any feature.</li>
        <li>Added missing delete-items feature.</li>
        <li>Added special value of "presence" for the pubsub#expire option to support temporary subscriptions.</li>
        <li>Removed replyto and replyroom config options.</li>
        <li>Removed multiple node discovery since it depended on the deprecated Service Discovery Publishing feature.</li>
        <li>Defined "room" value for itemreply config option.</li>
        <li>Added optional 'publisher' attribute to &lt;item/&gt; element.</li>
        <li>Added optional &lt;redirect/&gt; child to &lt;delete/&gt; element.</li>
        <li>Based redirects on URIs for consistency with RFC 6120 gone and redirect errors.</li>
        <li>Clarified meaning of filtered notifications (they are based on NodeIDs, not payload namespaces).</li>
        <li>Added pubsub-on-a-jid service discovery feature for explicit discovery that an IM and presence account also functions as a virtual pubsub service.</li>
        <li>Added purge_offline node configuration option for purging the node when the relevant publisher goes offline, for use in certain extended presence applications.</li>
        <li>Added item_expire node configuration option for automatically removing items after a certain number of seconds.</li>
        <li>Added notification_type node configuration option for defining which value of the &lt;message/&gt; type attribute shall be used for notifications.</li>
        <li>Added retrieve-default-sub feature for retrieving default subscription configuration from a node (as you can retrieve default node configuration from the service).</li>
        <li>Clarified suggested rules for payload definitions.</li>
        <li>Mentioned that singleton pattern can be enforced by setting max_items to 1.</li>
        <li>Removed the notion of batch publishing because it makes information coherence and atom handling excessively difficult.</li>
        <li>Added error handling for too-many-subscriptions to help prevent a certain denial of service attack.</li>
        <li>Added process for retrieving default subscription configuration options for leaf nodes, by omitting the 'node' attribute on the &lt;default/&gt; element (also added the &lt;default/&gt; element to the schema for the http://jabber.org/protocol/pubsub namespace, since it was missing).</li>
        <li>Removed informational mapping of node meta-data to Dublin Core.</li>
      </ul>
    </remark>
  </revision>

  <revision>
    <version>1.12</version>
    <date>2008-09-03</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Specified that service should return ItemID on successful publish if no ItemID was provided in request.</li>
        <li>Described the use of Result Set Management to return some but not all published items.</li>
        <li>Defined pubsub#notify_sub config option so that owners can receive notifications of new subscriptions, unsubscribes, and other subscription changes.</li>
        <li>Harmonized definition of +notify feature with implementation reality.</li>
        <li>Moved text about collections to XEP-0248.</li>
      </ul>
    </remark>
  </revision>

  <revision>
    <version>1.11</version>
    <date>2008-03-05</date>
    <initials>rm/psa</initials>
    <remark><p>For collection nodes, changed name of node child element to associate and added disassociate child element to handle disassociation use case; corrected SHIM examples to conform to XEP-0131; modified lease expiry notification for consistency with other subscription-related notifications (i.e., not using SHIM header); renamed SHIM headers to Collection and SubID for consistency with HTTP and Email headers.</p></remark>
  </revision>

  <revision>
    <version>1.10</version>
    <date>2007-09-26</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>In accordance with XMPP Council consensus, moved the auto-create, auto-subscribe, filtered-notifications, and last-published features from XEP-0163 to this specification</li>
        <li>Clarified implications of auto-subscribe feature for handling of account owners, stable presence subscribers, and transient presence sharers</li>
        <li>Updated filtered-notifications text and examples to track changes to XEP-0115</li>
        <li>Added publish-options functionality</li>
        <li>Added developer-friendly How It Works section</li>
        <li>Defined member affiliation to properly implement whitelist feature</li>
        <li>Split several long sections into smaller sub-sections.</li>
        <li>Clarified that a pubsub service must generate an ItemID if the publisher does not provide one.</li>
        <li>Specified recommended ItemID for singleton nodes.</li>
        <li>Summarized triggers for sending notifications.</li>
      </ul>
    </remark>
  </revision>

  <revision>
    <version>1.9</version>
    <date>2006-09-13</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Replaced boolean send_item_subscribe node configuration option with more comprehensive send_last_published_item option per list discussion</li>
        <li>Added deliver_notifications node configuration option to enable quiet nodes without notifications, if desired enabling pull-model item retrieval only.</li>
        <li>Modified subscription and affiliation retrieval to return empty element if no results.</li>
      </ul>
    </remark>
  </revision>

  <revision>
    <version>1.8</version>
    <date>2006-06-27</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Defined five access models: open, presence, roster, authorize, and whitelist</li>
        <li>Renamed pubsub#subscription_model feature to pubsub#access_model</li>
        <li>Separated affiliations retrieval from subscriptions retrieval</li>
        <li>Removed subscription information from affiliations management</li>
        <li>Changed &lt;entity/&gt; element to &lt;subscription/&gt; element in response to subscription request</li>
        <li>Clarified batch processing of item publication and item deletion</li>
        <li>Added basic example to introduction</li>
        <li>More fully specified node creation flows</li>
        <li>More fully specified recommended behavior for caching last published item, including use of jabber:x:delay protocol</li>
        <li>Specified that semantic meaning of NodeIDs must not be used to encapsulate hierarchy</li>
        <li>More fully specified error conditions</li>
        <li>Changed some feature-related conditions to &lt;unsupported/&gt; plus feature attribute</li>
        <li>Changed some error conditions from &lt;not-authorized/&gt; to &lt;forbidden/&gt;</li>
        <li>Harmonized error conditions for unsubscribe if entity is not subscribed (unexpected-request rather than not-found)</li>
        <li>Further defined error conditions related to item publication</li>
        <li>Specified structure of &lt;affiliations/&gt;, &lt;delete/&gt;, &lt;purge/&gt;, and &lt;subscriptions/&gt; elements qualified by pubsub#owner namespace</li>
        <li>Changed retrieval of default node configuration options to use &lt;default/&gt; element, not &lt;configure/&gt; element</li>
        <li>Allowed caching of last published item</li>
        <li>Added pubsub#deliver subscription option</li>
        <li>Added meta-data fields for pubsub#owners and pubsub#contact</li>
        <li>Changed element for retrieval of default node configuration options from &lt;configure/&gt; to &lt;default/&gt; to prevent ambiguity related to configuration of root collection node</li>
        <li>Specified pubsub#node_type configuration field</li>
        <li>Specified pubsub#collection SHIM header</li>
        <li>Specified conformance with Resourceprep for nodes addressable as JIDs</li>
        <li>Added pubsub#modify-affiliations feature</li>
        <li>Added pubsub#digest_frequency field to subscribe_options FORM_TYPE</li>
        <li>Added pubsub#roster_groups_allowed field to node_config FORM_TYPE</li>
        <li>More clearly specified the requirements level (MUST, SHOULD, MAY) for each service discovery feature</li>
        <li>Defined pubsub#include_body subscription option and the pubsub#body_xslt node configuration option to transform payload format into an XMPP message body, and clarified rules for inclusion of message bodies</li>
        <li>Clarified nature of collections and association of a node to a collection</li>
        <li>Specified that simultaneous subscriptions of type nodes and items are allowed to collection nodes</li>
        <li>Added examples and further explanation of time-based and content-based subscriptions</li>
        <li>Added Internationalization Considerations</li>
        <li>Clarified terminology</li>
        <li>Corrected and updated the schemas</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>1.7</version>
    <date>2005-03-03</date>
    <initials>psa/rm</initials>
    <remark>
      <ul>
        <li>Reinstated pubsub#subscribe feature (deleted in error)</li>
        <li>Added type attribute for the &lt;create/&gt; and &lt;configure/&gt; elements to differentiate between leaf nodes and collection nodes</li>
        <li>In Section 8.1.7, changed affiliations retrieval support to SHOULD and added pubsub#retrieve-affiliations feature</li>
        <li>In Section 8.1.10, removed two duplicate examples</li>
        <li>In Section 8.1.12, clarified relationship between normal disco#info data and node meta-data (which uses a service discovery extension)</li>
        <li>In Section 8.2.4, specified that node purgation MUST result in one event notification, not a notification per item</li>
        <li>In Section 8.1.8, further specified handling of SubIDs</li>
        <li>Clarified nature of the pubsub#type field</li>
        <li>Mentioned that the forbidden error should be returned in response to certain operations requested by an outcast</li>
        <li>Corrected datatype of max_items attribute from xs:string to xs:positiveInteger</li>
        <li>Corrected &lt;requesting-entity-not-subscribed/&gt; error to &lt;not-subscribed/&gt; since the subscribed JID need not be that of the requesting entity</li>
        <li>Added service discovery features for more optional use cases: retracting items, purging nodes, deleting nodes</li>
        <li>Updated relevant registries</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>1.6</version>
    <date>2004-07-13</date>
    <initials>pgm/psa</initials>
    <remark><p>Added service discovery features for pubsub#meta-data, and pubsub#retrieve-items. Added pubsub#subscription_depth configuration option. Specified pubsub-specific error condition elements qualified by pubsub#errors namespace.</p></remark>
  </revision>
  <revision>
    <version>1.5</version>
    <date>2004-07-07</date>
    <initials>pgm/psa</initials>
    <remark><p>Fixed typos. Added more details to the section on collections. Added paragraph to create node use case to allow the service to change the requested node-id to something which it creates. Added text about bouncing publish requests when the request does not match the event-type for that node. Added disco features for the jabber registrar. Changed affiliation verbiage to allow publishers to remove any item. Tweaked verbiage for create node, eliminated extra example. Fully defined XMPP Registrar submissions. Corrected schemas.</p></remark>
  </revision>
  <revision>
    <version>1.4</version>
    <date>2004-06-22</date>
    <initials>pgm</initials>
    <remark><p>Added subid syntax in a variety of places. Added more information about disco#info and disco#items support. Added more info about subscription options. Added collection information. Added implementation notes about subscription leases, and content-based pubsub services.</p></remark>
  </revision>
  <revision>
    <version>1.3</version>
    <date>2004-04-25</date>
    <initials>psa</initials>
    <remark><p>Editorial review; added one implementation note.</p></remark>
  </revision>
  <revision>
    <version>1.2</version>
    <date>2004-03-09</date>
    <initials>psa</initials>
    <remark><p>Added XMPP error handling.</p></remark>
  </revision>
  <revision>
    <version>1.1</version>
    <date>2004-01-14</date>
    <initials>psa</initials>
    <remark><p>Added XMPP Registrar Considerations subsection for Service Discovery category/type registration.</p></remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2003-10-28</date>
    <initials>psa</initials>
    <remark><p>Per a vote of the Jabber Council, advanced status to Draft.</p></remark>
  </revision>
  <revision>
    <version>0.16</version>
    <date>2003-10-23</date>
    <initials>pgm</initials>
    <remark><p>Clarified JID addressing usage for nodes. Added specific MAY requirement for disco usage. Added sentence about implementations verifying that an entity has a subscription before getting the current items.</p></remark>
  </revision>
  <revision>
    <version>0.15</version>
    <date>2003-10-21</date>
    <initials>pgm</initials>
    <remark><p>Fixed invalid XML in examples for subscription deny/allow.</p></remark>
  </revision>
  <revision>
    <version>0.14</version>
    <date>2003-10-21</date>
    <initials>pgm</initials>
    <remark><p>Clarified restrictions on addressing nodes by JID. Added section on Approving and Denying Subscription Requests. Changed get-pending to use Ad-Hoc Commands. Changed semantics when sending in a form type='cancel' for pending subscriptions.</p></remark>
  </revision>
  <revision>
    <version>0.13</version>
    <date>2003-09-30</date>
    <initials>pgm</initials>
    <remark><p>Removed item as a possible child of subscribe and unsubscribe and pubsub in the schemas. Removed retract as a possible child of item in the pubsub#event schema. Added verbiage to requirements for addressing nodes either via JIDs or disco nodes.</p></remark>
  </revision>
  <revision>
    <version>0.12</version>
    <date>2003-08-13</date>
    <initials>pgm/psa</initials>
    <remark><p>Defined public vs. private nodes; described how changes to existing nodes might trigger meta-node events (e.g., configuration changes); changed &lt;x/&gt; to &lt;event/&gt; for #events namespace; added meta-data about meta-nodes; fully defined XMPP Registrar considerations.</p></remark>
  </revision>
  <revision>
    <version>0.11</version>
    <date>2003-06-25</date>
    <initials>pgm</initials>
    <remark><p>Removed subscription notifications since they have inherent issues. Removed empty implementation note sub-section.</p></remark>
  </revision>
  <revision>
    <version>0.10</version>
    <date>2003-06-11</date>
    <initials>pgm</initials>
    <remark><p>Fixed error example when returning 501 from an items-get request. Added note about receiving subscription requests when an entity is already subscribed. Fixed some entity elements in various subscription examples. Many were missing the node attribute. Added subscription change notification verbiage and example. Added verbiage and example of subscription state notification being sent to the requesting entity. Added disco#items information for getting a list of item identifiers for a single node. Added verbiage for returning the current entity element when a curent subscriber attempts to subscribe again.</p></remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2003-04-30</date>
    <initials>pgm</initials>
    <remark><p>Include JID attributes in the entity elements when receiving your affiliations. Changed error code 406 (which was wrong) to 404, which is correct. Changed many 405 errors to 401, and modified the error table to make it more implementable (rules are more concrete). Added subscribe-options element for indicating subscriptions may be configured.</p></remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2003-04-03</date>
    <initials>pgm</initials>
    <remark><p>Clarified the affiliations table and the semantics around subscribing and unsubscribing. Added protocol to get all of your affiliations in the service. Added protocol for services informing subscribers that configurable subscription options are available. Added protocol for obtaining existing node configuration settings and for concatenating configuration and node creation requests into a single stanza. Added meta-node implementation notes and specified the interaction with the XMPP Registrar and the meta NodeIDs. Added authorization notes to subscription options.</p></remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2003-02-14</date>
    <initials>pgm</initials>
    <remark><p>Clarified requirements around what affiliations must be supported. Moved requirements about specifying entities which can subscribe and publish out of the MUSTs to MAYs. Changed SHOULD to MAY when talking about allowing entities to create nodes. Added ability to send configuration requests in the same stanza as a creation request.</p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2003-02-06</date>
    <initials>pgm</initials>
    <remark><p>Added more details and an example about publishing without NodeID. Added more implementation notes about NodeIDs and persistent storage.</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2003-01-22</date>
    <initials>pgm</initials>
    <remark><p>Fixed header for delete item example. Added examples showing subscribers being notified of deleted items. Added examples for notification of node deletion, and configuration for node deletion. Added Subscriber option semantics and examples. Added examples for 402 and 407 errors on subscribe and create respectively. Added clarification about ItemID handling to impl notes.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2003-01-21</date>
    <initials>pgm</initials>
    <remark><p>Clarified in-band and out-of-band configuration requirement. Added Delete Item privilege for all affiliations to the table. Added Delete item protocol for publishers and owners. Added 401 error case for subscribing to an illegal jid. Changed subscription request form. Added defaults to configuration form, and clarified role of the XMPP Registrar for the features show. Added text explaining the max_items attribute. Changed &quot;last items&quot; to &quot;most recent items&quot;. Removed default configuration acceptance -- owners should just cancel. Added the notify_retract configuration option. Clarified error handling for affiliation modifications. </p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2003-01-20</date>
    <initials>pgm</initials>
    <remark><p>Added subscription attribute for entities. Removed subscriber from the affiliations table. Clarified configuration details. Clarified JabberID usages. Added XMPP Registrar Considerations. Added link to XEP-0068 about the FORM_TYPE element in subscription request notifications. Fixed some typos in examples. Added unsupported configuration namespace to example.  Added a default node configuration example. </p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2003-01-02</date>
    <initials>pgm</initials>
    <remark><p>Added numerous implementation notes; added get-pending action with regard to subscriptions; added error table; changed purge and delete to use IQ type='set'.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2002-11-19</date>
    <initials>pgm</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <section2 topic='Overview' anchor='intro-overview'>
    <p>The XMPP publish-subscribe extension defined in this document provides a framework for a wide variety of applications, including news feeds, content syndication, extended presence, geolocation, avatar management, shared bookmarks, auction and trading systems, workflow systems, network management systems, NNTP gateways, profile management, and any other application that requires event notifications.</p>
    <p>This technology uses the classic "publish-subscribe" or "observer" design pattern: a person or application publishes information, and an event notification (with or without payload) is broadcasted to all authorized subscribers. In general, the relationship between the publisher and subscriber is mediated by a service that receives publication requests, broadcasts event notifications to subscribers, and enables privileged entities to manage lists of people or applications that are authorized to publish or subscribe. The focal point for publication and subscription is a "node" to which publishers send data and from which subscribers receive event notifications. Nodes can also maintain a history of events and provide other services that supplement the pure pubsub model.</p>
    <p>This document defines a generic protocol that all pubsub applications can use. Compliant implementations are not required to implement all of the features defined here (see the <link url='#features'>Feature Summary</link>.) Other specifications may define "subsets" or "profiles" of publish-subscribe for use in specialized contexts, but such profiles are out of scope for this document.</p>
  </section2>
  <section2 topic='How It Works' anchor='intro-howitworks'>
    <p>Although this specification is large because it defines many side use cases and possible error flows, the basic idea is simple:</p>
    <ol>
      <li>An entity publishes information to a node at a publish-subscribe service.</li>
      <li>The pubsub service pushes an event notification to all entities that are authorized to learn about the published information.</li>
    </ol>
    <p>Perhaps the most popular application of pubsub-like functionality is content syndication, which has become familiar from the RSS and Atom (&rfc4287;) feeds associated with weblogs, news sites, and other frequently-updated information available on the Internet. Consider the example of a weblog published by &lt;hamlet@denmark.lit&gt;. When Hamlet writes a new weblog entry, his blogging software publishes the entry to a pubsub node hosted at &lt;pubsub.shakespeare.lit&gt;:</p>
    <example caption='Publisher Publishes a New Weblog Entry'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/blogbot'
    to='pubsub.shakespeare.lit'
    id='pub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='princely_musings'>
      <item>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    <p>So that is the "pub" part of pubsub.</p>
    <p>Now the pubsub service notifies all the subscribers about the new blog entry:</p>
    <example caption='Service Notifies Subscribers'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bernardo@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='horatio@denmark.lit' id='baz'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bard@shakespeare.lit' id='fez'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>Here is an even simpler example: a transient node that sends only event notifications without a payload:</p>
    <example caption='A Transient Notification'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='elsinore/doorbell'/>
  </event>
</message>
]]></example>
    <p>Naturally, the entities involved may need to complete other use cases in order to enable full pubsub functionality -- for example, the publisher may need to create the node (see <link url='#owner-create'>Create a Node</link>) and subscribers may need to sign up for event notifications (see <link url='#subscriber-subscribe'>Subscribe to a Node</link>). These use cases are fully described in the remainder of this document. (For information about which features are required and which are recommended or optional, consult the <link url='#features'>Feature Summary</link>.)</p>
  </section2>
</section1>

<section1 topic='Glossary' anchor='glossary'>
  <p>The following terms are used throughout this document to refer to elements, objects, or actions that occur in the context of a pubsub service. (Note: Some of these terms are specified in greater detail within the body of this document.)</p>
  <dl>
    <di><dt>Authorize Access Model</dt><dd>A node access model under which an entity can subscribe only through having a subscription request approved by a node owner (subscription requests are accepted but only provisionally) and only subscribers may retrieve items.</dd></di>
    <di><dt>Address</dt><dd>(1) A JID as defined in &xmppcore;, or (2) the combination of a JID and a &xep0030; node.</dd></di>
    <di><dt>Collection Node</dt><dd>A type of node that contains nodes and/or other collections but no published items. Collections make it possible to represent more sophisticated relationships among nodes. Collection nodes are defined in &xep0248;.</dd></di>
    <di><dt>Entity</dt><dd>A JID-addressable XMPP entity (client, service, application, etc.).</dd></di>
    <di><dt>Event</dt><dd>A change in the state of a node.</dd></di>
    <di><dt>Instant Node</dt><dd>A node whose NodeID is automatically generated by a pubsub service.</dd></di>
    <di><dt>Item</dt><dd>An XML fragment which is published to a node, thereby generating an event.</dd></di>
    <di><dt>ItemID</dt><dd>A unique identifier for an item in the context of a specific node.</dd></di>
    <di><dt>Leaf Node</dt><dd>A type of node that contains published items only. It is NOT a container for other nodes.</dd></di>
    <di><dt>Node</dt><dd>A virtual location to which information can be published and from which event notifications and/or payloads can be received (in other pubsub systems, this may be labelled a "topic").</dd></di>
    <di><dt>NodeID</dt><dd>The unique identifier for a node within the context of a pubsub service. The NodeID is either supplied by the node creator or generated by the pubsub service (if the node creator requests an Instant Node). The NodeID MAY have semantic meaning (e.g., in some systems or in pubsub profiles such as PEP the NodeID might be an XML namespace for the associated payload), but such meaning is OPTIONAL. If a document defines a given NodeID as unique within the realm of XMPP pubsub systems, it MUST specify the XML namespace of the associated payload.</dd></di>
    <di><dt>Notification</dt><dd>A message sent to a subscriber informing them of an event.</dd></di>
    <di><dt>Outcast</dt><dd>An entity that is disallowed from subscribing or publishing to a node.</dd></di>
    <di><dt>Owner</dt><dd>The manager of a node, of which there may be more than one; often but not necessarily the node creator.</dd></di>
    <di><dt>Open Access Model</dt><dd>A node access model under which any entity may subscribe and retrieve items without approval.</dd></di>
    <di><dt>Payload</dt><dd>The XML data that is contained within the &lt;item/&gt; element of a publication request or an event notification. A given payload is defined by an XML namespace and associated schema. A document that defines a payload format SHOULD specify whether the payload can be used only for a NodeID whose value is the same as the XML namespace, or whether the payload can be used for any NodeID. Such a document also SHOULD specify whether it is suggested that node at which such payloads are published are best configured as <link url='#impl-singleton'>Singleton Nodes</link>.</dd></di>
    <di><dt>Personal Eventing</dt><dd>A simplified subset of Publish-Subscribe for use in the context of instant messaging and presence applications, whereby each IM user's JID is a virtual pubsub service; for details, see &xep0163;.</dd></di>
    <di><dt>Presence Access Model</dt><dd>A node access model under which any entity that is subscribed to the owner's presence with a subscription of type "from" or "both" (see &rfc3921;) may subscribe to the node and retrieve items from the node; this access model applies mainly to instant messaging systems.</dd></di>
    <di><dt>Publisher</dt><dd>An entity that is allowed to publish items to a node and that is automatically subscribed to the node.</dd></di>
    <di><dt>Publish-Only</dt><dd>An entity that is allowed to publish items to a node but that is not allowed to receive notifications. (This affiliation is useful in the context of nodes that do not have an open access model when automated entities need to generate notifications on behalf of the owner.)</dd></di>
    <di><dt>Pubsub Service</dt><dd>An XMPP server or component that adheres to the protocol defined herein.</dd></di>
    <di><dt>Roster Access Model</dt><dd>A node access model under which any entity that is subscribed to the owner's presence and in the specified roster group(s) may subscribe to the node and retrieve items from the node; this access model applies mainly to instant messaging systems.</dd></di>
    <di><dt>Subscriber</dt><dd>An entity that is subscribed to a node.</dd></di>
    <di><dt>Whitelist Access Model</dt><dd>A node access model under which an entity may subscribe and retrieve items only if explicitly allowed to do so by the node owner (subscription requests from unauthorized entities are rejected).</dd></di>
  </dl>
</section1>


    <!-- =================== REQS ======================== -->
<section1 topic='Requirements' anchor='reqs'>
  <p>Requirements for a pubsub service can be driven by end-user needs as well as the needs of other components and services which can use the service. First, a pubsub service implemented using XMPP MUST provide the basic features that implement a pure publish-subscribe pattern:</p>
        <!-- ================== MUSTS =================== -->
  <ul>
    <li>An entity MUST be able to publish events to a service such that all subscribers to a node receive notification of the event. See <link url='#publisher-publish'>Publish an Item to a Node</link>.</li>
    <li>An entity MUST be able to subscribe to a node (or be informed that subscription is not allowed). See <link url='#subscriber-subscribe'>Subscribe to a Node</link>.</li>
    <li>An entity MUST be allowed to be affiliated with a node. Allowable affiliations are member, none, outcast, owner, publish-only, and publisher. Implementations MUST support affiliations of none and owner, and MAY support affiliations of member, outcast, publisher, and publish-only. See <link url='#affiliations'>Affiliations</link>.</li>
    <li>An entity MUST be allowed to query the pubsub service (or a specific node) to determine what optional features of this specification the service (or node) implements. This query MUST use the Service Discovery (disco#info) protocol. See <link url='#entity-info'>Discover Node Information</link>.</li>
  </ul>

        <!-- =================== MAYS and SHOULDS =================== -->
  <p>Some of the possible uses of an XMPP-based pubsub service will require other features, but these features are OPTIONAL and therefore not mandatory for compliance with this specification. However, if these features are implemented, they MUST adhere to the protocol described herein in to be compliant. These features include:</p>
  <ul>
    <li>A service MAY cache the last item published to a node (even if the "persistent-items" option is set to false); if it does default "cache-last-item" to true, it SHOULD send the last published item (or notification thereof) to subscribed entities based on configuration of the "send_last_published_item" field.</li>
    <li>A node owner SHOULD be able to specify who may subscribe to a node.</li>
    <li>A node owner SHOULD be able to specify who may publish to a node.</li>
    <li>A node MAY be configured to deliver the published payload inside the event notification.</li>
    <li>A node MAY be configured to persist published items to some persistent storage mechanism.</li>
    <li>A node MAY be configured to persist only a limited number of items.</li>
    <li>A service MAY support collections as described in <cite>XEP-0248</cite>.</li>
    <li>A service or node MAY support extended service discovery information (meta-data).</li>
  </ul>

</section1>

<section1 topic='Preliminaries' anchor='preliminaries'>

  <section2 topic='Affiliations' anchor='affiliations'>
    <p>To manage permissions, the protocol defined herein uses a hierarchy of affiliations, similiar to those introduced in &xep0045;.</p>
    <p>All affiliations MUST be based on a bare JID &BAREJID; instead of a full JID &FULLJID;.</p>
    <p>Support for the "owner" and "none" affiliations is REQUIRED. Support for all other affiliations is RECOMMENDED. For each non-required affiliation supported by an implementation, it SHOULD return a service discovery feature of "name-affiliation" where "name" is the name of the affiliation, such as "member", "outcast", or "publisher" (see the <link url='#features'>Feature Summary</link>). Particular kinds of pubsub services MAY enforce additional requirements (e.g., requiring support for a given non-required affiliation or for all affiliations).</p>
    <table caption='Affiliations and their Privileges'>
      <tr>
        <th>Affiliation</th>
        <th>Subscribe</th>
        <th>Retrieve Items</th>
        <th>Publish Items</th>
        <th>Delete Single Item</th>
        <th>Purge Node</th>
        <th>Configure Node</th>
        <th>Delete Node</th>
      </tr>
      <tr>
        <td>Owner</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>Publisher</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>Yes *</td>
        <td>Yes *</td>
        <td>No</td>
        <td>No</td>
      </tr>
      <tr>
        <td>Publish-Only</td>
        <td>No</td>
        <td>No</td>
        <td>Yes</td>
        <td>Yes *</td>
        <td>No *</td>
        <td>No</td>
        <td>No</td>
      </tr>
      <tr>
        <td>Member</td>
        <td>Yes</td>
        <td>Yes</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
      </tr>
      <tr>
        <td>None</td>
        <td>Yes</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
      </tr>
      <tr>
        <td>Outcast</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
        <td>No</td>
      </tr>
    </table>
    <p>* Note: A service MAY allow any publisher to delete / purge any item once it has been published to that node instead of allowing only the original publisher to remove it. This behavior is NOT RECOMMENDED for the publish-only affiliation, which SHOULD be allowed to delete only items that the publish-only entity has published.</p>
    <p>The ways in which an entity changes its affiliation with a node are well-defined. Typically, action by an owner is required to make an affiliation state transition. Affiliation changes and their triggering actions are specified in the following table.</p>
    <table caption='Affiliation State Chart'>
      <tr>
        <th>&#160;</th>
        <th>Outcast</th>
        <th>None</th>
        <th>Member</th>
        <th>Publisher</th>
        <th>Owner</th>
      </tr>
      <tr>
        <td>Outcast</td>
        <td>--</td>
        <td>Owner removes ban</td>
        <td>Owner adds entity to member list</td>
        <td>Owner adds entity to publisher list</td>
        <td>Owner adds entity to owner list</td>
      </tr>
      <tr>
        <td>None</td>
        <td>Owner bans entity</td>
        <td>--</td>
        <td>Owner adds entity to member list</td>
        <td>Owner adds entity to publisher list</td>
        <td>Owner adds entity to owner list</td>
      </tr>
      <tr>
        <td>Member</td>
        <td>Owner bans entity</td>
        <td>Owner removes entity from member list</td>
        <td>--</td>
        <td>Owner adds entity to publisher list</td>
        <td>Owner adds entity to owner list</td>
      </tr>
      <tr>
        <td>Publisher</td>
        <td>Owner bans entity</td>
        <td>Owner removes entity from publisher list</td>
        <td>n/a</td>
        <td>--</td>
        <td>Owner adds entity to owner list</td>
      </tr>
      <tr>
        <td>Owner</td>
        <td>n/a</td>
        <td>Owner resigns</td>
        <td>n/a</td>
        <td>n/a</td>
        <td>--</td>
      </tr>
    </table>
  </section2>

  <section2 topic='Subscription States' anchor='substates'>
    <p>Subscriptions to a node may exist in several states.</p>
    <table caption='Subscription States'>
      <tr>
        <th>Subscription State</th>
        <th>Description</th>
        </tr>
      <tr>
        <td>None</td>
        <td>The node MUST NOT send event notifications or payloads to the Entity.</td>
      </tr>
      <tr>
        <td>Pending</td>
        <td>An entity has requested to subscribe to a node and the request has not yet been approved by a node owner. The node MUST NOT send event notifications or payloads to the entity while it is in this state.</td>
      </tr>
      <tr>
        <td>Unconfigured</td>
        <td>An entity has subscribed but its subscription options have not yet been configured. The node MAY send event notifications or payloads to the entity while it is in this state. The service MAY timeout unconfigured subscriptions.</td>
      </tr>
      <tr>
        <td>Subscribed</td>
        <td>An entity is subscribed to a node. The node MUST send all event notifications (and, if configured, payloads) to the entity while it is in this state (subject to subscriber configuration and content filtering).</td>
      </tr>
    </table>
  </section2>

  <section2 topic='Event Types' anchor='events'>
    <p>The requirements for the publish-subscribe protocol imply that there are two major dimensions along which we can measure events: persistent vs. transient, and pure event notification vs. inclusion of payload. An implementation SHOULD enable an owner to configure a node along both of these dimensions.</p>
    <p>No matter whether a node is configured for persistent or transient events, a service MAY cache the last item published to the node, in which case it SHOULD send that item to subscribers based on configuration of the "send_last_published_item" option (see the <link url='#impl-caching'>Item Caching</link> section of this document); if the service supports the "http://jabber.org/protocol/pubsub#last-published" feature then the value of this option MUST default to "on_sub_and_presence" (though the service SHOULD allow the node owner to override the default).</p>
    <p class='box'>Note: The "on_sub_and_presence" setting relates to the <em>subscriber's</em> presence, not the publisher's presence.</p>
    <p>A pubsub service MUST validate publish requests against the configuration of the node along both of these dimensions (see the <link url='#publisher-publish'>Publish An Item to a Node</link> section of this document for the relevant error conditions).</p>
    <p>The node configuration and desired event type determine whether an item must be provided by the publisher, whether the item includes a payload in the publish request or event notification, and whether an item ID is provided by the publisher or generated by the pubsub service. We can summarize the relevant rules as follows:</p>
    <table caption='Items, Payloads, and Item IDs'>
      <tr><th>&#160;</th><th>Notification-Only Node *</th><th>Payload-Included Node *</th></tr>
      <tr>
        <td><strong>Persistent Node **</strong></td>
        <td>Publish request MUST include an &ITEM; element, which MAY be empty or MAY contain a payload; even if publish request contains a payload, pubsub service MUST NOT include the payload in event notifications; if publish request did not include item ID, pubsub service MUST generate item ID</td>
        <td>Publish request MUST include an &ITEM; element, which SHOULD contain a payload; if publish request included a payload, event notifications MUST include the payload; if publish request did not include item ID, pubsub service MUST generate item ID</td>
      </tr>
      <tr>
        <td><strong>Transient Node **</strong></td>
        <td>Publish request MUST NOT include an &ITEM; element; payload is not included in publish request or event notifications, although event notifications MUST include an empty &ITEMS; element; item ID is neither provided in publish request nor generated by pubsub service</td>
        <td>Publish request MUST include an &ITEM; element, which SHOULD contain a payload; if publish request included a payload, event notifications MUST include the payload; pubsub service MAY generate an item ID</td>
      </tr>
    </table>
    <p>* Note: Whether the node is notification-only or includes payloads is determined by the "pubsub#deliver_payloads" configuration field.</p>
    <p>** Note: Whether the node is persistent or transient is determined by the "pubsub#persist_items" configuration field.</p>
  </section2>

  <section2 topic='Node Types' anchor='nodetypes'>
    <p>There are two types of nodes:</p>
    <table caption='Node Types'>
      <tr>
        <th>Node Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>Leaf</td>
        <td>A node that contains published items only. It is NOT a container for other nodes. This is the most common node type.</td>
      </tr>
      <tr>
        <td>Collection</td>
        <td>A node that contains nodes and/or other collections but no published items. Collections make it possible to represent more sophisticated relationships among nodes. For details, refer to <cite>XEP-0248</cite>.</td>
      </tr>
    </table>
  </section2>

  <section2 topic='Node Access Models' anchor='accessmodels'>
    <p>In order to make node creation simpler for clients, we define the following node access models (in order of openness):</p>
    <table caption='Node Access Models'>
      <tr>
        <th>Access Model</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>Open</td>
        <td>Any entity may subscribe to the node (i.e., without the necessity for subscription approval) and any entity may retrieve items from the node (i.e., without being subscribed); this SHOULD be the default access model for generic pubsub services.</td>
      </tr>
      <tr>
        <td>Presence</td>
        <td>Any entity with a subscription of type "from" or "both" may subscribe to the node and retrieve items from the node; this access model applies mainly to instant messaging systems (see <cite>RFC 3921</cite>).</td>
      </tr>
      <tr>
        <td>Roster</td>
        <td>Any entity in the specified roster group(s) may subscribe to the node and retrieve items from the node; this access model applies mainly to instant messaging systems (see <cite>RFC 3921</cite>).</td>
      </tr>
      <tr>
        <td>Authorize</td>
        <td>The node owner must approve all subscription requests, and only subscribers may retrieve items from the node.</td>
      </tr>
      <tr>
        <td>Whitelist</td>
        <td>An entity may subscribe or retrieve items only if on a whitelist managed by the node owner. The node owner MUST automatically be on the whitelist. In order to add entities to the whitelist, the node owner SHOULD use the protocol specified in the <link url='#owner-affiliations'>Manage Affiliated Entities</link> section of this document, specifically by setting the affiliation to "member".</td>
      </tr>
    </table>
    <p>A generic publish-subscribe implementation SHOULD support all of the defined access models, although specialized publish-subscribe implementations MAY support only a subset of the access models. Which access models are provided in a particular deployment is a matter of service provisioning (e.g., some restricted deployments may wish to lock down permissions so that only the "authorize" and "whitelist" access models are provided, or even only the "whitelist" access model).</p>
    <p>A node creator or owner can override the default access model by specifying an appropriate value for the 'pubsub#access_model' configuration field (see the <link url='#owner-create'>Create a Node With Default Configuration</link> and <link url='#owner-configure'>Configure a Node</link> sections of this document).</p>
  </section2>

  <section2 topic='Addressing' anchor='addressing'>
    <p>If a pubsub node is addressable, it MUST be addressable either (1) as a JID or (2) as the combination of a JID and a node. <note>These nodes are equivalent to those used in <cite>XEP-0030: Service Discovery</cite>.</note></p>
    <section3 topic='JID' anchor='addressing-jid'>
      <p>If a pubsub node is addressable as a JID, the NodeID MUST be the resource identifier, and MUST NOT be specified by the "user" portion (node identifier) of the JID (e.g. "domain.tld/NodeID" and "user@domain.tld/NodeID" are allowed; "NodeID@domain.tld" is not allowed <note>This rule does not apply to the root collection node, if any.</note>). JID addressing SHOULD be used when interacting with a pubsub node using a protocol that does not support the node attribute. For example, when a service makes it possible for entities to subscribe to nodes via presence, it would address nodes as JIDs. If a pubsub node is addressable as a JID, the pubsub service MUST ensure that the NodeID conforms to the Resourceprep profile of Stringprep as described in <cite>RFC 3920</cite>.</p>
      <p>Consider the following example, in which the pubsub service is located at the hostname pubsub.shakespeare.lit.</p>
      <example caption='Node addressed as domain.tld/NodeID'><![CDATA[
<iq to='pubsub.shakespeare.lit/news announcements'>
  ...
</iq>
]]></example>
      <p>Now consider the following example, in which the pubsub service is located at pubsub@shakespeare.lit.</p>
      <example caption='Node addressed as user@domain.tld/NodeID'><![CDATA[
<iq to='pubsub@shakespeare.lit/news announcements'>
  ...
</iq>
]]></example>
    </section3>
    <section3 topic='JID+NodeID' anchor='addressing-jidnode'>
      <p>If a pubsub node is addressable as a JID plus node, the NodeID MUST be the value of both the Service Discovery 'node' attribute and the pubsub 'node' attribute; i.e., for discovery purposes, a pubsub node is equivalent to a Service Discovery node. If a pubsub node is addressable as a JID plus node, the pubsub service SHOULD ensure that the NodeID conforms to the Resourceprep profile of Stringprep as described in <cite>RFC 3920</cite>.</p>
      <p>Consider the following example, in which the (virtual) pubsub service is located at hamlet@denmark.lit.</p>
      <example caption='Node addressed as JID+NodeID'><![CDATA[
<iq to='hamlet@denmark.lit'>
  <query node='princely_musings'/>
</iq>
]]></example>
    </section3>
  </section2>
</section1>

<section1 topic='Entity Use Cases' anchor='entity'>
  <p>This section defines the use cases for and protocols to be used by any entity that wishes to interact with a publish-subscribe service, mainly focused on Service Discovery use cases.</p>

  <section2 topic='Discover Features' anchor='entity-features'>
    <p>A service MUST respond to service discovery information requests qualified by the 'http://jabber.org/protocol/disco#info' namespace. The "disco#info" result returned by a pubsub service MUST indicate the identity of the service and indicate which pubsub features are supported.</p>
    <example caption='Entity Queries Pubsub Service Regarding Supported Features'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='feature1'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <example caption='Pubsub Service Returns Set of Supported Features'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='feature1'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='pubsub' type='service'/>
    <feature var='http://jabber.org/protocol/pubsub'/>
  </query>
</iq>
]]></example>
    <p>The possible pubsub features are noted throughout this document and have been registered as described in the <link url='#registrar'>XMPP Registrar Considerations</link> section of this document. For information regarding which features are required, recommended, and optional, see the <link url='#features'>Feature Summary</link> section of this document.</p>
  </section2>

  <section2 topic='Discover Nodes' anchor='entity-nodes'>
    <p>If a service implements a hierarchy of nodes (by means of <link url='#collections'>Collection Nodes</link>), it MUST also enable entities to discover the nodes in that hierarchy by means of the <strong>Service Discovery</strong> protocol, subject to the recommendations in <cite>XEP-0030</cite> regarding large result sets (for which &xep0055; or some other protocol SHOULD be used). The following examples show the use of service discovery in discovering the nodes available at a hierarchical pubsub service.</p>
    <p>Note: Node hierarchies and collection nodes are OPTIONAL. For details, refer to the <link url='#impl-semantics'>NodeID Semantics</link> and <link url='#collections'>Collection Nodes</link> sections of this document.</p>
    <p>In the first example, an entity sends a service discovery items ("disco#items") request to the root node (i.e., the service itself), which is a <link url='#collections'>Collection Node</link>:</p>
    <example caption='Entity asks service for all first-level nodes'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='nodes1'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>
]]></example>
    <example caption='Service returns all first-level nodes'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='nodes1'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='pubsub.shakespeare.lit'
          node='blogs'
          name='Weblog updates'/>
    <item jid='pubsub.shakespeare.lit'
          node='news'
          name='News and announcements'/>
  </query>
</iq>
]]></example>
    <p>In the second example, an entity sends a disco#items request to one of the first-level nodes, which is also a collection node:</p>
    <example caption='Entity requests second-level nodes'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='nodes2'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='blogs'/>
</iq>
]]></example>
    <example caption='Service returns second-level nodes'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='nodes2'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='blogs'>
    <item jid='pubsub.shakespeare.lit'
          node='princely_musings'/>
    <item jid='pubsub.shakespeare.lit'
          node='kingly_ravings'/>
    <item jid='pubsub.shakespeare.lit'
          node='starcrossed_stories'/>
    <item jid='pubsub.shakespeare.lit'
          node='moorish_meanderings'/>
  </query>
</iq>
]]></example>
    <p>If a node is a leaf node rather than a collection node and items have been published to the node, the service MAY return one &ITEM; element for each published item as described in the <link url='#entity-discoveritems'>Discover Items for a Node</link> section of this document, however such items MUST NOT include a 'node' attribute (since they are published items, not nodes).</p>
  </section2>

  <section2 topic='Discover Node Information' anchor='entity-info'>
    <p>A pubsub service MUST allow entities to query individual nodes for the information associated with that node. The Service Discovery protocol MUST be used to discover this information. The "disco#info" result MUST include an identity with a category of "pubsub" and a type of either "leaf" or "collection".</p>
    <p>Note: If a node has an identity type of "leaf", then it MUST NOT contain other nodes or collections (only items); if a node has an identity type of "collection", then it MUST NOT contain items (only other nodes or collections).</p>
    <example caption='Entity queries collection node for information'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='info2'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='blogs'/>
</iq>
]]></example>
    <example caption='Service responds with identity of pubsub/collection'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='meta1'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='blogs'>
    <identity category='pubsub' type='collection'/>
  </query>
</iq>
]]></example>
    <example caption='Entity queries leaf node for information'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='info1'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='princely_musings'/>
</iq>
]]></example>
    <example caption='Service responds with identity of pubsub/leaf'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='info1'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='princely_musings'>
    ...
    <identity category='pubsub' type='leaf'/>
    ...
  </query>
</iq>
]]></example>
  </section2>
  <section2 topic='Discover Node Metadata' anchor='entity-metadata'>
    <p>The "disco#info" result MAY include detailed meta-data about the node, encapsulated in the &xep0004; format as described in &xep0128;, where the data form context is specified by including a FORM_TYPE of "http://jabber.org/protocol/pubsub#meta-data" in accordance with &xep0068;. If meta-data is provided, it SHOULD include values for all configured options as well as "automatic" information such as the node creation date, a list of publishers, and the like.</p>
    <example caption='Entity queries a node for information'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='meta1'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='princely_musings'/>
</iq>
]]></example>
    <example caption='Service responds with information and meta-data'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='meta1'>
  <query xmlns='http://jabber.org/protocol/disco#info'
         node='princely_musings'>
    <identity category='pubsub' type='leaf'/>
    <feature var='http://jabber.org/protocol/pubsub'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>http://jabber.org/protocol/pubsub#meta-data</value>
      </field>
      <field var='pubsub#type' label='Payload type' type='text-single'>
        <value>http://www.w3.org/2005/Atom</value>
      </field>
      <field var='pubsub#creator' label='Node creator' type='jid-single'>
        <value>hamlet@denmark.lit</value>
      </field>
      <field var='pubsub#creation_date' label='Creation date' type='text-single'>
        <value>2003-07-29T22:56Z</value>
      </field>
      <field var='pubsub#title' label='A short name for the node' type='text-single'>
        <value>Princely Musings (Atom)</value>
      </field>
      <field var='pubsub#description' label='A description of the node' type='text-single'>
        <value>Updates for Hamlet&apos;s Princely Musings weblog.</value>
      </field>
      <field var='pubsub#language' label='Default language' type='list-single'>
        <value>en</value>
      </field>
      <field var='pubsub#contact' label='People to contact with questions' type='jid-multi'>
        <value>bard@shakespeare.lit</value>
      </field>
      <field var='pubsub#owner' label='Node owners' type='jid-multi'>
        <value>hamlet@denmark.lit</value>
      </field>
      <field var='pubsub#publisher' label='Publishers to this node' type='jid-multi'>
        <value>hamlet@denmark.lit</value>
      </field>
      <field var='pubsub#num_subscribers' label='Number of subscribers to this node' type='text-single'>
        <value>1066</value>
      </field>
    </x>
  </query>
</iq>
]]></example>
    <p>Note: Node meta-data can be set in many ways. Some of it is based on node configuration (e.g., the owner's JID) whereas some of it may be dynamic (e.g., the number of subscribers). Any static information to be provided in the node meta-data SHOULD be provided as fields in the node configuration form.</p>
    <p>Note: The pubsub#language field SHOULD be list-single so that the pubsub service can present an appropriate list of languages and language codes.</p>
  </section2>

  <section2 topic='Discover Items for a Node' anchor='entity-discoveritems'>
    <p>To discover the published items which exist on the service for a specific node, an entity MAY send a "disco#items" request to the node itself, and the service MAY return each item as a Service Discovery &ITEM; element. The 'name' attribute of each Service Discovery item MUST contain its ItemID and the item MUST NOT possess a 'node' attribute. This ItemID MAY then be used to retrieve the item using the protocol defined in the <link url='#subscriber-retrieve'>Retrieve Items from a Node</link> section of this document.</p>
    <example caption='Entity requests all of the items for a node'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='items1'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='princely_musings'/>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <query xmlns='http://jabber.org/protocol/disco#items'
         node='princely_musings'>
    <item jid='pubsub.shakespeare.lit' name='368866411b877c30064a5f62b917cffe'/>
    <item jid='pubsub.shakespeare.lit' name='3300659945416e274474e469a1f0154c'/>
    <item jid='pubsub.shakespeare.lit' name='4e30f35051b7b8b42abe083742187228'/>
    <item jid='pubsub.shakespeare.lit' name='ae890ac52d0df67ed7cfdf51b644e901'/>
  </query>
</iq>
]]></example>
  </section2>

  <section2 topic='Retrieve Subscriptions' anchor='entity-subscriptions'>
    <p>An entity may want to query the service to retrieve its subscriptions for all nodes at the service. Support for this feature ("retrieve-subscriptions") is RECOMMENDED.</p>
    <p>In order to make the request, the requesting entity MUST send an IQ-get whose &PUBSUB; child contains an empty &lt;subscriptions/&gt; element with no attributes.</p>
    <example caption='Entity requests all current subscriptions'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='subscriptions1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscriptions/>
  </pubsub>
</iq>
]]></example>
    <p>If the service returns a list of subscriptions, it MUST return all subscriptions for all JIDs that match the bare JID &BAREJID; portion of the 'from' attribute on the request.</p>
    <p>For each subscription, a &lt;subscription/&gt; element is returned specifying the NodeID, the JID that is affiliated (which MAY include a resource, depending on how the entity subscribed), and the current subscription state. If subscription identifiers are supported by the service, the 'subid' attribute MUST be present as well.</p>
    <example caption='Service returns all current subscriptions'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit'
    id='subscriptions1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscriptions>
      <subscription node='node1' jid='francisco@denmark.lit' subscription='subscribed'/>
      <subscription node='node2' jid='francisco@denmark.lit' subscription='subscribed'/>
      <subscription node='node5' jid='francisco@denmark.lit' subscription='unconfigured'/>
      <subscription node='node6' jid='francisco@denmark.lit' subscription='subscribed' subid='123-abc'/>
      <subscription node='node6' jid='francisco@denmark.lit' subscription='subscribed' subid='004-yyy'/>
    </subscriptions>
  </pubsub>
</iq>
]]></example>
    <p>If the requesting entity has no subscriptions, the pubsub service MUST return an empty &lt;subscriptions/&gt; element.</p>
    <example caption='No subscriptions'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='subscriptions1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscriptions/>
  </pubsub>
</iq>
]]></example>
    <p>If the service does not support subscriptions retrieval, the service MUST respond with a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "retrieve-subscriptions".</p>
    <example caption='Subscriptions retrieval not supported'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='subscriptions1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='retrieve-subscriptions'/>
  </error>
</iq>
]]></example>
    <p>An entity MAY also request all of its subscriptions at a specific node (e.g., if it has subscriptions with multiple SubIDs) by including a 'node' attribute on the &lt;subscriptions/&gt; element.</p>
    <example caption='Entity requests current subscriptions from a specific node'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='subscriptions2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscriptions node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
    <p>The service would then return only the entity's subscriptions to that specific node; this acts as a filter on the entity's subscriptions.</p>
    <example caption='Service returns all current subscriptions to a specific node'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit'
    id='subscriptions2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscriptions node='node6'>
      <subscription node='node6' jid='francisco@denmark.lit' subscription='subscribed' subid='123-abc'/>
      <subscription node='node6' jid='francisco@denmark.lit' subscription='subscribed' subid='004-yyy'/>
    </subscriptions>
  </pubsub>
</iq>
]]></example>
  </section2>
  <section2 topic='Retrieve Affiliations' anchor='entity-affiliations'>
    <p>An entity may want to query the service to retrieve its affiliations for all nodes at the service, or query a specific node for its affiliation with that node. Support for this feature ("retrieve-affiliations") is RECOMMENDED.</p>
    <p>In order to make the request of the service, the requesting entity includes an empty &lt;affiliations/&gt; element with no attributes.</p>
    <example caption='Entity requests all current affiliations'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='affil1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <affiliations/>
  </pubsub>
</iq>
]]></example>
    <p>If the service returns a list of affiliations, it MUST return all affiliations for all JIDs that match the bare JID &BAREJID; portion of the 'from' attribute on the request.</p>
    <p>For each affiliation, an &lt;affiliation/&gt; element is returned containing the NodeID and the affiliation state (owner, publisher, publish-only, member, or outcast).</p>
    <example caption='Service replies with all current affiliations'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit'
    id='affil1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <affiliations>
      <affiliation node='node1' affiliation='owner'/>
      <affiliation node='node2' affiliation='publisher'/>
      <affiliation node='node5' affiliation='outcast'/>
      <affiliation node='node6' affiliation='owner'/>
    </affiliations>
  </pubsub>
</iq>
]]></example>
    <p>If the requesting entity has no affiliations, the pubsub service MUST return an empty &lt;affiliations/&gt; element.</p>
    <example caption='No affiliations'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='affil1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <affiliations/>
  </pubsub>
</iq>
]]></example>
    <p>If the service does not support affiliations retrieval, the service MUST respond with a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "retrieve-affiliations".</p>
    <example caption='Affiliations retrieval not supported'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='affil1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='retrieve-affiliations'/>
  </error>
</iq>
]]></example>
    <p>In order to make an affiliations request of a specific node, the requesting entity includes an empty &lt;affiliations/&gt; element with a 'node' attribute.</p>
    <example caption='Entity requests affiliation at a specific node'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='affil2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <affiliations node='node6'/>
  </pubsub>
</iq>
]]></example>
    <example caption='Service replies with current affiliation'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit'
    id='affil2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <affiliations>
      <affiliation node='node6' affiliation='owner'/>
    </affiliations>
  </pubsub>
</iq>
]]></example>
  </section2>
</section1>

<section1 topic='Subscriber Use Cases' anchor='subscriber'>

  <p>This section defines the use cases for and protocols to be used by potential and actual subscribers. (Note: The <link url='#impl'>Implementation Notes</link> section of this document describes many important factors and business rules which a pubsub service MUST observe. In addition, the examples throughout assume the existence of a separate pubsub component and include any relevant 'from' addresses as stamped by a server or network edge.)</p>

  <section2 topic='Subscribe to a Node' anchor='subscriber-subscribe'>
    <section3 topic='Request' anchor='subscriber-subscribe-request'>
      <p>When an XMPP entity wishes to subscribe to a node, it sends a subscription request to the pubsub service. The subscription request is an IQ-set where the &lt;pubsub/&gt; element contains one and only one &lt;subscribe/&gt; element. The &lt;subscribe/&gt; element SHOULD possess a 'node' attribute specifying the node to which the entity wishes to subscribe. The &lt;subscribe/&gt; element MUST also possess a 'jid' attribute specifying the exact XMPP address to be used as the subscribed JID -- often a bare JID &BAREJID; or full JID &FULLJID;.</p>
      <p>Here is an example of a subscription request.</p>
      <example caption='Entity subscribes to a node'><![CDATA[
<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscribe
        node='princely_musings'
        jid='francisco@denmark.lit'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='subscriber-subscribe-success'>
      <p>If the subscription request is successfully processed, the server MUST inform the requesting entity that it is now subscribed (which MAY include a service-generated SubID).</p>
      <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='francisco@denmark.lit'
        subid='ba49252aaa4f5d320c24d3766f0bdcade78c78d3'
        subscription='subscribed'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='subscriber-subscribe-error'>
      <p>There are several reasons why the subscription request might fail:</p>
      <ol>
        <li>The bare JID portions of the JIDs do not match.</li>
        <li>The node has an access model of "presence" and the requesting entity is not subscribed to the owner's presence.</li>
        <li>The node has an access model of "roster" and the requesting entity is not in one of the authorized roster groups.</li>
        <li>The node has an access model of "whitelist" and the requesting entity is not on the whitelist.</li>
        <li>The service requires payment for subscriptions to the node.</li>
        <li>The requesting entity is anonymous and the service does not allow anonymous entities to subscribe.</li>
        <li>The requesting entity has a pending subscription.</li>
        <li>The requesting entity is blocked from subscribing (e.g., because having an affiliation of outcast).</li>
        <li>The requesting entity has attempted to establish too many subscriptions.</li>
        <li>The node does not support subscriptions.</li>
        <li>The node has moved.</li>
        <li>The node does not exist.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='JIDs Do Not Match' anchor='subscriber-subscribe-error-nomatch'>
        <p>If the specified JID is a bare JID or full JID, the service MUST at a minimum check the bare JID portion against the bare JID portion of the 'from' attribute on the received IQ request to make sure that the requesting entity has the same identity as the JID which is being requested to be added to the subscriber list.</p>
        <p>If the bare JID portions of the JIDs do not match as described above and the requesting entity does not have some kind of admin or proxy privilege as defined by the implementation, the service MUST return a &badrequest; error, which SHOULD also include a pubsub-specific error condition of &lt;invalid-jid/&gt;.</p>
        <example caption='JIDs do not match'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <invalid-jid xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
        <p>Note: An implementation MAY enable the service administrator to configure a list of entities that are excluded from this check; those entities may be considered "trusted proxies" that are allowed to subscribe on behalf of other entities. In the same way, implementations MAY enable blacklisting of entities that are not allowed to perform specific operations (such as subscribing or creating nodes).</p>
      </section4>
      <section4 topic='Presence Subscription Required' anchor='subscriber-subscribe-error-presence'>
        <p>For nodes with an access model of "presence", if the requesting entity is not subscribed to the owner's presence then the pubsub service MUST respond with a &notauthorized; error, which SHOULD also include a pubsub-specific error condition of &lt;presence-subscription-required/&gt;.</p>
        <example caption='Entity is not authorized to create a subscription (presence subscription required)'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='auth'>
    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <presence-subscription-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Not in Roster Group' anchor='subscriber-subscribe-error-rostergroup'>
        <p>For nodes with an access model of "roster", if the requesting entity is not in one of the authorized roster groups then the pubsub service MUST respond with a &notauthorized; error, which SHOULD also include a pubsub-specific error condition of &lt;not-in-roster-group/&gt;.</p>
        <example caption='Entity is not authorized to create a subscription (not in roster group)'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='auth'>
    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <not-in-roster-group xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Not on Whitelist' anchor='subscriber-subscribe-error-whitelist'>
        <p>For nodes with a node access model of "whitelist", if the requesting entity is not on the whitelist then the service MUST return a &notallowed; error, specifying a pubsub-specific error condition of &lt;closed-node/&gt;.</p>
        <example caption='Node has whitelist access model'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='cancel'>
    <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <closed-node xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Payment Required' anchor='subscriber-subscribe-error-payment'>
        <p>Commercial deployments may wish to link subscribers to a database of paying customers. If the subscriber needs to provide payment in order to subscribe to the node (e.g., if the subscriber is not in the customer database or the customer's account is not paid up), the service SHOULD return a &payment; error to the subscriber.</p>
        <example caption='Payment is required for a subscription'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='auth'>
    <payment-required xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Anonymous Subscriptions Not Allowed' anchor='subscriber-subscribe-error-anonymous'>
        <p>Some XMPP servers may allow authentication using SASL ANONYMOUS; however, because the resulting entity is unstable (the assigned JID may not be owned by the same principal in a persistent manner), a service MAY prevent anonymous entities from subscribing to nodes and SHOULD use service discovery to determine if an entity has an identity of "account/anonymous". If a requesting entity is anonymous but the service does not allow anonymous entities to subscribe, the service SHOULD return a &forbidden; error to the subscriber.</p>
        <example caption='Requesting entity is anonymous'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='anonymous@denmark.lit/foo'
    id='sub1'>
  <error type='cancel'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Subscription Pending' anchor='subscriber-subscribe-error-pending'>
        <p>If the requesting entity has a pending subscription, the service MUST return a &notauthorized; error to the subscriber, specifying a pubsub-specific error condition of &lt;pending-subscription/&gt;.</p>
        <example caption='Requesting entity has pending subscription'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='auth'>
    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <pending-subscription xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Blocked' anchor='subscriber-subscribe-error-blocked'>
        <p>If the requesting entity is blocked from subscribing (e.g., because having an affiliation of outcast), the service MUST return a &forbidden; error to the subscriber.</p>
        <example caption='Requesting entity is blocked'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Too Many Subscriptions' anchor='subscriber-subscribe-error-toomany'>
        <p>If the requesting entity has attempted to establish too many subscriptions (where the definition of "too many" is a matter of local service policy), the service MUST return a &policy; error to the subscriber, specifying a pubsub-specific error condition of &lt;too-many-subscriptions/&gt;.</p>
        <example caption='Requesting entity has exceeded limit on number of subscriptions'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='wait'>
    <policy-violation xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <too-many-subscriptions xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
        <p>The service can match on bare JID or full JID in determining which subscribing entities match for the purpose of determining if an entity has requested too many subscriptions.</p>
      </section4>
      <section4 topic='Subscriptions Not Supported' anchor='subscriber-subscribe-error-unsupported'>
        <p>If the node does not allow entities to subscribe, the service SHOULD return a &feature; error to the subscriber, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "subscribe".</p>
        <example caption='Subscribing not supported'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='subscribe'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Has Moved' anchor='subscriber-subscribe-error-redirect'>
        <p>If the node has, the service SHOULD return a &gone; error (if the node has moved permanently) or a &redirect; error (if the node has moved temporarily).</p>
        <example caption='Node has moved'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='modify'>
    <gone xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>
      xmpp:pubsub.shakespeare.lit?;node=some-other-node
    </gone>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='subscriber-subscribe-error-node'>
        <p>If the node does not exist, the service SHOULD return an &notfound; error to the subscriber.</p>
        <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
    <section3 topic='Approval Required' anchor='subscriber-subscribe-approval'>
      <p>For nodes with an access model of "authorize", subscription requests MUST be approved by one of the node owners unless service policy allows entities with affiliations other than "none" to auto-subscribe (e.g., members and publishers might be allowed to auto-subscribe); therefore the pubsub service sends a message to the node owner(s) requesting authorization (see the <link url='#owner-subreq'>Manage Subscription Requests</link> section of this document). Because the subscription request may or may not be approved, the service MUST return a pending notification to the subscriber.</p>
      <example caption='Service replies with pending'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='francisco@denmark.lit'
        subscription='pending'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Configuration Required' anchor='subscriber-subscribe-configure'>
      <p>If the entity must configure its subscription options (see the <link url='#subscriber-configure'>Configure Subscription Options</link> section of this document) before receiving event notifications, the service MUST so inform the entity. It SHOULD do so by returning an IQ-result to the requesting entity with a notation that configuration of subscription options is required.</p>
      <example caption='Service replies with success and indicates that subscription configuration is required'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='francisco@denmark.lit'
        subscription='unconfigured'>
      <subscribe-options>
        <required/>
      </subscribe-options>
    </subscription>
  </pubsub>
</iq>
]]></example>
      <p>Note: The node shall include the &lt;required/&gt; child element only if the subscriber must configure the subscription before receiving any event notifications. A service MAY time out subscription requests if configuration is required and a configuration request is not submitted within a reasonable amount of time (which shall be determined by the service or node configuration).</p>
      <p>Alternatively, if the service is unable to create the subscription without simultaneous configuration, the service MAY return a &notacceptable; error, specifying a pubsub-specific error condition of &lt;configuration-required/&gt;.</p>
      <example caption='Service returns error specifying that subscription configuration is required'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscribe
        node='princely_musings'
        jid='francisco@denmark.lit'/>
    <options node='princely_musings' jid='francisco@denmark.lit'>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        <field var='pubsub#deliver'><value>1</value></field>
        <field var='pubsub#digest'><value>0</value></field>
        <field var='pubsub#include_body'><value>false</value></field>
        <field var='pubsub#show-values'>
          <value>chat</value>
          <value>online</value>
          <value>away</value>
        </field>
      </x>
    </options>
  </pubsub>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <configuration-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      <p>If the &lt;required/&gt; element is not included and no error is returned, the subscription takes effect immediately and the entity may configure the subscription at any time (the service MAY indicate that subscription options are supported by including an empty &lt;subscribe-options/&gt; element in the IQ-result, as shown in the following example).</p>
      <example caption='Service replies with success and indicates that subscription options are supported but not required'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='francisco@denmark.lit'
        subscription='unconfigured'>
      <subscribe-options/>
    </subscription>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Multiple Subscriptions' anchor='subscriber-subscribe-multi'>
      <p>An entity may wish to subscribe using different subscription options, which it can do by subscribing multiple times to the same node. Support for this feature ("multi-subscribe") is OPTIONAL.</p>
      <p>If multiple subscriptions for the same JID are allowed, the service MUST use the 'subid' attribute to differentiate between subscriptions for the same entity (therefore the SubID MUST be unique for each node+JID combination and the SubID MUST be present on the entity element any time it is sent to the subscriber). It is NOT RECOMMENDED for clients to generate SubIDs, since collisions might result; therefore a service SHOULD generate the SubID on behalf of the subscriber and MAY overwrite SubIDs if they are provided by subscribers. If the service does not allow multiple subscriptions for the same entity and it receives an additional subscription request, the service MUST return the current subscription state (as if the subscription was just approved).</p>
      <p>When the pubsub service generates event notifications, it SHOULD send only one event notification to an entity that has multiple subscriptions, rather than one event notification for each subscription. By "entity" here is meant the JID specified for the subscription, whether bare JID or full JID; however, if the same bare JID has multiple subscriptions but those subscriptions are for different full JIDs (e.g., one subscription for user@domain.tld./foo and another subscription for user@domain.tld/bar), the service MUST treat those as separate JIDs for the purpose of generating event notifications.</p>
    </section3>
    <section3 topic='Receiving the Last Published Item' anchor='subscriber-subscribe-last'>
      <p>When a subscription request is successfully processed, the service MAY send the last published item to the new subscriber. The message containing this item SHOULD be stamped with extended information qualified by the 'urn:xmpp:delay' namespace (see &xep0203;) to indicate it is sent with delayed delivery. (Note that in this example the event notification is sent to the bare JID since that is the subscribed JID.)</p>
      <example caption='Service sends last published item'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </event>
  <delay xmlns='urn:xmpp:delay' stamp='2003-12-13T23:58:37Z'/>
</message>
]]></example>
      <p>If the service sends the last published item by default for all nodes (subject to overriding by node configuration), it MUST return a feature of "http://jabber.org/protocol/pubsub#last-published" in its responsess to disco#info requests.</p>
    </section3>
  </section2>

  <section2 topic='Unsubscribe from a Node' anchor='subscriber-unsubscribe'>
    <section3 topic='Request' anchor='subscriber-unsubscribe-request'>
      <p>To unsubscribe from a node, the subscriber sends an IQ-set whose &PUBSUB; child contains an &lt;unsubscribe/&gt; element that specifies the node and the subscribed JID.</p>
      <example caption='Entity unsubscribes from a node'><![CDATA[
<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='unsub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
     <unsubscribe
         node='princely_musings'
         jid='francisco@denmark.lit'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='subscriber-unsubscribe-success'>
      <p>If the request can be successfully processed, the service MUST return an IQ result and MAY include a &PUBSUB; child element with the updated &lt;subscription/&gt; element for that node. If subscription identifiers are supported by the service, the 'subid' attribute MUST be present as well.</p>
      <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='unsub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='francisco@denmark.lit'
        subscription='none'
        subid='ba49252aaa4f5d320c24d3766f0bdcade78c78d3'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='subscriber-unsubscribe-error'>
      <p>There are several reasons why the unsubscribe request might fail:</p>
      <ol>
        <li>The requesting entity has multiple subscriptions to the node but does not specify a subscription ID.</li>
        <li>The request does not specify an existing subscriber.</li>
        <li>The requesting entity does not have sufficient privileges to unsubscribe the specified JID.</li>
        <li>The node does not exist.</li>
        <li>The request specifies a subscription ID that is not valid or current.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='No Subscription ID' anchor='subscriber-unsubscribe-error-nosubid'>
        <p>If the requesting entity has multiple subscriptions to the node but does not specify a subscription ID, the service MUST return a &badrequest; error, which SHOULD also include a pubsub-specific error condition of &lt;subid-required/&gt;.</p>
        <example caption='Entity did not specify SubID'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='unsub1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <subid-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='No Such Subscriber' anchor='subscriber-unsubscribe-error-nosub'>
        <p>If the value of the 'jid' attribute does not specify an existing subscriber, the pubsub service MUST return an error stanza, which SHOULD be &unexpected; and which SHOULD also include a pubsub-specific error condition of &lt;not-subscribed/&gt;.</p>
        <example caption='Requesting entity is not a subscriber'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='unsub1'>
  <error type='cancel'>
    <unexpected-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <not-subscribed xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Insufficient Privileges' anchor='subscriber-unsubscribe-error-forbidden'>
        <p>If the requesting entity is prohibited from unsubscribing the specified JID, the service MUST return a &forbidden; error. The service MUST validate that the entity making the request is authorized to unsubscribe the entity. If the subscriber's JID is of the form &FULLJID;, a service MUST perform this check by comparing the &BAREJID; part of the two JIDs to ensure that they match. If the bare JID portions of the JIDs do not match and the requesting entity is not authorized to unsubscribe the JID (e.g., because it is not a service-wide admin or authorized proxy), the service MUST return a &forbidden; error.</p>
        <example caption='Requesting entity is prohibited from unsubscribing entity'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='unsub1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='subscriber-unsubscribe-error-node'>
        <p>If the node does not exist, the pubsub service MUST return an &notfound; error.</p>
        <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='unsub1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Bad Subscription ID' anchor='subscriber-unsubscribe-error-badsubid'>
        <p>If a subscription identifier is associated with the subscription, the unsubscribe request MUST include an appropriate 'subid' attribute. If the unsubscribe request includes a SubID but SubIDs are not supported for the node (or the subscriber did not subscribe using a SubID in the first place), the service SHOULD ignore the SubID and simply unsubscribe the entity. If the subscriber originally subscribed with a SubID but the unsubscribe request includes a SubID that is not valid or current for the subscriber, the service MUST return a &notacceptable; error, which SHOULD also include a pubsub-specific error condition of &lt;invalid-subid/&gt;.</p>
        <example caption='Invalid subscription identifier'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='unsub1'>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <invalid-subid xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
  </section2>
  <section2 topic='Configure Subscription Options' anchor='subscriber-configure'>
    <p>An implementation MAY allow subscribers to configure subscription options. Implementations SHOULD use the <cite>Data Forms</cite> protocol to accomplish this configuration (however, an out-of-band mechanism such as a web interface could be offered as well).</p>
    <section3 topic='Advertising Support' anchor='subscriber-configure-support'>
      <p>If a service supports subscription options it MUST advertise that fact in its response to a "disco#info" query by including a feature whose 'var' attribute is "pubsub#subscription-options".</p>
      <example caption='Pubsub service indicates support for subscription options'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='feature1'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='http://jabber.org/protocol/pubsub#subscription-options'/>
    ...
  </query>
</iq>
]]></example>
    </section3>
    <section3 topic='Request' anchor='subscriber-configure-request'>
      <p>A subscriber requests the subscription options by including an &lt;options/&gt; element inside an IQ-get stanza.</p>
      <example caption='Subscriber requests subscription options form'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='options1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='subscriber-configure-success'>
      <p>If the request can be successfully processed, the service MUST respond with the options.</p>
      <example caption='Service responds with the options form'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='options1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'>
      <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        <field var='pubsub#deliver' type='boolean'
               label='Enable delivery?'>
          <value>1</value>
        </field>
        <field var='pubsub#digest' type='boolean'
               label='Receive digest notifications (approx. one per day)?'>
          <value>0</value>
        </field>
        <field var='pubsub#include_body' type='boolean'
               label='Receive message body in addition to payload?'>
          <value>false</value>
        </field>
        <field
            var='pubsub#show-values'
            type='list-multi'
            label='Select the presence types which are
                   allowed to receive event notifications'>
          <option label='Want to Chat'><value>chat</value></option>
          <option label='Available'><value>online</value></option>
          <option label='Away'><value>away</value></option>
          <option label='Extended Away'><value>xa</value></option>
          <option label='Do Not Disturb'><value>dnd</value></option>
          <value>chat</value>
          <value>online</value>
        </field>
      </x>
    </options>
  </pubsub>
</iq>
]]></example>
      <p>Note: The foregoing example shows some (but by no means all) of the possible configuration options that MAY be provided. If an implementation provides these options using the <strong>Data Forms</strong> protocol, it MUST use the field variables that are registered with the XMPP Registrar in association with the 'http://jabber.org/protocol/pubsub' namespace (a preliminary representation of those field variables is shown above and in the <link url='#registrar-formtypes-subscribe'>pubsub#subscribe_options FORM_TYPE</link> section of this document, but MUST NOT be construed as canonical since the XMPP Registrar may standardize additional fields at a later date without changes to this document).</p>
      <p>Note: Many of the relevant data form fields are of type "boolean" and MUST be handled accordingly. &BOOLEANNOTE;</p>
    </section3>
    <section3 topic='Error Cases' anchor='subscriber-configure-error'>
      <p>There are several reasons why the options request might fail:</p>
      <ol>
        <li>The requesting entity does not have sufficient privileges to modify subscription options for the specified JID.</li>
        <li>The requesting entity (or specified subscriber) is not subscribed.</li>
        <li>The request does not specify both the NodeID and the subscriber's JID.</li>
        <li>The request does not specify a subscription ID but one is required.</li>
        <li>The request specifies a subscription ID that is not valid or current.</li>
        <li>Subscription options are not supported.</li>
        <li>The node does not exist.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Insufficient Privileges' anchor='subscriber-configure-error-forbidden'>
        <p>When requesting subscription options, the subscriber MUST specify the JID that is subscribed to the node and SHOULD specify a node (if no node is specified, i.e. via node="", the service MUST assume that the requesting entity wishes to request subscription options for its subscription to the root collection node; refer to <cite>XEP-0248</cite> for details).</p>
        <p>The service MUST validate that the entity making the request is authorized to set the subscription options for the subscribed entity. If the subscriber's JID is of the form &FULLJID;, a service MUST perform this check by comparing the &BAREJID; part of the two JIDs to ensure that they match. If the bare JID portions of the JIDs do not match and the requesting entity is not authorized to modify subscription options for the JID (e.g., because it is not a service-wide admin or authorized proxy), the service MUST return a &forbidden; error.</p>
        <example caption='Requesting entity does not have sufficient privileges to modify subscription options'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='No Such Subscriber' anchor='subscriber-configure-error-nosub'>
        <p>If the requesting entity (or specified subscriber, if different) is not subscribed, the service MUST return an &unexpected; error, which SHOULD also include a pubsub-specific error condition of &lt;not-subscribed/&gt;.</p>
        <example caption='No such subscriber'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='options1'>
  <error type='modify'>
    <unexpected-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <not-subscribed xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Subscriber JID Required' anchor='subscriber-configure-error-jid'>
        <p>If the subscriber does not specify a subscriber JID, the service MUST return a &badrequest; error, which SHOULD also include a pubsub-specific error condition of &lt;jid-required/&gt;.</p>
        <example caption='Subscriber JID not specified'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='options1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <jid-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Subscription ID Required' anchor='subscriber-configure-error-subid'>
        <p>If a subscription identifier is associated with the subscription, the 'subid' attribute MUST be present on the request in order for the service to differentiate subscriptions for the same entity. If the 'subid' is required but not provided, the service MUST return a &badrequest; error, which SHOULD also include a pubsub-specific error condition of &lt;subid-required/&gt;.</p>
        <example caption='SubID required'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <subid-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Invalid Subscription ID' anchor='subscriber-configure-error-badsubid'>
        <p>If a subscription identifier is associated with the subscription but the request includes a SubID that is not valid or current for the subscriber, the service MUST return a &notacceptable; error, which SHOULD also include a pubsub-specific error condition of &lt;invalid-subid/&gt;.</p>
        <example caption='Invalid subscription identifier'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='unsub1'>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <invalid-subid xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Subscription Options Not Supported' anchor='subscriber-configure-error-options'>
        <p>If the node or service does not support subscription options, the service MUST respond with a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "subscription-options".</p>
        <example caption='Subscription options not supported'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='options1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='subscription-options'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='subscriber-configure-error-node'>
        <p>If the node does not exist, the pubsub service MUST return an &notfound; error.</p>
        <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='options1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
    <section3 topic='Form Submission' anchor='subscriber-configure-submit'>
      <p>After receiving the configuration form, the requesting entity SHOULD submit the form in order to update the entity's subscription options for that node.</p>
      <example caption='Subscriber submits completed options form'><![CDATA[
<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='options2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'>
        <x xmlns='jabber:x:data' type='submit'>
          <field var='FORM_TYPE' type='hidden'>
            <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
          </field>
          <field var='pubsub#deliver'><value>1</value></field>
          <field var='pubsub#digest'><value>0</value></field>
          <field var='pubsub#include_body'><value>false</value></field>
          <field var='pubsub#show-values'>
            <value>chat</value>
            <value>online</value>
            <value>away</value>
          </field>
        </x>
     </options>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Form Processing' anchor='subscriber-configure-process'>
      <section4 topic='Success' anchor='subscriber-configure-process-success'>
        <p>If the service can successfully process the submission, it MUST respond with success.</p>
        <example caption='Service responds with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='options2'/>
]]></example>
      </section4>
      <section4 topic='Failure' anchor='subscriber-configure-process-failure'>
        <p>If the subscriber attempts to set an invalid group of options, the service MUST respond with a &badrequest; error.</p>
        <example caption='Service responds with Bad Request for invalid options'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='options2'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <invalid-options xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
        <p>The other errors already mentioned for getting subscription options also apply to setting subscription options.</p>
      </section4>
    </section3>
    <section3 topic='Subscribe and Configure' anchor='subscriber-configure-subandconfig'>
      <p>As noted, if a service supports subscription options, an entity MAY subscribe and provide the subscription options in the same stanza.</p>
      <p>Note: The &lt;options/&gt; element MUST follow the &lt;subscribe/&gt; element and MUST NOT possess a 'node' attribute or 'jid' attribute, since the value of the &lt;subscribe/&gt; element's 'node' attribute specifies the desired NodeID and the value of the &lt;subscribe/&gt; element's 'jid' attribute specifies the subscriber's JID; if any of these rules are violated, the service MUST return a &badrequest; error.</p>
      <example caption='Entity subscribes to node and sets configuration options'><![CDATA[
<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscribe node='princely_musings' jid='francisco@denmark.lit'/>
    <options>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        <field var='pubsub#deliver'><value>1</value></field>
        <field var='pubsub#digest'><value>0</value></field>
        <field var='pubsub#include_body'><value>false</value></field>
        <field var='pubsub#show-values'>
          <value>chat</value>
          <value>online</value>
          <value>away</value>
        </field>
      </x>
    </options>
  </pubsub>
</iq>
]]></example>
      <p>When the service informs the client of success, it SHOULD include a data form of type "result" informing the client of the resulting configuration options.</p>
      <example caption='Service replies with success (including configuration options)'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='sub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='francisco@denmark.lit'
        subid='ba49252aaa4f5d320c24d3766f0bdcade78c78d3'
        subscription='subscribed'/>
    <options>
      <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        <field var='pubsub#deliver'><value>1</value></field>
        <field var='pubsub#digest'><value>0</value></field>
        <field var='pubsub#include_body'><value>false</value></field>
        <field var='pubsub#show-values'>
          <value>chat</value>
          <value>online</value>
          <value>away</value>
        </field>
      </x>
    </options>
  </pubsub>
</iq>
]]></example>
    </section3>
  </section2>
  <section2 topic='Request Default Subscription Configuration Options' anchor='subscribe-default'>
    <p>An entity might want to request information about the default subscription configuration. Support for this feature is OPTIONAL.</p>
    <section3 topic='Request' anchor='subscriber-default-request'>
      <p>To get the default subscription options for a node, the entity MUST send an empty &lt;default/&gt; element to the node; in response, the node SHOULD return the default subscription options.</p>
      <example caption='Entity requests default subscription configuration options'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='def1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <default node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
      <p>Note: Here the namespace is 'http://jabber.org/protocol/pubsub' (not 'http://jabber.org/protocol/pubsub#owner' as for retrieval of the default node configuration options).</p>
      <p>The service itself MAY also have default subscription configuration options. To get the default subscription configuration options all (leaf) nodes at a service, the entity MUST send an empty &lt;default/&gt; element but not specifiy a node; in response, the service SHOULD return the default subscription options.</p>
      <example caption='Entity requests default subscription configuration options'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='def2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <default/>
  </pubsub>
</iq>
]]></example>
      <p>The process for retrieving the default subscription configuration options for collection nodes is described in <cite>XEP-0248</cite>.</p>
    </section3>
    <section3 topic='Success Case' anchor='subscriber-default-success'>
      <p>If no error occurs, the node MUST return the default subscription configuration options.</p>
      <example caption='Service responds with default subscription configuration options'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='def1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <default node='princely_musings'>
      <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        <field var='pubsub#deliver'><value>1</value></field>
        <field var='pubsub#digest'><value>0</value></field>
        <field var='pubsub#include_body'><value>false</value></field>
        <field var='pubsub#show-values'>
          <value>chat</value>
          <value>online</value>
          <value>away</value>
        </field>
      </x>
    </default>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='subscriber-default-error'>
      <p>There are several reasons why the default subscription configuration options request might fail:</p>
      <ol>
        <li>The service does not support subscription configuration.</li>
        <li>The service does not support retrieval of default subscription configuration.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Node Configuration Not Supported' anchor='subscriber-default-error-noconfig'>
        <p>If the node does not support subscription configuration, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "subscription-options".</p>
        <example caption='Service does not support subscription configuration'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='def1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='subscription-options'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Default Subscription Configuration Retrieval Not Supported' anchor='subscriber-default-error-notsupported'>
        <p>If the node does not support retrieval of default subscription configuration options, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "retrieve-default-sub".</p>
        <example caption='Service does not support retrieval of default subscription configuration options'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='def1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='retrieve-default-sub'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
  </section2>
  <section2 topic='Retrieve Items from a Node' anchor='subscriber-retrieve'>
    <p>Implementations of pubsub that choose to persist items MAY allow entities to request existing items from a node (e.g., an entity may wish to do this after successfully subscribing in order to receive all the items in the publishing history for the node).</p>
    <section3 topic='Permissions' anchor='subscriber-retrieve-perms'>
      <p>The service MUST conform to the node's access model in determining whether to return items to the entity that requests them. Specifically:</p>
      <ul>
        <li><p>If the access model is "open", the service SHOULD allow any entity (whether or not it is subscribed) to retrieve items.</p></li>
        <li><p>If the access model is "presence", the service SHOULD allow any entity that is subscribed to the owner's presence to retrieve items.</p></li>
        <li><p>If the access model is "roster", the service SHOULD allow any entity that is subscribed to the owner's presence and contained in the relevant roster group(s) to retrieve items.</p></li>
        <li><p>If the access model is "authorize" or "whitelist", the service MUST allow only subscribed entities to retrieve items.</p></li>
      </ul>
      <p>The only exception foreseen to the SHOULD requirements for the foregoing access models is the enforcement of local privacy and security policies as specified more fully in the <link url='#security'>Security Considerations</link> section of this document. (In addition, a service MUST always allow the node owner to retrieve items from a node and SHOULD always allow a publisher to do so.)</p>
    </section3>
    <section3 topic='Requesting All Items' anchor='subscriber-retrieve-requestall'>
      <p>The subscriber may request all items by specifying only the Node ID without restrictions.</p>
      <example caption='Subscriber requests all items'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Returning All Items' anchor='subscriber-retrieve-returnall'>
      <p>The service then SHOULD return all available items at the node, although it MAY truncate the result set if a large number of items has been published (see next section) and naturally it cannot return items that have been deleted, expired, etc.</p>
      <example caption='Service returns all items'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='368866411b877c30064a5f62b917cffe'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>The Uses of This World</title>
          <summary>
O, that this too too solid flesh would melt
Thaw and resolve itself into a dew!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-12T17:47:23Z</published>
          <updated>2003-12-12T17:47:23Z</updated>
        </entry>
      </item>
      <item id='3300659945416e274474e469a1f0154c'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Ghostly Encounters</title>
          <summary>
O all you host of heaven! O earth! what else?
And shall I couple hell? O, fie! Hold, hold, my heart;
And you, my sinews, grow not instant old,
But bear me stiffly up. Remember thee!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-12T23:21:34Z</published>
          <updated>2003-12-12T23:21:34Z</updated>
        </entry>
      </item>
      <item id='4e30f35051b7b8b42abe083742187228'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Alone</title>
          <summary>
Now I am alone.
O, what a rogue and peasant slave am I!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-13T11:09:53Z</published>
          <updated>2003-12-13T11:09:53Z</updated>
        </entry>
      </item>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Returning Some Items' anchor='subscriber-retrieve-returnsome'>
      <p>A node may have a large number of items associated with it, in which case it may be problematic to return all of the items in response to an items request. In this case, the service SHOULD return some of the items and note that the list of items has been truncated by including a &xep0059; notation.</p>
      <example caption='Service returns some items via result set management'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='368866411b877c30064a5f62b917cffe'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>The Uses of This World</title>
          <summary>
O, that this too too solid flesh would melt
Thaw and resolve itself into a dew!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-12T17:47:23Z</published>
          <updated>2003-12-12T17:47:23Z</updated>
        </entry>
      </item>
      <item id='3300659945416e274474e469a1f0154c'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Ghostly Encounters</title>
          <summary>
O all you host of heaven! O earth! what else?
And shall I couple hell? O, fie! Hold, hold, my heart;
And you, my sinews, grow not instant old,
But bear me stiffly up. Remember thee!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-12T23:21:34Z</published>
          <updated>2003-12-12T23:21:34Z</updated>
        </entry>
      </item>
      <item id='4e30f35051b7b8b42abe083742187228'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Alone</title>
          <summary>
Now I am alone.
O, what a rogue and peasant slave am I!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-13T11:09:53Z</published>
          <updated>2003-12-13T11:09:53Z</updated>
        </entry>
      </item>
    </items>
    <set xmlns='http://jabber.org/protocol/rsm'>
      <first index='0'>368866411b877c30064a5f62b917cffe</first>
      <last>4e30f35051b7b8b42abe083742187228</last>
      <count>19</count>
    </set>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Returning the Last Published Item' anchor='subscriber-retrieve-returnlast'>
      <p>Even if the service or node does not support persistent items, it MAY return the last published item.</p>
      <example caption='Service returns last published item'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Returning Notifications Only' anchor='subscriber-retrieve-returnnotify'>
      <p>A service MAY return event notifications without payloads (e.g., to conserve bandwidth). If so, the client MAY request a specific item (using the ItemID) in order to retrieve the payload. When an entity requests items by ItemID, implementations MUST allow multiple items to be specified in the request.</p>
      <example caption='Subscriber requests specific items by ItemID'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='items3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='368866411b877c30064a5f62b917cffe'/>
      <item id='4e30f35051b7b8b42abe083742187228'/>
    </items>
  </pubsub>
</iq>
]]></example>
    <example caption='Service sends requested item(s)'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    id='items3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='368866411b877c30064a5f62b917cffe'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>The Uses of This World</title>
          <summary>
O, that this too too solid flesh would melt
Thaw and resolve itself into a dew!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-12T17:47:23Z</published>
          <updated>2003-12-12T17:47:23Z</updated>
        </entry>
      </item>
      <item id='4e30f35051b7b8b42abe083742187228'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Alone</title>
          <summary>
Now I am alone.
O, what a rogue and peasant slave am I!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-13T11:09:53Z</published>
          <updated>2003-12-13T11:09:53Z</updated>
        </entry>
      </item>
    </items>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Requesting the Most Recent Items' anchor='subscriber-retrieve-requestrecent'>
      <p>A service MAY allow entities to request the most recent N items by using the 'max_items' attribute. When max_items is used, implementations SHOULD return the N most recent (as opposed to the N oldest) items. (Note: A future version of this specification may recommend the use of <cite>XEP-0059</cite> instead of the 'max_items' attribute.)</p>
      <example caption='Subscriber requests two most recent items'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='items2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings' max_items='2'/>
  </pubsub>
</iq>
]]></example>
    <example caption='Service returns two most recent items'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='4e30f35051b7b8b42abe083742187228'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Alone</title>
          <summary>
Now I am alone.
O, what a rogue and peasant slave am I!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-13T11:09:53Z</published>
          <updated>2003-12-13T11:09:53Z</updated>
        </entry>
      </item>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Requesting a Particular Item' anchor='subscriber-retrieve-requestone'>
      <p>The subscriber can request a particular item by specifying the Node ID and the appropriate ItemID.</p>
      <example caption='Subscriber requests a particular item'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='items3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </pubsub>
</iq>
]]></example>
      <p>The service would then return that specific item, if available.</p>
    </section3>
    <section3 topic='Error Cases' anchor='subscriber-retrieve-error'>
      <p>There are several reasons why the items retrieval request might fail:</p>
      <ol>
        <li>The requesting entity has multiple subscriptions to the node but does not specify a subscription ID.</li>
        <li>The requesting entity is subscribed but specifies an invalid subscription ID.</li>
        <li>The node does not return items to unsubscribed entities and the requesting entity is not subscribed.</li>
        <li>The service or node does not support persistent items and does not return the last published item.</li>
        <li>The service or node does not support item retrieval.</li>
        <li>The node has an access model of "presence" and the requesting entity is not subscribed to the owner's presence.</li>
        <li>The node has an access model of "roster" and the requesting entity is not in one of the authorized roster groups.</li>
        <li>The node has an access model of "whitelist" and the requesting entity is not on the whitelist.</li>
        <li>The service or node requires payment for item retrieval.</li>
        <li>The requesting entity is blocked from retrieving items from the node (e.g., because having an affiliation of outcast).</li>
        <li>The node does not exist.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Subscription ID Required' anchor='subscriber-retrieve-error-subid'>
        <p>If the requesting entity has multiple subscriptions to the node but does not specify a subscription ID, the service MUST return a &badrequest; error to the subscriber, which SHOULD also include a pubsub-specific error condition of &lt;subid-required/&gt;.</p>
        <example caption='Entity did not specify SubID'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <subid-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Invalid Subscription ID' anchor='subscriber-retrieve-error-badsubid'>
        <p>If the requesting entity is subscribed but specifies an invalid subscription ID, the service MUST return a &notacceptable; error to the subscriber, which SHOULD also include a pubsub-specific error condition of &lt;invalid-subid/&gt;.</p>
        <example caption='Entity specified invalid SubID'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <invalid-subid xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Entity Not Subscribed' anchor='subscriber-retrieve-error-notsubscribed'>
        <p>If the node does not return items to unsubscribed entities and the requesting entity is not subscribed (which includes having a pending subscription), the service MUST return a &notauthorized; error to the subscriber, which SHOULD also include a pubsub-specific error condition of &lt;not-subscribed/&gt;.</p>
        <example caption='Entity is not subscribed'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='auth'>
    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <not-subscribed xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Persistent Items Not Supported' anchor='subscriber-retrieve-error-persistent'>
        <p>If the service or node does not support persistent items and does not return the last published item, the service MUST return a &feature; error to the subscriber, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "persistent-items".</p>
        <example caption='Persistent items not supported'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='persistent-items'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Item Retrieval Not Supported' anchor='subscriber-retrieve-error-notsupported'>
        <p>If the service or node does not support item retrieval (e.g., because the node is a collection node as described in <cite>XEP-0248</cite>), the service MUST return a &feature; error to the subscriber, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "retrieve-items".</p>
        <example caption='Item retrieval not supported'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='retrieve-items'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Presence Subscription Required' anchor='subscriber-retrieve-error-presence'>
        <p>For nodes with an access model of "presence", if the requesting entity is not subscribed to the owner's presence then the pubsub service MUST respond with a &notauthorized; error, which SHOULD also include a pubsub-specific error condition of &lt;presence-subscription-required/&gt;.</p>
        <example caption='Entity is not authorized to retrieve items (presence subscription required)'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='auth'>
    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <presence-subscription-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Not in Roster Group' anchor='subscriber-retrieve-error-rostergroup'>
        <p>For nodes with an access model of "roster", if the requesting entity is not in one of the authorized roster groups then the pubsub service MUST respond with a &notauthorized; error, which SHOULD also include a pubsub-specific error condition of &lt;not-in-roster-group/&gt;.</p>
        <example caption='Entity is not authorized to retrieve items (not in roster group)'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='auth'>
    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <not-in-roster-group xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Not on Whitelist' anchor='subscriber-retrieve-error-whitelist'>
        <p>For nodes with a node access model of "whitelist", if the requesting entity is not on the whitelist then the service MUST return a &notallowed; error, specifying a pubsub-specific error condition of &lt;closed-node/&gt;.</p>
        <example caption='Node has whitelist access model'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='cancel'>
    <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <closed-node xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Payment Required' anchor='subscriber-retrieve-error-payment'>
        <p>Commercial deployments may wish to link subscribers to a database of paying customers. If the subscriber needs to provide payment in order to retrieve items from the node (e.g., if the subscriber is not in the customer database or the customer's account is not paid up), the service SHOULD return a &payment; error to the subscriber.</p>
        <example caption='Payment is required to retrieve items'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='auth'>
    <payment-required xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Blocked' anchor='subscriber-retrieve-error-blocked'>
        <p>If the requesting entity is blocked from retrieving items (e.g., because having an affiliation of outcast), the service MUST return a &forbidden; error to the subscriber.</p>
        <example caption='Requesting entity is blocked'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='subscriber-retrieve-error-node'>
        <p>If the node does not exist, the service SHOULD return an &notfound; error to the subscriber.</p>
        <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='No Such Item(s)' anchor='subscriber-retrieve-error-items'>
        <p>If there are no items at the node or the requested items do not exist, the service SHOULD return an IQ stanza of type "result" with an empty &lt;items/&gt; element.</p>
        <example caption='No such item(s)'><![CDATA[
<iq from='pubsub.shakespeare.lit'
    id='items1'
    to='francisco@denmark.lit/barracks'
    type='result'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
      </section4>
    </section3>
  </section2>
</section1>

<section1 topic='Publisher Use Cases' anchor='publisher'>
  <section2 topic='Publish an Item to a Node' anchor='publisher-publish'>
    <section3 topic='Request' anchor='publisher-publish-request'>
      <p>Any entity that is allowed to publish items to a node (i.e., a publisher or an owner) may do so at any time by sending an IQ-set to the service containing a pubsub element with a &lt;publish/&gt; child.</p>
      <p>The syntax is as follows:</p>
      <ul>
        <li>The &lt;publish/&gt; element MUST possess a 'node' attribute, specifying the NodeID of the node.</li>
        <li>Depending on the node configuration, the &lt;publish/&gt; element MAY contain no &ITEM; elements or one &ITEM; element. <note>The inclusion of more than one &ITEM; element is no longer allowed, given the removal of batch publishing from version 1.13 of this specification.</note> <note>It is not necessary for a publication request to include a payload or even an &ITEM; element in order to trigger an event notification. For example, the result of publishing to a transient, notification-only node will be an event notification that does not include even an &ITEM; element. However, for the sake of convenience we refer to the act of publication as "publishing an item" (rather than, say, "triggering an event notification") even though a publication request will not always contain an &ITEM; element.</note></li>
        <li>The &lt;item/&gt; element provided by the publisher MAY possess an 'id' attribute, specifying a unique ItemID for the item. If an ItemID is not provided in the publish request, the pubsub service MUST generate one and MUST ensure that it is unique for that node.</li>
      </ul>
      <p>An example follows.</p>
      <example caption='Publisher publishes an item with an ItemID'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/blogbot'
    to='pubsub.shakespeare.lit'
    id='publish1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='princely_musings'>
      <item id='bnd81g37d61f49fgn581'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </publish>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='publisher-publish-success'>
      <p>If the pubsub service can successfully process the request, it MUST inform the publisher of success. If the publish request did not include an ItemID, the IQ-result SHOULD include an empty &ITEM; element that specifies the ItemID of the published item.</p>
      <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/blogbot'
    id='publish1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </publish>
  </pubsub>
</iq>
]]></example>
      <p>Note: If the publisher previously published an item with the same ItemID, successfully processing the request means that the service MUST overwrite the old item with the new item and then proceed as follows.</p>
      <p>The pubsub service MUST then send one event notification to each entity that meets the criteria for receiving an event notification (typically to each approved subscriber, although there are other contexts in which an entity may receive an event notification as summarized under <link url='#impl-notify'>Notification Triggers</link>). Each &MESSAGE; stanza generated by a pubsub service SHOULD possess an 'id' attribute with a unique value so that the service can properly track any notification-related errors that may occur (see the <link url='#impl-bounce'>Handling Notification-Related Errors</link> section of this document). Depending on the node configuration, the event notification either will or will not contain the payload, as shown below.</p>
      <p>Note: In order to facilitate authorization for item removal as described in the <link url='#publisher-delete'>Delete an Item from a Node</link> section of this document, implementations that support persistent items SHOULD store the item (if the node is so configured) and maintain a record of the publisher.</p>
      <p>Note: If the service or node is configured so that there is a maximum number of items cached at the node and the maximum is reached when an item is published, the service MUST delete one of the existing items. It is RECOMMENDED for the service to follow the "first in, first out" rule and delete the oldest item. Depending on node configuration, deletion of an existing item MAY result in sending of a delete notification to the subscribers.</p>
      <section4 topic='Notification With Payload' anchor='publisher-publish-success-withpayload'>
        <p>If the node is configured to include payloads, the subscribers will receive payloads with the event notifications.</p>
        <example caption='Subscribers receive event notifications with payloads'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bernardo@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='horatio@denmark.lit' id='baz'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bard@shakespeare.lit' id='fez'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </items>
  </event>
</message>
]]></example>
      </section4>
      <section4 topic='Notification Without Payload' anchor='publisher-publish-success-withoutpayload'>
        <p>If the node is configured to not include payloads, the subscribers will receive event notifications only. (If payloads are not included, subscribers may request the published item via the protocol defined in the <link url='#subscriber-retrieve'>Retrieve Items from a Node</link> section of this document.)</p>
      <example caption='Subscribers receive event notifications only'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bernardo@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='horatio@denmark.lit' id='baz'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bard@shakespeare.lit' id='fez'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
</message>
]]></example>
      </section4>
      <section4 topic='Item Publisher' anchor='publisher-publish-success-publisher'>
        <p>If configured to do so, the service can include the publisher of the item when it generates event notifications.</p>
    <example caption='Service Notifies Subscribers'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'
            publisher='hamlet@denmark.lit'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>
]]></example>
        <p>If so, the service MUST also include the publisher with every other form of item retrieval.</p>
        <example caption='Service returns items'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'
            publisher='hamlet@denmark.lit'>
        [ ... ENTRY ... ]
      </item>
        [ ... MORE ITEMS ... ]
    </items>
  </pubsub>
</iq>
]]></example>
        <p>The value of the 'publisher' attribute MUST be generated by the service, not accepted by the service in the published item, since allowing the publisher to assert its JID would open the possibility of spoofing.</p>
        <p>The JID stamped by the service can be either (1) the full JID &LOCALFULL; of the publisher as taken the 'from' attribute of the IQ-set used to publish the item or (2) the bare JID &LOCALBARE; of the publisher as derived from a formal affiliation in the explicit list of whitelisted publishers.</p>
      </section4>
      <section4 topic='Inclusion of Subscription ID' anchor='publisher-publish-success-subid'>
        <p>If a single entity is subscribed to a node multiple times, the service SHOULD notate the event notification so that the entity can determine which subscription identifier(s) generated this event. If these notations are included, they MUST use the &xep0131; format and SHOULD be included after the event notification information (i.e., as the last child of the &MESSAGE; stanza).</p>
        <example caption='Subscriber receives notated event notification'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
  <headers xmlns='http://jabber.org/protocol/shim'>
    <header name='SubID'>123-abc</header>
    <header name='SubID'>004-yyy</header>
  </headers>
</message>
]]></example>
      </section4>
    </section3>
    <section3 topic='Error Cases' anchor='publisher-publish-error'>
      <p>There are several reasons why the publish request might fail:</p>
      <ol>
        <li>The requesting entity does not have sufficient privileges to publish.</li>
        <li>The node does not support item publication.</li>
        <li>The node does not exist.</li>
        <li>The payload size exceeds a service-defined limit.</li>
        <li>The item contains more than one payload element or the namespace of the root payload element does not match the configured namespace for the node.</li>
        <li>The request does not match the node configuration.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <p>Note: If a publisher publishes an item with an Item ID and the ItemID matches that of an existing item, the pubsub service MUST NOT fail the publication but instead MUST overwrite the existing item and generate a new event notification (i.e., re-publication is equivalent to modification).</p>
      <section4 topic='Insufficient Privileges' anchor='publisher-publish-error-forbidden'>
        <p>If the requesting entity does not have sufficient privileges to publish, the service MUST return a &forbidden; error.</p>
        <example caption='Entity does not have sufficient privileges to publish to node'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='publish1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Item Publication Not Supported' anchor='publisher-publish-error-notsupported'>
        <p>If the node does not support item publication (e.g., because it is a collection node as described in <cite>XEP-0248</cite>), the service MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "publish".</p>
        <example caption='Node does not support item publication'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='publish1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='publish'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='publisher-publish-error-node'>
        <p>If the requesting entity attempts to publish an item to a node that does not exist and the service does not support the "auto-create" feature (see <link url='#publisher-publish-autocreate'>Automatic Node Creation</link>), the service MUST return an &notfound; error.</p>
        <example caption='Entity attempts to publish to a non-existent node'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='publish1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Payload Too Big' anchor='publisher-publish-error-bigpayload'>
        <p>If the payload size exceeds a service-defined limit, the service MUST return a &notacceptable; error, which SHOULD also include a pubsub-specific error condition of &lt;payload-too-big/&gt;.</p>
        <example caption='Entity attempts to publish very large payload'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='publish1'>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <payload-too-big xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Bad Payload' anchor='publisher-publish-error-badpayload'>
        <p>If the &ITEM; element contains more than one payload element or the namespace of the root payload element does not match the configured namespace for the node, the service MUST bounce the request with a &badrequest; error, which SHOULD also include a pubsub-specific error condition of &lt;invalid-payload/&gt;.</p>
        <example caption='Entity attempts to publish item with multiple payload elements or namespace does not match'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='publish1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <invalid-payload xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Request Does Not Match Configuration' anchor='publisher-publish-error-badrequest'>
        <p>If the request does not conform to the configured <link url='#events'>event type</link> for the node, the service MAY bounce the request with a &badrequest; error, which SHOULD also include a pubsub-specific error condition. The following rules apply:</p>
        <ul>
          <li>If the event type is persistent (either event notification or payload) and the publisher does not specify an ItemID, the service MUST generate the ItemID and MUST NOT bounce the publication request.</li>
          <li>If the event type is persistent (either event notification or payload) and the publisher does not include an item, the service MUST bounce the publication request with a &badrequest; error and a pubsub-specific error condition of &lt;item-required/&gt;.</li>
          <li>If the event type is payload (either persistent or transient) and the publisher does not include a payload, the service SHOULD bounce the publication request with a &badrequest; error and a pubsub-specific error condition of &lt;payload-required/&gt;.</li>
          <li>If the event type is notification + transient and the publisher provides an item, the service MUST bounce the publication request with a &badrequest; error and a pubsub-specific error condition of &lt;item-forbidden/&gt;.</li>
        </ul>
        <p>Examples of these errors are shown below.</p>
        <example caption='Publisher attempts to publish to persistent node with no item'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='publish1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <item-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
        <example caption='Publisher attempts to publish to payload node with no payload'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='publish1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <payload-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
        <example caption='Publisher attempts to publish to transient notification node with item'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='publish1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <item-forbidden xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
    <section3 topic='Automatic Node Creation' anchor='publisher-publish-autocreate'>
      <p>A pubsub service MAY automatically create a node when it receives a publish request sent to a node that does not exist (instead of returning an &notfound; error). When doing so, the service SHOULD apply the default node configuration. If a service supports this functionality, it MUST advertise that fact by including a feature of "http://jabber.org/protocol/pubsub#auto-create" in its disco#info responses.</p>
    </section3>
    <section3 topic='Publishing Options' anchor='publisher-publish-options'>
      <p>A pubsub service MAY support the ability to specify options along with a publish request (if so, it MUST advertise support for the "http://jabber.org/protocol/pubsub#publish-options" feature). Here is an example:</p>
      <example caption='Publishing with options'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/blogbot'
    to='pubsub.shakespeare.lit'
    id='pub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Soliloquy</title>
          <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32397</id>
          <published>2003-12-13T18:30:02Z</published>
          <updated>2003-12-13T18:30:02Z</updated>
        </entry>
      </item>
    </publish>
    <publish-options>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#publish-options</value>
        </field>
        <field var='pubsub#access_model'>
          <value>presence</value>
        </field>
      </x>
    </publish-options>
  </pubsub>
</iq>
]]></example>
      <p>The &lt;publish-options/&gt; element SHOULD contain a data form (see <cite>XEP-0004</cite>), whose FORM_TYPE SHOULD be "http://jabber.org/protocol/pubsub#publish-options" (see <cite>XEP-0068</cite>).</p>
      <p>How the fields are to be handled is up to the the pubsub service, which in the language of XEP-0004 functions as a form-processing entity.</p>
      <p>For example, the service may treat the field as a precondition, in which case the service should proceed as follows:</p>
      <ol>
        <li>If the node exists and the precondition is not met, then the publish shall fail with a &conflict; error condition and a pubsub-specific condition of &lt;precondition-not-met/&gt;.</li>
        <li>If the node exists and the precondition is met, then the publish succeeds.</li>
        <li>If the node does not exist and the service supports the "auto-create" feature, then the service shall auto-create the node with default configuration in all respects except those specified in the preconditions, and the publish succeeds.</li>
        <li>If the node does not exist and the service does not support the "auto-create" feature, then the publish shall fail.</li>
      </ol>
    </section3>
  </section2>

  <section2 topic='Delete an Item from a Node' anchor='publisher-delete'>
    <p>A publisher might want to delete an item once it has been published to a node that supports persistent items. Support for this feature ("delete-items") is RECOMMENDED.</p>
    <section3 topic='Request' anchor='publisher-delete-request'>
      <p>To delete an item, the publisher sends a retract request as shown in the following examples. The &lt;retract/&gt; element MUST possess a 'node' attribute, MAY possess a 'notify' attribute, and MUST contain one &ITEM; element; the &ITEM; element MUST be empty and MUST possess an 'id' attribute.</p>
      <example caption='Entity deletes an item from a node'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='retract1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <retract node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </retract>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='publisher-delete-success'>
      <p>If no error occurs, the service MUST delete the item.</p>
      <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='retract1'/>
]]></example>
      <section4 topic='Delete And Notify' anchor='publisher-delete-success-notify'>
        <p>If no error occurs and the &lt;retract/&gt; element included a 'notify' attribute with a value of "true" or "1" &BOOLEANNOTE;, then the service MUST delete the item and MUST notify all subscribers as shown below. The syntax is identical to event notifications except that instead of an &ITEM; element, the &ITEMS; element includes a &lt;retract/&gt; element.</p>
        <example caption='Subscribers are notified of deletion'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <retract id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bernardo@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <retract id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
</message>
]]></example>
      </section4>
      <section4 topic='Inclusion of Subscription ID' anchor='publisher-delete-success-subid'>
        <p>If a single entity is subscribed to the node multiple times, the service SHOULD notate the item deletion so that the entity can determine which subscription identifier(s) generated this event. As above, if these notations are included, they MUST use the <cite>Stanza Headers and Internet Metadata (SHIM)</cite> protocol and SHOULD be included after the notification data (i.e., as the last child of the &MESSAGE; stanza).</p>
        <example caption='Subscriber receives notated event notification'><![CDATA[
<message from='pubsub.shakespeare.lit' to='bernardo@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <retract id='ae890ac52d0df67ed7cfdf51b644e901'/>
    </items>
  </event>
  <headers xmlns='http://jabber.org/protocol/shim'>
    <header name='SubID'>123-abc</header>
    <header name='SubID'>004-yyy</header>
  </headers>
</message>
]]></example>
      </section4>
    </section3>
    <section3 topic='Error Cases' anchor='publisher-delete-error'>
      <p>There are several reasons why the item retraction request might fail:</p>
      <ol>
        <li>The publisher does not have sufficient privileges to delete the requested item.</li>
        <li>The node or item does not exist.</li>
        <li>The request does not specify a node.</li>
        <li>The request does not include an &ITEM; element or the &ITEM; element does not specify an ItemID.</li>
        <li>The node does not support persistent items.</li>
        <li>The service does not support the deletion of items.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Insufficient Privileges' anchor='publisher-delete-error-forbidden'>
        <p>If the requesting entity does not have sufficient privileges to delete the item, the service MUST return a &forbidden; error.</p>
        <example caption='Requesting entity does not have sufficient privileges'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='retract1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='publisher-delete-error-node'>
        <p>If the node or item does not exist, the service MUST return an &notfound; error.</p>
    <example caption='Non-existent node or item'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='retract1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='NodeID Required' anchor='publisher-delete-error-nodeid'>
      <p>If the request does not specify a node, the service MUST return a &badrequest; error, which SHOULD also include a pubsub-specific error condition of &lt;nodeid-required/&gt;.</p>
      <example caption='Request does not specify a node'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='retract1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <nodeid-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Item or ItemID Required' anchor='publisher-delete-error-itemid'>
      <p>If the request does not include an &ITEM; element or the &ITEM; element does not specify an ItemID, the service MUST return a &badrequest; error, which SHOULD also include a pubsub-specific error condition of &lt;item-required/&gt;.</p>
      <example caption='Request does not specify an item'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='retract1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <item-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Persistent Items Not Supported' anchor='publisher-delete-error-persistent'>
      <p>If the node does not support persistent items (e.g., because it is a collection node or a transient node that does not deliver payloads), the service MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "persistent-items".</p>
      <example caption='Node does not support persistent items'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='retract1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='persistent-items'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Item Deletion Not Supported' anchor='publisher-delete-error-notsupported'>
        <p>If the service does not support item deletion, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "delete-items".</p>
        <example caption='Service does not support item deletion'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='retract1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='delete-items'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
  </section2>
</section1>

<section1 topic='Owner Use Cases' anchor='owner'>
  <section2 topic='Create a Node' anchor='owner-create'>
    <section3 topic='General Considerations' anchor='owner-create-general'>
      <p>An entity may want to create a new node. Support for this feature ("create-nodes") is RECOMMENDED. However, a service MAY disallow creation of nodes based on the identity of the requesting entity, or MAY disallow node creation altogether (e.g., reserving that privilege to a service-wide administrator).</p>
      <p>There are two ways to create a node:</p>
      <ol>
        <li>Create a node with default configuration for the specified node type.</li>
        <li>Create and configure a node simultaneously.</li>
      </ol>
      <example caption='Request to create a node'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='create1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <create node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
      <p>These methods, along with method-specific error conditions, are explained more fully in the following sections.</p>
      <p>In addition to method-specific error conditions, there are several general reasons why the node creation request might fail:</p>
      <ul>
        <li>The service does not support node creation.</li>
        <li>Only entities that are registered with the service are allowed to create nodes but the requesting entity is not registered.</li>
        <li>The requesting entity does not have sufficient privileges to create nodes.</li>
        <li>The requested NodeID already exists.</li>
        <li>The request did not include a NodeID and "instant nodes" are not supported.</li>
      </ul>
      <p>These general error cases are described more fully below.</p>
      <p>If the service does not support node creation, it MUST respond with a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "create-nodes".</p>
      <example caption='Service does not support node creation'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='create-nodes'/>
  </error>
</iq>
]]></example>
      <p>If only entities that are registered with the service may create nodes but the requesting entity has not yet registered, the service MUST respond with a &registration; error.</p>
      <example caption='Service requires registration'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create1'>
  <error type='auth'>
    <registration-required xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      <p>If the requesting entity does not have sufficient privileges to create nodes, the service MUST respond with a &forbidden; error.</p>
      <example caption='Requesting entity is prohibited from creating nodes'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      <p>If the requested NodeID already exists, the service MUST respond with a &conflict; error.</p>
      <example caption='NodeID already exists'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create1'>
  <error type='cancel'>
    <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      <p>If the node creator does not specify a NodeID but the service does not support instant nodes, the service MUST return a &notacceptable; error, specifying a pubsub-specific error condition of &lt;nodeid-required/&gt;.</p>
      <example caption='Service does not support instant nodes'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create2'>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <nodeid-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      <p>If the node creator does not specify a NodeID but the service supports instant nodes, the service SHOULD generate a NodeID that is unique within the context of the service on behalf of the node creator.</p>
      <example caption='Entity requests an instant node'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='create2'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <create/>
    </pubsub>
</iq>
]]></example>
      <p>If no error occurs, the pubsub service SHOULD create the node, generate a NodeID that is unique within the context of that service, and inform the user of success (including the NodeID in the response).</p>
      <example caption='Service replies with success and generated NodeID'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create2'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <create node='25e3d37dabbab9541f7523321421edc5bfeb2dae'/>
    </pubsub>
</iq>
]]></example>
      <p>Note: When a service successfully creates a node on behalf of the requesting entity, it MUST return an IQ result (in accordance with XMPP Core). If the node creation request did not specify a NodeID and the service supports creation of instant nodes, the service MUST specify the created NodeID in the IQ result. Similarly, if the node creation request specified a NodeID but the service modified the NodeID before creating the node, the service MUST also specify the modified node in the IQ result. In all other cases, the service MAY specify the NodeID in the IQ result but the node creator MUST NOT depend on receiving it from the service (since the node creator can determine which node was created by tracking the 'id' attribute that it specified for the IQ-set).</p>
    </section3>
    <section3 topic='Create a Node With Default Configuration' anchor='owner-create-default'>
      <p>As explained above, each node type has its own default configuration. By asking the service to create a node with default configuration, the node creator accepts the default configuration. If the service allows node configuration, the owner may reconfigure the node after creating the node (as described in the <link url='#owner-configure'>Configure a Node</link> section of this document). In addition, a service MAY allow entities to determine the default configuration options for a given node type before creating a node (as described in the <link url='#owner-default'>Request Default Node Configurations</link> section of this document).</p>
      <p>In order to create a node with default configuration, the node creator can simply include an empty &lt;create/&gt; child element.</p>
      <p>In the following example, the node creator requests a leaf node (the default type) with an open access model (assumed to be the default type for this service).</p>
      <example caption='Entity requests leaf node with (default) open access model'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='create1'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <create node='princely_musings'/>
    </pubsub>
</iq>
]]></example>
      <p>Note: The default setting for the 'pubsub#node_type' configuration field is "leaf".</p>
      <p>In order to request an access model other than the default for the service, the node creator MUST include a Data Form in the node creation request that specifies a non-default value for the 'pubsub#access_model' field.</p>
      <example caption='Entity requests leaf node with non-default access model'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='create2'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
      <create node='princely_musings'/>
      <configure>
        <x xmlns='jabber:x:data' type='submit'>
          <field var='FORM_TYPE' type='hidden'>
            <value>http://jabber.org/protocol/pubsub#node_config</value>
          </field>
          <field var='pubsub#access_model'><value>whitelist</value></field>
        </x>
      </configure>
    </pubsub>
</iq>
]]></example>
      <p>If the access model is supported and none of the general or method-specific errors has occurred, the service SHOULD create the node and inform the requesting entity of success.</p>
      <example caption='Service informs requesting entity of success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create1'/>
]]></example>
      <p>If service does not support the specified access model, it MUST return a &notacceptable; error, specifying a pubsub-specific error condition of &lt;unsupported-access-model/&gt;.</p>
      <example caption='Service does not support specified access model'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create2'>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported-access-model xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      <p>(For error handling if the service does not support the specified node type, refer to <cite>XEP-0248</cite>.)</p>
    </section3>
    <section3 topic='Create and Configure a Node' anchor='owner-create-and-configure'>
      <p>If an implementation allows node configuration (see the <link url='#owner-configure'>Configure a Node</link> section of this document), it SHOULD allow node creation requests to contain the desired node configuration in the node creation request.</p>
      <p>Note: The &lt;configure/&gt; element MUST follow the &lt;create/&gt; element and MUST NOT possess a 'node' attribute, since the value of the &lt;create/&gt; element's 'node' attribute specifies the desired NodeID; if any of these rules are violated, the service MUST return a &badrequest; error.</p>
      <example caption='Entity requests a new node with non-default configuration.'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='create1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <create node='princely_musings'/>
    <configure>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#title'><value>Princely Musings (Atom)</value></field>
        <field var='pubsub#deliver_notifications'><value>1</value></field>
        <field var='pubsub#deliver_payloads'><value>1</value></field>
        <field var='pubsub#persist_items'><value>1</value></field>
        <field var='pubsub#max_items'><value>10</value></field>
        <field var='pubsub#item_expire'><value>604800</value></field>
        <field var='pubsub#access_model'><value>open</value></field>
        <field var='pubsub#publish_model'><value>publishers</value></field>
        <field var='pubsub#purge_offline'><value>0</value></field>
        <field var='pubsub#send_last_published_item'><value>never</value></field>
        <field var='pubsub#presence_based_delivery'><value>false</value></field>
        <field var='pubsub#notification_type'><value>headline</value></field>
        <field var='pubsub#notify_config'><value>0</value></field>
        <field var='pubsub#notify_delete'><value>0</value></field>
        <field var='pubsub#notify_retract'><value>0</value></field>
        <field var='pubsub#notify_sub'><value>0</value></field>
        <field var='pubsub#max_payload_size'><value>1028</value></field>
        <field var='pubsub#type'><value>http://www.w3.org/2005/Atom</value></field>
        <field var='pubsub#body_xslt'>
          <value>http://jabxslt.jabberstudio.org/atom_body.xslt</value>
        </field>
      </x>
    </configure>
  </pubsub>
</iq>
]]></example>
      <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='create1'/>
]]></example>
      <p>If a service supports this "create-and-configure" feature, it MUST advertise that fact by returning a feature of "http://jabber.org/protocol/pubsub#create-and-configure" in response to service discovery information requests. If the create-and-configure option is not supported but the requesting entity sends such a request anyway, the service SHOULD ignore the configuration part of the request and proceed as if it had not been included.</p>
    </section3>
  </section2>
  <section2 topic='Configure a Node' anchor='owner-configure'>
    <p>After creating a new node, the node owner may want to modify the node configuration. Support for this feature is RECOMMENDED.</p>
    <section3 topic='Request' anchor='owner-configure-request'>
      <example caption='Owner requests configuration form'><![CDATA[
<iq type='get'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='config1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <configure node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='owner-configure-success'>
      <p>If no error occurs, the server MUST return a configuration form to the node owner, which SHOULD contain the current node configuration as the default values.</p>
      <p>Note: The following example shows some of the possible configuration options that MAY be provided. If an implementation implements these features using the <strong>Data Forms</strong> protocol, that implementation MUST use the fields that are registered with the XMPP Registrar in association with the 'http://jabber.org/protocol/pubsub' namespace (a preliminary representation of those field variables is shown below and in the <link url='#registrar-formtypes-config'>pubsub#node_config FORM_TYPE</link> section of this document, but MUST NOT be construed as canonical, since the XMPP Registrar may standardize additional fields at a later date without changes to this document). An implementation MAY choose to specify different labels, values, and even field types, but MUST conform to the defined variable naming scheme.</p>
    <example caption='Service responds with configuration form'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='config1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <configure node='princely_musings'>
      <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#title' type='text-single'
               label='A friendly name for the node'/>
        <field var='pubsub#deliver_notifications' type='boolean'
               label='Whether to deliver event notifications'>
          <value>true</value>
        </field>
        <field var='pubsub#deliver_payloads' type='boolean'
               label='Whether to deliver payloads with event notifications'>
          <value>true</value>
        </field>
        <field var='pubsub#notify_config' type='boolean'
               label='Notify subscribers when the node configuration changes'>
          <value>0</value>
        </field>
        <field var='pubsub#notify_delete' type='boolean'
               label='Notify subscribers when the node is deleted'>
          <value>false</value>
        </field>
        <field var='pubsub#notify_retract' type='boolean'
               label='Notify subscribers when items are removed from the node'>
          <value>false</value>
        </field>
        <field var='pubsub#notify_sub' type='boolean'
               label='Notify owners about new subscribers and unsubscribes'>
          <value>0</value>
        </field>
        <field var='pubsub#persist_items' type='boolean'
               label='Persist items to storage'>
          <value>1</value>
        </field>
        <field var='pubsub#max_items' type='text-single'
               label='Max # of items to persist'>
          <value>10</value>
        </field>
        <field var='pubsub#item_expire' type='text-single'
               label='Time after which to automatically purge items'>
          <value>604800</value>
        </field>
        <field var='pubsub#subscribe' type='boolean'
               label='Whether to allow subscriptions'>
          <value>1</value>
        </field>
        <field var='pubsub#access_model' type='list-single'
               label='Specify the subscriber model'>
          <option><value>authorize</value></option>
          <option><value>open</value></option>
          <option><value>presence</value></option>
          <option><value>roster</value></option>
          <option><value>whitelist</value></option>
          <value>open</value>
        </field>
        <field var='pubsub#roster_groups_allowed' type='list-multi'
               label='Roster groups allowed to subscribe'>
          <option><value>friends</value></option>
          <option><value>courtiers</value></option>
          <option><value>servants</value></option>
          <option><value>enemies</value></option>
        </field>
        <field var='pubsub#publish_model' type='list-single'
               label='Specify the publisher model'>
          <option><value>publishers</value></option>
          <option><value>subscribers</value></option>
          <option><value>open</value></option>
          <value>publishers</value>
        </field>
        <field var='pubsub#purge_offline' type='boolean'
               label='Purge all items when the relevant publisher goes offline?'>
          <value>0</value>
        </field>
        <field var='pubsub#max_payload_size' type='text-single'
               label='Max Payload size in bytes'>
          <value>1028</value>
        </field>
        <field var='pubsub#send_last_published_item' type='list-single'
               label='When to send the last published item'>
          <option label='Never'><value>never</value></option>
          <option label='When a new subscription is processed'><value>on_sub</value></option>
          <option label='When a new subscription is processed and whenever a subscriber comes online'>
            <value>on_sub_and_presence</value>
          </option>
          <value>never</value>
        </field>
        <field var='pubsub#presence_based_delivery' type='boolean'
               label='Deliver event notifications only to available users'>
          <value>0</value>
        </field>
        <field var='pubsub#notification_type' type='list-single'
               label='Specify the delivery style for event notifications'>
          <option><value>normal</value></option>
          <option><value>headline</value></option>
          <value>headline</value>
        </field>
        <field var='pubsub#type' type='text-single'
               label='Specify the type of payload data to be provided at this node'>
          <value>http://www.w3.org/2005/Atom</value>
        </field>
        <field var='pubsub#dataform_xslt' type='text-single'
               label='Payload XSLT'/>
      </x>
    </configure>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='owner-configure-error'>
      <p>There are several reasons why the node configuration request might fail:</p>
      <ol>
        <li>The service does not support node configuration.</li>
        <li>The requesting entity does not have sufficient privileges to configure the node.</li>
        <li>The request did not specify a node.</li>
        <li>The node has no configuration options.</li>
        <li>The specified node does not exist.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Node Configuration Not Supported' anchor='owner-configure-error-notsupported'>
        <p>If the service does not support node configuration, the service MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "config-node".</p>
        <example caption='Service does not support node configuration'><![CDATA[
<iq type='error'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='config1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='config-node'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Insufficient Privileges' anchor='owner-configure-error-forbidden'>
        <p>If the requesting entity does not have sufficient privileges to configure the node, the service MUST respond with a &forbidden; error.</p>
        <example caption='Requesting entity is prohibited from configuring this node'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='config1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='NodeID Required' anchor='owner-configure-error-nodeid'>
        <p>If the request did not specify a node, the service SHOULD return a &badrequest; error. It is possible that by not including a NodeID, the requesting entity is asking to configure the root node; however, if the requesting entity is not a service-level admin, it makes sense to return &badrequest; instead of &forbidden;.</p>
        <example caption='Request did not specify a node'><![CDATA[
<iq type='error'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='config1'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <nodeid-required xmlns='http://jabber.org/protocol/pubsub#errors'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='No Configuration Options' anchor='owner-configure-error-options'>
        <p>If no configuration options are available (e.g., because node configuration is "locked down"), the service MUST return a &notallowed; error to the owner.</p>
        <example caption='Node has no configuration options'><![CDATA[
<iq type='error'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='config1'>
  <error type='cancel'>
    <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='owner-configure-error-node'>
        <p>If the node does not exist, the service MUST return an &notfound; error.</p>
        <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='config1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
    <section3 topic='Form Submission' anchor='owner-configure-submit'>
      <p>After receiving the configuration form, the owner SHOULD submit a completed configuration form.</p>
      <example caption='Owner submits node configuration form'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='config2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <configure node='princely_musings'>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#title'><value>Princely Musings (Atom)</value></field>
        <field var='pubsub#deliver_notifications'><value>1</value></field>
        <field var='pubsub#deliver_payloads'><value>1</value></field>
        <field var='pubsub#persist_items'><value>1</value></field>
        <field var='pubsub#max_items'><value>10</value></field>
        <field var='pubsub#item_expire'><value>604800</value></field>
        <field var='pubsub#access_model'><value>roster</value></field>
        <field var='pubsub#roster_groups_allowed'>
          <value>friends</value>
          <value>servants</value>
          <value>courtiers</value>
        </field>
        <field var='pubsub#publish_model'><value>publishers</value></field>
        <field var='pubsub#purge_offline'><value>0</value></field>
        <field var='pubsub#send_last_published_item'><value>never</value></field>
        <field var='pubsub#presence_based_delivery'><value>false</value></field>
        <field var='pubsub#notification_type'><value>headline</value></field>
        <field var='pubsub#notify_config'><value>0</value></field>
        <field var='pubsub#notify_delete'><value>0</value></field>
        <field var='pubsub#notify_retract'><value>0</value></field>
        <field var='pubsub#notify_sub'><value>0</value></field>
        <field var='pubsub#max_payload_size'><value>1028</value></field>
        <field var='pubsub#type'><value>http://www.w3.org/2005/Atom</value></field>
        <field var='pubsub#body_xslt'>
          <value>http://jabxslt.jabberstudio.org/atom_body.xslt</value>
        </field>
      </x>
    </configure>
  </pubsub>
</iq>
]]></example>
      <p>Alternatively, the owner MAY cancel the configuration process, in which case the existing configuration MUST be applied.</p>
      <example caption='Owner cancels configuration process'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='config2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <configure node='princely_musings'>
      <x xmlns='jabber:x:data' type='cancel'/>
    </configure>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Form Processing' anchor='owner-configure-process'>
      <section4 topic='Success' anchor='owner-configure-process-success'>
        <p>If the form can be successfully processed, the service MUST return an IQ-result.</p>
        <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='config2'/>
]]></example>
        <p>Note: If the node type was changed from leaf to collection and there are items associated with the node, the service MUST purge the node of all items (with or without notifying the subscribers).</p>
      </section4>
      <section4 topic='Failure' anchor='owner-configure-process-failure'>
        <p>If the requested node configuration change cannot be processed (e.g., because the node owner has attempted to change the configuration so that there are no node owners), the service MUST return a &notacceptable; error to the owner.</p>
        <example caption='Configuration change cannot be processed'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='config2'>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Success With Notifications' anchor='owner-configure-process-notify'>
        <p>If the "pubsub#notify_config" option is set to true, the service MUST notify subscribers of the configuration change. (A service SHOULD support this option for leaf nodes and MUST support it for collection nodes as described in <cite>XEP-0248</cite>.) If the node configuration is set to notification-only, the notification MUST consist of an empty &lt;configuration/&gt; element whose 'node' attribute is set to the NodeID of the node; if the node configuration is set to full payloads, the &lt;configuration/&gt; element MUST in addition contain the node configuration as represented via the <strong>Data Forms</strong> protocol.</p>
        <example caption='Service sends configuration change notification (event notification only)'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <configuration node='princely_musings'/>
  </event>
</message>
]]></example>
        <example caption='Service sends configuration change notification (full payload)'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <configuration node='princely_musings'>
      <x xmlns='jabber:x:data' type='result'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#title'><value>Princely Musings (Atom)</value></field>
        <field var='pubsub#deliver_notifications'><value>1</value></field>
        <field var='pubsub#deliver_payloads'><value>1</value></field>
        <field var='pubsub#notify_config'><value>0</value></field>
        <field var='pubsub#notify_delete'><value>0</value></field>
        <field var='pubsub#notify_retract'><value>0</value></field>
        <field var='pubsub#notify_sub'><value>0</value></field>
        <field var='pubsub#persist_items'><value>1</value></field>
        <field var='pubsub#max_items'><value>10</value></field>
        <field var='pubsub#item_expire'><value>604800</value></field>
        <field var='pubsub#subscribe'><value>1</value></field>
        <field var='pubsub#access_model'><value>open</value></field>
        <field var='pubsub#publish_model'><value>publishers</value></field>
        <field var='pubsub#purge_offline'><value>0</value></field>
        <field var='pubsub#max_payload_size'><value>9216</value></field>
        <field var='pubsub#send_last_published_item'><value>never</value></field>
        <field var='pubsub#presence_based_delivery'><value>0</value></field>
        <field var='pubsub#notification_type'><value>headline</value></field>
        <field var='pubsub#type'><value>http://www.w3.org/2005/Atom</value></field>
        <field var='pubsub#body_xslt'>
          <value>http://jabxslt.jabberstudio.org/atom_body.xslt</value>
        </field>
      </x>
    </configuration>
  </event>
</message>
]]></example>
      </section4>
    </section3>
  </section2>
  <section2 topic='Request Default Node Configuration Options' anchor='owner-default'>
    <p>An entity may want to request information about the default node configuration, e.g. in order to determine whether to perform create-and-configure as previously described. Support for this feature is OPTIONAL.</p>
    <section3 topic='Request' anchor='owner-default-request'>
      <p>To get the node options, the entity MUST send an empty &lt;default/&gt; element to the service with no NodeID; in response, the service SHOULD return the default node options.</p>
      <example caption='Entity requests default node configuration options'><![CDATA[
<iq type='get'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='def1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <default/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='owner-default-success'>
      <p>If no error occurs, the service MUST return the default node configuration options.</p>
      <example caption='Service responds with default node configuration options'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='def1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <default>
      <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
           <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#title' type='text-single'
               label='A friendly name for the node'/>
        <field var='pubsub#deliver_notifications' type='boolean'
               label='Deliver event notifications'>
          <value>true</value>
        </field>
        <field var='pubsub#deliver_payloads' type='boolean'
             label='Deliver payloads with event notifications'>
          <value>1</value>
        </field>
        <field var='pubsub#description' type='text-single'
             label='A description of the node'/>
        <field var='pubsub#notify_config' type='boolean'
               label='Notify subscribers when the node configuration changes'>
          <value>0</value>
        </field>
        <field var='pubsub#notify_delete' type='boolean'
               label='Notify subscribers when the node is deleted'>
          <value>0</value>
        </field>
        <field var='pubsub#notify_retract' type='boolean'
               label='Notify subscribers when items are removed from the node'>
          <value>0</value>
        </field>
        <field var='pubsub#notify_sub' type='boolean'
               label='Notify owners about new subscribers and unsubscribes'>
          <value>0</value>
        </field>
        <field var='pubsub#persist_items' type='boolean'
               label='Persist items to storage'>
          <value>1</value>
        </field>
        <field var='pubsub#max_items' type='text-single'
               label='Max # of items to persist'>
          <value>10</value>
        </field>
        <field var='pubsub#item_expire' type='text-single'
               label='Time after which to automatically purge items'>
          <value>604800</value>
        </field>
        <field var='pubsub#subscribe' type='boolean'
               label='Whether to allow subscriptions'>
          <value>1</value>
        </field>
        <field var='pubsub#access_model' type='list-single'
               label='Specify the subscriber model'>
          <option><value>authorize</value></option>
          <option><value>open</value></option>
          <option><value>presence</value></option>
          <option><value>roster</value></option>
          <option><value>whitelist</value></option>
          <value>open</value>
        </field>
        <field var='pubsub#roster_groups_allowed' type='list-multi'
               label='Roster groups allowed to subscribe'>
          <option><value>friends</value></option>
          <option><value>courtiers</value></option>
          <option><value>servants</value></option>
          <option><value>enemies</value></option>
        </field>
        <field var='pubsub#publish_model' type='list-single'
               label='Specify the publisher model'>
          <option><value>publishers</value></option>
          <option><value>subscribers</value></option>
          <option><value>open</value></option>
          <value>publishers</value>
        </field>
        <field var='pubsub#purge_offline' type='boolean'
               label='Purge all items when the relevant publisher goes offline?'>
          <value>0</value>
        </field>
        <field var='pubsub#max_payload_size' type='text-single'
               label='Max payload size in bytes'>
          <value>9216</value>
        </field>
        <field var='pubsub#send_last_published_item' type='list-single'
               label='When to send the last published item'>
          <option label='Never'><value>never</value></option>
          <option label='When a new subscription is processed'><value>on_sub</value></option>
          <option label='When a new subscription is processed and whenever a subscriber comes online'>
            <value>on_sub_and_presence</value>
          </option>
          <value>never</value>
        </field>
        <field var='pubsub#presence_based_delivery' type='boolean'
               label='Deliver notifications only to available users'>
          <value>0</value>
        </field>
        <field var='pubsub#notification_type' type='list-single'
               label='Specify the delivery style for notifications'>
          <option><value>normal</value></option>
          <option><value>headline</value></option>
          <value>headline</value>
        </field>
      </x>
    </default>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='owner-default-error'>
      <p>There are several reasons why the default node configuration options request might fail:</p>
      <ol>
        <li>The service does not support node configuration.</li>
        <li>The service does not support retrieval of default node configuration.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Node Configuration Not Supported' anchor='owner-default-error-noconfig'>
        <p>If the service does not support node configuration, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "config-node".</p>
        <example caption='Service does not support node configuration'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='def1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='config-node'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Default Node Configuration Retrieval Not Supported' anchor='owner-default-error-notsupported'>
        <p>If the service does not support retrieval of default node configuration options, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "retrieve-default".</p>
        <example caption='Service does not support retrieval of default node configuration options'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='def1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='retrieve-default'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
  </section2>
  <section2 topic='Delete a Node' anchor='owner-delete'>
    <p>If a service supports node creation, it MUST support node deletion. If an implementation persists items, it MUST remove all items from persistent storage before the node itself is deleted.</p>
    <section3 topic='Request' anchor='owner-delete-request'>
      <p>In order to delete a node, a node owner MUST send a node deletion request, consisting of a &lt;delete/&gt; element whose 'node' attribute specifies the NodeID of the node to be deleted.</p>
      <example caption='Owner deletes a node'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='delete1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <delete node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
      <p>The deletion request MAY include the URI of a replacement node to which requests might be redirected. Typically this is an XMPP URI or IRI as described under <link url='#impl-uri'>PubSub URIs</link>, but it can be an HTTP URI or any other scheme.</p>
      <example caption='Owner deletes a node with redirection'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='delete1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <delete node='princely_musings'>
      <redirect uri='xmpp:hamlet@denmark.lit?;node=blog'/>
    </delete>
  </pubsub>
</iq>
]]></example>
      <p>Support for redirection is OPTIONAL on the part of pubsub services.</p>
    </section3>
    <section3 topic='Success Case' anchor='owner-delete-success'>
      <p>If no error occurs, the service MUST inform the owner of success.</p>
      <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    id='delete1'/>
]]></example>
      <p>In addition, the service MUST also send notification of node deletion to all subscribers (which SHOULD include pending and unconfigured subscriptions).</p>
      <example caption='Subscribers are notified of node deletion'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <delete node='princely_musings'>
      <redirect uri='xmpp:hamlet@denmark.lit?;node=blog'/>
    </delete>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bernardo@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <delete node='princely_musings'>
      <redirect uri='xmpp:hamlet@denmark.lit?;node=blog'/>
    </delete>
  </event>
</message>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='owner-delete-error'>
      <p>There are several reasons why the node deletion request might fail:</p>
      <ol>
        <li>The requesting entity does not have sufficient privileges to delete the node.</li>
        <li>The node is the root collection node, which cannot be deleted (see <cite>XEP-0248</cite>).</li>
        <li>The specified node does not exist.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Insufficient Privileges' anchor='owner-delete-error-forbidden'>
        <p>If the requesting entity does not have sufficient privileges to delete the node (e.g., is not an owner), the service MUST return a &forbidden; error.</p>
        <example caption='Entity is not an owner'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='delete1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='owner-delete-error-node'>
        <p>If the requesting entity attempts to delete a node that does not exist, the service MUST return an &notfound; error.</p>
        <example caption='Owner attempts to delete a non-existent node'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='delete1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
  </section2>
  <section2 topic='Purge All Node Items' anchor='owner-purge'>
    <p>If a service persists published items, a node owner may want to purge the node of all published items (thus removing all items from the persistent store, with the exception of the last published item, which MAY be cached). It is OPTIONAL for a service to implement this feature.</p>
    <section3 topic='Request' anchor='owner-purge-request'>
      <p>In order to purge a node of all items, a node owner sends a node purge request consisting of a &lt;purge/&gt; element whose 'node' attribute specifies the NodeID of the node to be purged.</p>
      <example caption='Owner purges all items from a node'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='purge1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <purge node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='owner-purge-success'>
      <p>If no error occurs, the service MUST purge the node and inform the owner of success.</p>
      <example caption='Service replies with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    id='purge1'/>
]]></example>
      <p>If the node or service has been configured to notify subscribers on deletion of items, a purge request MUST NOT result in sending the same notifications as are sent when deleting items (since purging a node with many persisted items could result in a large number of notifications); instead, the node MUST send a single notification to each subscriber, containing an empty &lt;purge/&gt; child element.</p>
      <example caption='Subscribers are notified of node purge'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <purge node='princely_musings'/>
  </event>
</message>

<message from='pubsub.shakespeare.lit' to='bernardo@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <purge node='princely_musings'/>
  </event>
</message>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='owner-purge-error'>
      <p>There are several reasons why the node purge request might fail:</p>
      <ol>
        <li>The node or service does not support node purging.</li>
        <li>The requesting entity does not have sufficient privileges to purge the node.</li>
        <li>The node is not configured to persist items.</li>
        <li>The specified node does not exist.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Node Purging Not Supported' anchor='owner-purge-error-notsupported'>
        <p>If the node or service does not support node purging, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "purge-nodes".</p>
        <example caption='Service does not support node purging'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='purge1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='purge-nodes'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Insufficient Privileges' anchor='owner-purge-error-forbidden'>
        <p>If the requesting entity does not have sufficient privileges to purge the node (e.g., because it is not a node owner), the service MUST return a &forbidden; error.</p>
        <example caption='Entity is not an owner'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='purge1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Persist Items' anchor='owner-purge-error-nopersist'>
        <p>If the service or node does not persist items (e.g., because the node is a collection node as described in <cite>XEP-0248</cite>), it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "persistent-items".</p>
        <example caption='Node is not configured for persistent items'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='purge1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='persistent-items'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='owner-purge-error-node'>
        <p>If the node does not exist, the service MUST return an &notfound; error.</p>
        <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='purge1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
  </section2>

  <section2 topic='Manage Subscription Requests' anchor='owner-subreq'>
    <p>A service MAY send subscription approval requests to the node owner(s) at any time. An approval request consists of a message stanza containing a Data Form scoped by the "http://jabber.org/protocol/pubsub#subscribe_authorization" FORM_TYPE. The form MUST contain a boolean field that has a 'var' attribute of "pubsub#allow", which is the field that designates whether or not to allow the subscription request. The form SHOULD include fields that specify the node identifier and the JID of the pending subscriber. The message MAY include a &BODY; element that contains natural-language text explaining that the message contains a pending subscription form.</p>
    <example caption='Service sends authorization request to node owner'><![CDATA[
<message to='hamlet@denmark.lit' from='pubsub.shakespeare.lit' id='approve1'>
  <x xmlns='jabber:x:data' type='form'>
    <title>PubSub subscriber request</title>
    <instructions>
      To approve this entity&apos;s subscription request,
      click the OK button. To deny the request, click the
      cancel button.
    </instructions>
    <field var='FORM_TYPE' type='hidden'>
      <value>http://jabber.org/protocol/pubsub#subscribe_authorization</value>
    </field>
    <field var='pubsub#subid' type='hidden'><value>123-abc</value></field>
    <field var='pubsub#node' type='text-single' label='Node ID'>
      <value>princely_musings</value>
    </field>
    <field var='pusub#subscriber_jid' type='jid-single' label='Subscriber Address'>
      <value>horatio@denmark.lit</value>
    </field>
    <field var='pubsub#allow' type='boolean'
           label='Allow this JID to subscribe to this pubsub node?'>
      <value>false</value>
    </field>
  </x>
</message>
]]></example>
    <p>In order to approve the request, the owner shall submit the form and set the "pubsub#allow" field to a value of "1" or "true"; for tracking purposes the message MUST reflect the 'id' attribute originally provided.</p>
    <example caption='Owner approves subscription request'><![CDATA[
<message from='hamlet@denmark.lit/elsinore' to='pubsub.shakespeare.lit' id='approve1'>
  <x xmlns='jabber:x:data' type='submit'>
    <field var='FORM_TYPE' type='hidden'>
      <value>http://jabber.org/protocol/pubsub#subscribe_authorization</value>
    </field>
    <field var='pubsub#subid'>
      <value>123-abc</value>
    </field>
    <field var='pubsub#node'>
      <value>princely_musings</value>
    </field>
    <field var='pubsub#subscriber_jid'>
      <value>horatio@denmark.lit</value>
    </field>
    <field var='pubsub#allow'>
       <value>true</value>
    </field>
  </x>
</message>
]]></example>
    <p>The service then SHOULD notify the approved subscriber (see the <link url='#impl-subchange'>Notification of Subscription State Changes</link> section of this document).</p>
    <example caption='Subscription approval notification'><![CDATA[
<message
    from='pubsub.shakespeare.lit'
    to='horatio@denmark.lit'
    id='approvalnotify1'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <subscription node='princely_musings' jid='horatio@denmark.lit' subscription='subscribed'/>
  </event>
</message>
]]></example>
    <p>In order to deny the request, the owner shall submit the form and set the "pubsub#allow" field to a value of "0" or "false"; as above, the message MUST reflect the 'id' attribute originally provided.</p>
    <example caption='Owner denies subscription request'><![CDATA[
<message from='hamlet@denmark.lit/elsinore' to='pubsub.shakespeare.lit' id='approve1'>
  <x xmlns='jabber:x:data' type='submit'>
    <field var='FORM_TYPE' type='hidden'>
       <value>http://jabber.org/protocol/pubsub#subscribe_authorization</value>
    </field>
    <field var='pubsub#subid'>
      <value>123-abc</value>
    </field>
    <field var='pubsub#node'>
      <value>princely_musings</value>
    </field>
    <field var='pubsub#subscriber_jid'>
       <value>horatio@denmark.lit</value>
    </field>
    <field var='pubsub#allow'>
        <value>false</value>
    </field>
  </x>
</message>
]]></example>
    <p>The service then SHOULD notify the denied subscriber (see the <link url='#impl-subchange'>Notification of Subscription State Changes</link> section of this document).</p>
    <example caption='Subscription cancellation / denial notification'><![CDATA[
<message
    from='pubsub.shakespeare.lit'
    to='horatio@denmark.lit'
    id='unsubnotify1'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <subscription node='princely_musings' jid='horatio@denmark.lit' subscription='none'/>
  </event>
</message>
]]></example>
    <p>In order to cancel the form submission, the owner shall reply with the form's 'type' attribute set to "cancel".</p>
    <example caption='Owner cancels form submission'><![CDATA[
<message from='hamlet@denmark.lit/elsinore' to='pubsub.shakespeare.lit' id='approve1'>
  <x xmlns='jabber:x:data' type='cancel'>
    <field var='FORM_TYPE' type='hidden'>
      <value>http://jabber.org/protocol/pubsub#subscribe_authorization</value>
    </field>
  </x>
</message>
]]></example>
    <p>The service MUST check the "pubsub#allow" field to see if the subscription should be allowed or denied. If the owner cancels the Data Form, then the subscription request MUST remain in the pending state.</p>
  </section2>
  <section2 topic='Process Pending Subscription Requests' anchor='owner-subreq-process'>
    <p>A node owner may want to request all of the pending subscription requests for all of their nodes at a service. It is OPTIONAL for a service to implement this feature.</p>
    <p>This feature MUST be implemented using the &xep0050; protocol, where the command name ('node' attribute of the command element) MUST have a value of "http://jabber.org/protocol/pubsub#get-pending".</p>
    <section3 topic='Request' anchor='owner-subreq-request'>
      <example caption='Owner requests pending subscription requests'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='pending1'>
  <command xmlns='http://jabber.org/protocol/commands'
           node='http://jabber.org/protocol/pubsub#get-pending'
           action='execute'/>
</iq>
]]></example>
    </section3>
    <section3 topic='Success Case' anchor='owner-subreq-success'>
      <p>If no error occurs, the service SHOULD return a data form for managing subscription requests, which MUST contain a single field with a 'var' attribute value of "pubsub#node" whose &lt;option/&gt; elements specify the nodes for which the requesting entity has subscription approval privileges (as an optimization, the service MAY specify only the nodes that have subscription requests pending).</p>
      <example caption='Service responds with data form to be populated'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='pending1'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='pubsub-get-pending:20031021T150901Z-600'
           node='http://jabber.org/protocol/pubsub#get-pending'
           status='executing'
           action='execute'>
    <x xmlns='jabber:x:data' type='form'>
      <field var='FORM_TYPE' type='hidden'>
        <value>http://jabber.org/protocol/pubsub#subscribe_authorization</value>
      </field>
      <field type='list-single' var='pubsub#node'>
        <option><value>princely_musings</value></option>
        <option><value>news_from_elsinore</value></option>
      </field>
    </x>
  </command>
</iq>
]]></example>
    </section3>
    <section3 topic='Error Cases' anchor='owner-subreq-error'>
      <p>There are several reasons why the pending subscription approval request might fail:</p>
      <ol>
        <li>The service does not support the ad-hoc commands protocol.</li>
        <li>The service supports ad-hoc commands but does not support the "get-pending" feature.</li>
        <li>The requesting entity does not have sufficient privileges to approve subscription requests.</li>
        <li>The specified node does not exist.</li>
      </ol>
      <p>These error cases are described more fully in the following sections.</p>
      <section4 topic='Ad-Hoc Commands Not Supported' anchor='owner-subreq-error-adhoc'>
        <p>If the service does not support the ad-hoc commands protocol, it MUST respond with a &unavailable; error.</p>
        <example caption='Service responds with node not found'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='pending1'>
  <error type='cancel'>
    <service-unavailable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Get-Pending Not Supported' anchor='owner-subreq-error-getpending'>
        <p>If the service does not support the "get-pending" feature, it MUST respond with a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "get-pending".</p>
        <example caption='Service responds with node not found'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='pending1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='get-pending'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Insufficient Privileges' anchor='owner-subreq-error-forbidden'>
        <p>If the requesting entity does not have sufficient privileges to approve subscription requests, the service MUST respond with a &forbidden; error.</p>
        <example caption='Entity does not have sufficient privileges to approve subscription requests'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='pending1'>
  <error type='cancel'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
      <section4 topic='Node Does Not Exist' anchor='owner-subreq-error-node'>
        <p>If the requested node does not exist, the service MUST respond with an &notfound; error.</p>
        <example caption='Service responds with node not found'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='pending1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
      </section4>
    </section3>
    <section3 topic='Per-Node Request' anchor='owner-subreq-pernode'>
      <p>Upon receiving the data form for managing subscription requests, the owner then MAY request pending subscription approval requests for a given node.</p>
      <example caption='Owner requests all pending subscription requests for a node'><![CDATA[
<iq type='set' to='pubsub.shakespeare.lit' id='pending2'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='pubsub-get-pending:20031021T150901Z-600'
           node='http://jabber.org/protocol/pubsub#get-pending'
           action='execute'>
    <x xmlns='jabber:x:data' type='submit'>
      <field var='pubsub#node'>
        <value>princely_musings</value>
      </field>
    </x>
  </command>
</iq>
]]></example>
      <p>If no error occurs, the service shall respond with success.</p>
      <example caption='Service responds with success'><![CDATA[
<iq from='pubsub.shakespeare.lit'
    id='pending2'
    to='hamlet@denmark.lit/elsinore'
    type='result'>
  <command xmlns='http://jabber.org/protocol/commands'
           sessionid='pubsub-get-pending:20031021T150901Z-600'
           node='http://jabber.org/protocol/pubsub#get-pending'
           action='completed'/>
</iq>
]]></example>
      <p>The service shall then send one subscription approval message for each pending subscription request, as shown above for a single pending subscription request.</p>
      <p>Note: A service SHOULD conform to its affiliation policies in maintaining the list of pending subscriptions. In particular, if the affiliation of an entity with a pending subscription is modified to owner or publisher, the service SHOULD automatically approve the subscription request and remove the entity's previous request from the pending list. Similarly, if the affiliation of an entity with a pending subscription is modified to outcast, the service SHOULD automatically reject the subscription request and remove the entity's previous request from the pending list. (If an entity's subscription request is denied, the service SHOULD send a &MESSAGE; to the entity, where the message conforms to the format described in the <link url='#impl-subchange'>Notification of Subscription State Changes</link> section of this document.)</p>
    </section3>
  </section2>

  <section2 topic='Manage Subscriptions' anchor='owner-subscriptions'>
    <p>A node owner may want to edit the list of subscriptions associated with a given node. Support for this feature ("pubsub#manage-subscriptions") is OPTIONAL.</p>
    <section3 topic='Retrieve Subscriptions List' anchor='owner-subscriptions-retrieve'>
      <p>First the owner retrieves the subscriptions list.</p>
      <section4 topic='Request' anchor='owner-subscriptions-retrieve-request'>
        <p>In order to request a list of all subscriptions, a node owner MUST send a subscriptions request, consisting of a &lt;subscriptions/&gt; element whose 'node' attribute specifies the NodeID of the relevant node.</p>
        <example caption='Owner requests all subscriptions'><![CDATA[
<iq type='get'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='subman1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <subscriptions node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
      </section4>
      <section4 topic='Success Case' anchor='owner-subscriptions-retrieve-success'>
        <p>If no error occurs, the service MUST return the list of subscriptions for entities whose subscription state is "subscribed" or "unconfigured" (it MUST NOT return entities whose subscription state is "none" and SHOULD NOT return entities whose subscription state is "pending"). The result MAY specify multiple &lt;subscription/&gt; elements for the same entity (JID), but each element MUST possess a distinct value of the 'subid' attribute (as shown below).</p>
        <example caption='Service returns list of subscriptions'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='subman1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <subscriptions node='princely_musings'>
      <subscription jid='hamlet@denmark.lit' subscription='subscribed'/>
      <subscription jid='polonius@denmark.lit' subscription='unconfigured'/>
      <subscription jid='bernardo@denmark.lit' subscription='subscribed' subid='123-abc'/>
      <subscription jid='bernardo@denmark.lit' subscription='subscribed' subid='004-yyy'/>
    </subscriptions>
  </pubsub>
</iq>
]]></example>
      </section4>
      <section4 topic='Error Cases' anchor='owner-subscriptions-retrieve-error'>
        <p>There are several reasons why the manage subscriptions request might fail:</p>
        <ol>
          <li>The service does not support subscription management.</li>
          <li>The requesting entity does not have sufficient privileges to manage subscriptions.</li>
          <li>The specified node does not exist.</li>
        </ol>
        <p>These error cases are described more fully in the following sections.</p>
        <section5 topic='Subscription Management Not Supported' anchor='owner-subscriptions-retrieve-error-notsupported'>
          <p>If an implementation does not support subscription management, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "manage-subscriptions".</p>
          <example caption='Node or service does not support subscription management'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='subman1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='manage-subscriptions'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Insufficient Privileges' anchor='owner-subscriptions-retrieve-error-forbidden'>
          <p>If the requesting entity is not a node owner, the service MUST return a &forbidden; error.</p>
          <example caption='Entity is not an owner'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='subman1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Node Does Not Exist' anchor='owner-subscriptions-retrieve-error-node'>
          <p>If the node does not exist, the service MUST return an &notfound; error.</p>
          <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='subman1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
      </section4>
    </section3>
    <section3 topic='Modify Subscriptions' anchor='owner-subscriptions-modify'>
      <section4 topic='Request' anchor='owner-subscriptions-modify-request'>
        <p>Upon receiving the subscriptions list, the node owner MAY modify subscription states. The owner MUST send only modified subscription states (i.e., a "delta"), not the complete list. (Note: If the 'subscription' attribute is not specified in a modification request, then the value MUST NOT be changed.)</p>
        <example caption='Owner modifies subscriptions'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='subman2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <subscriptions node='princely_musings'>
      <subscription jid='bard@shakespeare.lit' subscription='subscribed'/>
    </subscriptions>
  </pubsub>
</iq>
]]></example>
      </section4>
      <section4 topic='Success Case' anchor='owner-subscriptions-modify-success'>
        <example caption='Service responds with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    id='subman2'/>
]]></example>
      </section4>
      <section4 topic='Error Cases' anchor='owner-subscriptions-modify-error'>
        <p>There are several reasons why the modify subscriptions request might fail:</p>
        <ol>
          <li>The service does not support subscription management.</li>
          <li>The requesting entity does not have sufficient privileges to manage subscriptions.</li>
          <li>The specified node does not exist.</li>
        </ol>
        <p>These error cases are described more fully in the following sections.</p>
        <section5 topic='Subscription Management Not Supported' anchor='owner-subscriptions-modify-error-notsupported'>
          <p>If an implementation does not support subscription management, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "manage-subscriptions".</p>
          <example caption='Node or service does not support subscription management'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='subman2'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='manage-subscriptions'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Insufficient Privileges' anchor='owner-subscriptions-retrieve-error-forbidden'>
          <p>If the requesting entity is not a node owner, the service MUST return a &forbidden; error.</p>
          <example caption='Entity is not an owner'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='subman1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Node Does Not Exist' anchor='owner-subscriptions-retrieve-error-node'>
          <p>If the node does not exist, the service MUST return an &notfound; error.</p>
          <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='subman2'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
      </section4>
      <section4 topic='Multiple Simultaneous Modifications' anchor='owner-subscriptions-multi'>
        <p>The owner MAY change multiple subscriptions in a single request. If one of the entity elements specified is invalid, the service MUST return an IQ error (which SHOULD be &notacceptable;) with the invalid entries, where the subscription returned is the original, un-altered subscription.</p>
        <example caption='Owner sets subscription for multiple entities'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='subman3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <subscriptions node='princely_musings'>
      <subscription jid='polonius@denmark.lit' subscription='none'/>
      <subscription jid='bard@shakespeare.lit' subscription='subscribed'/>
    </subscriptions>
  </pubsub>
</iq>
]]></example>
        <example caption='Service responds with an error'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='subman3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <subscriptions node='princely_musings'>
      <subscription jid='polonius@denmark.lit' subscription='subscribed'/>
    </subscriptions>
  </pubsub>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        <p>If errors occur during a modification request for multiple entities, the pubsub service MUST return any &lt;subscription/&gt; element(s) which caused the error. Returned entities which failed to be modified MUST include the existing 'subscription' attribute. Any entity elements which are not returned in an IQ error case MUST be treated as successful modifications. The owner MAY specify multiple &lt;subscription/&gt; elements for the same entity, but each element MUST possess a distinct value of the 'subid' attribute.</p>
      </section4>
    </section3>
    <section3 topic='Delete a Subscriber' anchor='owner-subscriptions-delete'>
      <p>In order to remove an entity from the subscriptions list, the owner MUST set the value of the 'subscription' attribute to "none" and the service MUST remove that entity from the subscriptions list and not return it in response to future list requests.</p>
    </section3>
    <section3 topic='Notifying Subscribers' anchor='owner-subscriptions-notifysub'>
      <p>An implementation SHOULD notify an entity whose subscription has changed (see the <link url='#impl-subchange'>Notification of Subscription State Changes</link> section of this document).</p>
      <example caption='Service sends notification of subscription change'><![CDATA[
<message from='pubsub.shakespeare.lit' to='polonius@denmark.lit'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <subscription node='princely_musings' jid='polonius@denmark.lit' subscription='none'/>
  </event>
</message>
]]></example>
    </section3>
  </section2>

  <section2 topic='Manage Affiliations' anchor='owner-affiliations'>
    <p>A node owner may want to manage the affiliations of entities associated with a given node and to set affiliations for new entities. Support for this feature ("pubsub#modify-affiliations") is OPTIONAL.</p>
    <section3 topic='Retrieve Affiliations List' anchor='owner-affiliations-retrieve'>
      <p>First the owner retrieves the affiliation list.</p>
      <section4 topic='Request' anchor='owner-affiliations-retrieve-request'>
        <p>In order to request a list of all affiliated entities, a node owner MUST send an affiliations request, consisting of an &lt;affiliations/&gt; element whose 'node' attribute specifies the NodeID of the relevant node.</p>
        <example caption='Owner requests all affiliated entities'><![CDATA[
<iq type='get'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='ent1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <affiliations node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
      </section4>
      <section4 topic='Success Case' anchor='owner-affiliations-retrieve-success'>
        <p>If no error occurs, the service MUST return the list of entities whose affiliation is "owner", "member", "publisher", "publish-only", or "outcast" (it MUST NOT return entities whose affiliation is "none").</p>
        <example caption='Service returns list of affiliated entities'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='ent1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <affiliations node='princely_musings'>
      <affiliation jid='hamlet@denmark.lit' affiliation='owner'/>
      <affiliation jid='polonius@denmark.lit' affiliation='outcast'/>
    </affiliations>
  </pubsub>
</iq>
]]></example>
      </section4>
      <section4 topic='Error Cases' anchor='owner-affiliations-retrieve-error'>
        <p>There are several reasons why the affiliated entities request might fail:</p>
        <ol>
          <li>The service does not support modification of affiliations.</li>
          <li>The requesting entity does not have sufficient privileges to modify affiliations.</li>
          <li>The specified node does not exist.</li>
        </ol>
        <p>These error cases are described more fully in the following sections.</p>
        <section5 topic='Affiliation Modification Not Supported' anchor='owner-affiliations-retrieve-notsupported'>
          <p>If an implementation does not support modification of affiliations, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "modify-affiliations".</p>
          <example caption='Node or service does not support affiliation management'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='ent1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='modify-affiliations'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Insufficient Privileges' anchor='owner-affiliations-retrieve-forbidden'>
          <p>If the requesting entity is not a node owner, the service MUST return a &forbidden; error.</p>
          <example caption='Entity is not an owner'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='ent1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Node Does Not Exist' anchor='owner-affiliations-retrieve-node'>
          <p>If the node does not exist, the service MUST return an &notfound; error.</p>
          <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='ent1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
      </section4>
    </section3>
    <section3 topic='Modify Affiliation' anchor='owner-affiliations-modify'>
      <p>A node owner may want to edit the affiliation of an entity associated with a given node or to set the affiliation for a new entity.</p>
      <section4 topic='Request' anchor='owner-affiliations-modify-request'>
        <p>In order to modify an affiliation, a node owner MUST send an IQ set containing the modified affiliation or affiliations. The owner MUST send only modified affiliations (i.e., a "delta"), not the complete list. (Note: If the 'affiliation' attribute is not specified in a modification request, then the value MUST NOT be changed.)</p>
        <example caption='Owner modifies affiliation'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='ent2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <affiliations node='princely_musings'>
      <affiliation jid='bard@shakespeare.lit' affiliation='publisher'/>
    </affiliations>
  </pubsub>
</iq>
]]></example>
      </section4>
      <section4 topic='Success Case' anchor='owner-affiliations-modify-success'>
        <example caption='Service responds with success'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    id='ent2'/>
]]></example>
      </section4>
      <section4 topic='Error Cases' anchor='owner-affiliations-modify-error'>
        <p>There are several reasons why the modify-affiliations request might fail:</p>
        <ol>
          <li>The requested affiliation is not supported by the node or service.</li>
          <li>The service does not support modification of affiliations.</li>
          <li>The requesting entity does not have sufficient privileges to modify affiliations.</li>
          <li>The specified node does not exist.</li>
        </ol>
        <p>These error cases are described more fully in the following sections.</p>
        <section5 topic='Affiliation Modification Not Supported' anchor='owner-affiliations-retrieve-notsupported'>
          <p>If an implementation does not support modification of affiliations, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "modify-affiliations".</p>
          <example caption='Node or service does not support affiliation management'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='ent1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='modify-affiliations'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Affiliation Not Supported' anchor='owner-affiliations-nosuchaffil'>
          <p>If the node or service does not support the requested affiliation, it MUST return a &feature; error, specifying a pubsub-specific error condition of &lt;unsupported/&gt; and a feature of "member-affiliation", "outcast-affiliation", "publisher-affiliation", or "publish-only-affiliation" as appropriate.</p>
          <example caption='Node or service does not support the requested affiliation'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='ent1'>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <unsupported xmlns='http://jabber.org/protocol/pubsub#errors'
                 feature='member-affiliation'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Insufficient Privileges' anchor='owner-affiliations-retrieve-forbidden'>
          <p>If the requesting entity is not a node owner, the service MUST return a &forbidden; error.</p>
          <example caption='Entity is not an owner'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='ent1'>
  <error type='auth'>
    <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
        <section5 topic='Node Does Not Exist' anchor='owner-affiliations-retrieve-node'>
          <p>If the node does not exist, the service MUST return an &notfound; error.</p>
          <example caption='Node does not exist'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    id='ent1'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        </section5>
      </section4>
      <section4 topic='Multiple Simultaneous Modifications' anchor='owner-affiliations-multi'>
        <p>The owner MAY change multiple affiliations in a single request. If one of the entity elements specified is invalid, the service MUST return an IQ error (which SHOULD be &notacceptable;) with the invalid entries, where the affiliation returned is the original, un-altered affiliation.</p>
        <p>The following example shows an entity attempting to make the owner something other than an affiliation of "owner", an action which MUST NOT be allowed if there is only one owner.</p>
        <example caption='Owner sets affiliation for multiple entities'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='ent3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <affiliations node='princely_musings'>
      <affiliation jid='hamlet@denmark.lit' affiliation='none'/>
      <affiliation jid='polonius@denmark.lit' affiliation='none'/>
      <affiliation jid='bard@shakespeare.lit' affiliation='publisher'/>
    </affiliations>
  </pubsub>
</iq>
]]></example>
        <example caption='Service responds with an error'><![CDATA[
<iq type='error'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/elsinore'
    id='ent3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub#owner'>
    <affiliations node='princely_musings'>
      <affiliation jid='hamlet@denmark.lit' affiliation='owner'/>
    </affiliations>
  </pubsub>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
]]></example>
        <p>The state chart at the beginning of this document is a MUST-IMPLEMENT set of rules for checking possible state transitions. Implementations MAY enforce other (more strict) rules. If errors occur during a modification request for multiple entities, the pubsub service MUST return any &lt;affiliation/&gt; element(s) which caused the error. Returned entities which failed to be modified MUST include the existing 'affiliation' attribute. Any entity elements which are not returned in an IQ error case MUST be treated as successful modifications. The owner MUST NOT specify multiple &lt;affiliation/&gt; elements for the same entity; otherwise the service MUST return a &badrequest; error.</p>
      </section4>
    </section3>
    <section3 topic='Delete an Entity' anchor='owner-affiliations-delete'>
      <p>In order to remove an entity from the affiliations list, the owner MUST set the value of the 'affiliation' attribute to "none" and the service MUST remove that entity from the affiliations list and not return it in response to future list requests.</p>
    </section3>
    <section3 topic='Notifying Entities' anchor='owner-affiliations-notify'>
      <p>An implementation MAY send an event notification to an entity whose affiliation has changed, which MAY contain a &BODY; element specifying natural-language text regarding the affiliation change and which SHOULD contain the modified affiliation data.</p>
      <example caption='Service sends notification of affiliation change'><![CDATA[
<message from='pubsub.shakespeare.lit' to='polonius@denmark.lit'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <affiliations node='princely_musings'>
      <affilation jid='polonius@denmark.lit' affiliation='none'/>
    </affiliations>
  </pubsub>
</message>
]]></example>
    </section3>
  </section2>
</section1>

<section1 topic='IM Account Integration' anchor='presence'>
  <p>Publish-subscribe functionality can be integrated into existing instant messaging and presence services (see <cite>RFC 3921</cite>), such that each registered account functions as a virtual pubsub service (sometimes called "pubsub-on-a-JID"). In such deployments, the root pubsub node for each virtual pubsub service has the same address as the bare JID &BAREJID; of the account, which is typically associated with an IM user (e.g., &lt;hamlet@denmark.lit&gt;). Since an IM user typically has a roster of "buddies" and shares presence information with those buddies, the virtual pubsub service can use roster and presence information to provide some helpful shortcuts for subscribers, in particular the auto-subscribe and filtered-notifications features described in this section.</p>
  <p class='box'>Note: PEP ties the receipt of PEP notifications to the subscriber's presence, but does not tie the generation of PEP notifications to the publisher's presence. If the publisher wishes to stop generating PEP events (or to generate an "empty" event as can be done for some PEP payloads) before ending its presence session, the publisher MUST direct its client to do so and MUST NOT depend on the PEP service to automatically "zero out" its PEP information when the PEP service receives unavailable presence from the publisher.</p>
  <p>If an instant messaging and presence account is also a virtual pubsub service, service discovery information ("disco#info") responses from the bare JID of the account MUST include a feature of "http:/jabber.org/protocol/pubsub#pubsub-on-a-jid":</p>
  <example caption='IM server returns supported features on behalf of IM account'><![CDATA[
<iq from='hamlet@denmark.lit'
    id='bvg194j7'
    to='francisco@denmark.lit/barracks'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='account' type='registered'/>
    <feature var='http://jabber.org/protocol/pubsub#pubsub-on-a-jid'/>
  </query>
</iq>
]]></example>
  <p>Note: Because the account owner's bare JID is the default destination address for any stanzas a client generates, clients often omit the "to" attribute on such stanzas; on this point, see <cite>RFC 6120</cite> and (with regard to rosters) <cite>RFC 6121</cite>.</p>
  <section2 topic='Auto-Subscribe' anchor='auto-subscribe'>
    <p>When a contact is affiliated with the account owner through sharing of XMPP presence, the "auto-subscribe" feature greatly simplifies the subscription process. In particular, support for the "auto-subscribe" has the following implications:</p>
    <section3 topic='Account Owner' anchor='auto-subscribe-owner'>
      <p>Because the account owner itself is implicitly subscribed to its own XMPP presence (e.g., each XMPP resource receives presence information from all of the account owner's resources), a service MUST consider the account owner to have a pubsub subscription to the account owner's root collection node with a subscription_type of "items" and a subscription_depth of "all". This is true for all access models.</p>
    </section3>
    <section3 topic='Presence Subscriber' anchor='auto-subscribe-contact'>
      <p>If an entity (i.e., an IM contact) has an XMPP presence subscription to the account owner's bare JID &BAREJID;, a service MUST consider the contact to have a pubsub subscription to the account owner's root collection node with a subscription_type of "items" and a subscription_depth of "all" if:</p>
      <ol>
        <li>The node has an access model of "open".</li>
        <li>The node has an access model of "presence".</li>
        <li>The node has an access model of "roster" and the contact is in the specified roster group.</li>
      </ol>
      <p>If the contact does not have permission to receive information from any of the account owner's particular nodes below the level of the root collection node (e.g., because a particular node has an access model of "roster" but the contact is not in the specified roster group), the service MUST NOT send notifications regarding that node to the contact and also MUST NOT return any errors to the contact regarding a potential implicit subscription to that node (e.g., the service MUST NOT return a pubsub subscription error to the contact when the contact sends presence to the account owner).</p>
      <p>Note: When an IM contact has a subscription to the account owner's presence, the automated pubsub subscription MUST be based on the JID contained in the 'from' address of the presence subscription request, which for an IM contact will be a bare JID &BAREJID;.</p>
    </section3>
    <section3 topic='Presence Sharer' anchor='auto-subscribe-directed'>
      <p>If the node has an open access model, the pubsub service SHOULD also consider an entity to be temporarily and implicitly subscribed to the node if the entity has sent presence to the account owner in the absence of a presence subscription. In this case, the subscription SHOULD be based on the 'from' address of the presence stanza, which will be a full JID &FULLJID;. When the service receives unavailable presence from the full JID, it MUST cancel the temporary subscription.</p>
    </section3>
  </section2>
  <section2 topic='Filtered Notifications' anchor='filtered-notifications'>
    <p>A contact might not want to receive notifications for all the nodes hosted at a user's virtual pubsub service. A contact SHOULD signal its preferences to the account owner's server by including <cite>XEP-0115</cite> information that specifies the NodeIDs for which the contact wishes to receive notifications (if any). This information is used by a pubsub service that supports the "filtered-notifications" feature to send notifications only from those NodeIDs that match the subscriber's preferences.</p>
    <p>In order to make this possible, all possible NodeIDs can be appended with the string "+notify" to indicate that the contact wishes to receive notifications for the specified NodeID. Thus if Romeo wants to receive notifications for location data (&xep0080;) and tune data (&xep0118;) but not activity data (&xep0108;), his client would advertise support for the following strings in the disco#info results it sends: <note>Including, say, the 'http://jabber.org/protocol/geoloc' NodeID indicates that the client understands the geolocation namespace described in <cite>XEP-0080</cite>, whereas including the 'http://jabber.org/protocol/geoloc+notify' namespace indicates that the client wishes to receive notifications related to geolocation, where the NodeID is the same as the geolocation namespace 'http://jabber.org/protocol/geoloc' (in this case there is a one-to-one correspondence between the namespace name and the NodeID).</note></p>
    <ul>
      <li>http://jabber.org/protocol/geoloc+notify</li>
      <li>http://jabber.org/protocol/tune+notify</li>
    </ul>
    <p>This set of strings would then be advertised by including them in the identity+features hash encapsulated via the 'ver' attribute as described in <cite>XEP-0115</cite>.</p>
    <example caption='Contact sends presence with caps'><![CDATA[
<presence from='romeo@montague.lit/orchard'>
  <c xmlns='http://jabber.org/protocol/caps'
     node='http://www.chatopus.com/#2.2'
     ver='AFBT0mPr29zQE5aGtCJp97CIS6E='/>
</presence>
]]></example>
    <p>It is the responsibility of the account owner's server to cache <cite>XEP-0115</cite> information. When the server receives presence from a contact, it MUST check that presence information for entity capabilities data and correlate that data with the desired NodeIDs for the contact's client. The server MUST NOT send notifications related to any NodeIDs that the contact's client has not asked for via the relevant "NodeID+notify" disco#info feature. This enables a client to turn off all notifications (e.g., because of bandwidth restrictions) and to easily receive all desired data formats simply by adding support for the appropriate "NodeID+notify" combination in its disco#info results and client capabililies. However, it also implies that a client can request notifications only on a global basis and cannot request, say, mood information only from certain contacts in the user's roster. Community consensus is that this is an acceptable tradeoff. Also, note that this works only if the account owner has a presence subscription to the contact and the contact has a presence subscription to the account owner.</p>
    <p>Some examples may help to illustrate the concept of notification filtering. Here we show presence generated by two of the contacts listed above (benvolio@montague.lit does not have any presence subscriptions to or from juliet@capulet.lit and therefore is not involved in these protocol flows).</p>
    <example caption='Presence with caps'><![CDATA[
<presence from='nurse@capulet.lit/chamber'>
  <c xmlns='http://jabber.org/protocol/caps'
     node='http://exodus.jabberstudio.org/#0.9.1'
     ver='wXj6c5xhT9frdqhvTSjkdejUUP8='/>
</presence>

<presence from='romeo@montague.lit/orchard'>
  <c xmlns='http://jabber.org/protocol/caps'
     node='http://www.chatopus.com/#2.2'
     ver='1FDrLLbYMpzvcI95jgSHABSWDRY='/>
</presence>
]]></example>
    <p>We assume that Juliet's server doesn't know anything about these capabilities, so it sends service discovery information requests to each of the clients on Juliet's behalf (realistically, the capulet.lit server will quickly build up a cache of client capabilities, with the result that it will not need to send these service discovery requests):</p>
    <example caption='Account server queries contact'><![CDATA[
<iq from='juliet@capulet.lit'
    to='nurse@capulet.lit/chamber'
    type='get'
    id='disco123'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>

<iq from='nurse@capulet.lit/chamber'
    to='juliet@capulet.lit'
    type='result'
    id='disco123'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='client' type='pc'/>
    <feature var='http://jabber.org/protocol/activity'/>
    <feature var='http://jabber.org/protocol/activity+notify'/>
    <feature var='http://jabber.org/protocol/geoloc'/>
    <feature var='http://jabber.org/protocol/geoloc+notify'/>
    <feature var='http://jabber.org/protocol/muc'/>
    <feature var='http://jabber.org/protocol/tune'/>
    <feature var='http://jabber.org/protocol/tune+notify'/>
  </query>
</iq>
]]></example>
    <p>The server shall also query the identity+features for &lt;romeo@montague.lit&gt;:</p>
    <example caption='Account server queries contact'><![CDATA[
<iq from='juliet@capulet.lit'
    to='romeo@montague.lit/orchard'
    type='get'
    id='disco234'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>

<iq from='romeo@montague.lit/orchard'
    to='juliet@capulet.lit'
    type='result'
    id='disco234'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='client' type='pda'/>
    <feature var='http://jabber.org/protocol/geoloc'/>
    <feature var='http://jabber.org/protocol/geoloc+notify'/>
    <feature var='http://jabber.org/protocol/tune'/>
    <feature var='http://jabber.org/protocol/tune+notify'/>
  </query>
</iq>
]]></example>
    <p>(As noted in <cite>XEP-0115</cite>, the server MUST check the hash provided in the 'ver' attribute against the generation method to ensure that no poisoning has occurred.)</p>
    <p>Now we revisit account owner publication and server generation of notifications, with filtering enabled because the server has caps information:</p>
    <ul>
      <li><p>If Juliet publishes a tune item to the presence-access "http://jabber.org/protocol/tune" node, her server will send notifications to &lt;nurse@capulet.lit/chamber&gt; and &lt;romeo@montague.lit/orchard&gt; (full JIDs).</p></li>
      <li><p>If Juliet publishes an activity item to the presence-access "http://jabber.org/protocol/activity" node, her server will send notifications only to &lt;nurse@capulet.lit/chamber&gt;.</p></li>
      <li><p>If Juliet publishes a geolocation item to the roster-access "http://jabber.org/protocol/geoloc" node with the "pubsub#roster_groups_allowed" variable set to a value of "Friends", her server will send notifications only to &lt;romeo@montague.lit/orchard&gt; because the nurse is not in that roster group.</p></li>
    </ul>
  </section2>
</section1>

<!-- REMOVED PENDING FURTHER DISCUSSION

<section1 topic='Data Versioning' anchor='versioning'>
  <p>A service MAY track the "version" of data published at a node, in the form of the version across all published items ("node-level versioning"), the version of each particular item ("item-level versioning"), or both. The version is tracked using the 'ver' attribute, which is included on the &lt;items/&gt; element for node-level versioning and on the &lt;item/&gt; element for item-level versioning.</p>
  <p class='def'><strong>Definition:</strong> The <strong>'ver' attribute</strong> is a string that identifies a given version of the collective items published at a node, or of a particular item. The value of a node-level version identifier MUST be generated only by the service, MUST NOT be accepted by the service from a publisher. The value of an item-level version identifier MAY be accepted by a service from a publisher, but if not included SHOULD be generated by the service. Version identifiers MUST be treated by subscribers as opaque, but MAY have meaning to publishers. Any appropriate method can be used for generating version identifiers, such as a hash of the published data or a strictly-increasing sequence number.</p>
  <p>Note: The value of the 'ver' attribute is conceptually equivalent to the 'ver' attribute from &xep0237;.</p>
  <p>If a service supports data versioning, it MUST advertise a feature of "http://jabber.org/protocol/pubsub#versioning".</p>
  <section2 topic='Versioning of All Items' anchor='versioning-items'>
    <p>The service can include the version of the collective items when it generates notifications.</p>
    <example caption='Notification with Version of All Items'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'
           ver='v103'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'
            publisher='hamlet@denmark.lit'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>If any items are subsequently published to or deleted from the node (thus overwriting the old version), the service would change the version.</p>
    <example caption='Subsequent Notification with Item Version'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'
           ver='v110'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'
            publisher='hamlet@denmark.lit'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>
]]></example>
  </section2>
  <section2 topic='Versioning of a Particular Item' anchor='versioning-item'>
    <p>The service can include the version of a particular item when it generates notifications.</p>
    <example caption='Notification with Item Version'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'
            publisher='hamlet@denmark.lit'
            ver='v50'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>If an item with the same ItemID is subsequently published to the node (thus overwriting the old version), the service would change the version.</p>
    <example caption='Subsequent Notification with Item Version'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'
            publisher='hamlet@denmark.lit'
            ver='v59'>
        [ ... ENTRY ... ]
      </item>
    </items>
  </event>
</message>
]]></example>
  </section2>
  <section2 topic='Versioning on Publish or Delete' anchor='versioning-publish'>
    <p>If the service supports data versioning, it MUST inform the publisher of the latest version when returning an IQ-result after a publishing request or item deletion is processed.</p>
    <example caption='Success with version'><![CDATA[
<iq type='result'
    from='pubsub.shakespeare.lit'
    to='hamlet@denmark.lit/blogbot'
    id='publish1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='princely_musings'
             ver='v110'>
      <item id='ae890ac52d0df67ed7cfdf51b644e901'
            ver='v59'/>
    </publish>
  </pubsub>
</iq>
]]></example>
  </section2>
  <section2 topic='Retrieving All Items Since a Given Version' anchor='versioning-retrieve'>
    <p>If the service supports data versioning, the subscriber can request all items published since a particular version of the published data by specifying both the Node ID and 'ver' attribute on the &lt;items/&gt; element.</p>
    <example caption='Subscriber Requests Items Since a Given Version'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='items3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'
           ver='v103'/>
  </pubsub>
</iq>
]]></example>
    <p>The service would then return all the items published since that version of the data published at the node, as well as notice of any item deletions (if configured to send notifications on delete). If no items have been published or deleted, the service would return an empty IQ-result.</p>
  </section2>
</section1>

-->

<section1 topic='Feature Summary' anchor='features'>
  <p>This section summarizes the features described herein, specifies the appropriate requirements level for each feature (REQUIRED, RECOMMENDED, or OPTIONAL), and provides cross-references to the section of this document in which each feature is described.</p>
  <p>Note: The feature names are all of the form "http://jabber.org/protocol/pubsub#name", where "name" is the text specified in the first column below.</p>
  <table caption='Service Discovery Features'>
    <tr>
      <th>Name</th>
      <th>Description</th>
      <th>Support</th>
      <th>Section</th>
    </tr>
    <tr>
      <td>access-authorize</td>
      <td>The default access model is "authorize".</td>
      <td>OPTIONAL</td>
      <td><link url='#accessmodels'>Nodes Access Models</link></td>
    </tr>
    <tr>
      <td>access-open</td>
      <td>The default access model is "open".</td>
      <td>OPTIONAL</td>
      <td><link url='#accessmodels'>Nodes Access Models</link></td>
    </tr>
    <tr>
      <td>access-presence</td>
      <td>The default access model is "presence".</td>
      <td>OPTIONAL</td>
      <td><link url='#accessmodels'>Nodes Access Models</link></td>
    </tr>
    <tr>
      <td>access-roster</td>
      <td>The default access model is "roster".</td>
      <td>OPTIONAL</td>
      <td><link url='#accessmodels'>Nodes Access Models</link></td>
    </tr>
    <tr>
      <td>access-whitelist</td>
      <td>The default access model is "whitelist".</td>
      <td>OPTIONAL</td>
      <td><link url='#accessmodels'>Nodes Access Models</link></td>
    </tr>
    <tr>
      <td>auto-create</td>
      <td>The service supports auto-creation of nodes on publish to a non-existent node.</td>
      <td>OPTIONAL</td>
      <td><link url='#publisher-publish-autocreate'>Automatic Node Creation</link></td>
    </tr>
    <tr>
      <td>auto-subscribe</td>
      <td>The service supports auto-subscription to a nodes based on presence subscription.</td>
      <td>RECOMMENDED</td>
      <td><link url='#auto-subscribe'>Auto-Subscribe</link></td>
    </tr>
    <tr>
      <td>collections</td>
      <td>Collection nodes are supported.</td>
      <td>OPTIONAL</td>
      <td>Refer to <cite>XEP-0248</cite></td>
    </tr>
    <tr>
      <td>config-node</td>
      <td>Configuration of node options is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#owner-configure'>Configure a Node</link></td>
    </tr>
    <tr>
      <td>create-and-configure</td>
      <td>Simultaneous creation and configuration of nodes is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#owner-create-and-configure'>Create and Configure a Node</link></td>
    </tr>
    <tr>
      <td>create-nodes</td>
      <td>Creation of nodes is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#owner-create'>Create a Node</link></td>
    </tr>
    <tr>
      <td>delete-items</td>
      <td>Deletion of items is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#publisher-delete'>Delete an Item from a Node</link></td>
    </tr>
    <tr>
      <td>delete-nodes</td>
      <td>Deletion of nodes is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#owner-delete'>Delete a Node</link></td>
    </tr>
    <tr>
      <td>filtered-notifications</td>
      <td>Notifications are filtered based on Entity Capabilities data.</td>
      <td>RECOMMENDED</td>
      <td><link url='#filtered-notifications'>Filtered Notifications</link></td>
    </tr>
    <tr>
      <td>get-pending</td>
      <td>Retrieval of pending subscription approvals is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#owner-subreq'>Manage Subscription Requests</link></td>
    </tr>
    <tr>
      <td>instant-nodes</td>
      <td>Creation of instant nodes is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#owner-create'>Create a Node</link></td>
    </tr>
    <tr>
      <td>item-ids</td>
      <td>Publishers may specify item identifiers.</td>
      <td>RECOMMENDED</td>
      <td>&#160;</td>
    </tr>
    <tr>
      <td>last-published</td>
      <td>By default the last published item is sent to new subscribers and on receipt of available presence from existing subscribers.</td>
      <td>RECOMMENDED</td>
      <td><link url='#events'>Event Types</link></td>
    </tr>
    <tr>
      <td>leased-subscription</td>
      <td>Time-based subscriptions are supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#impl-leases'>Time-Based Subscriptions (Leases)</link></td>
    </tr>
    <tr>
      <td>manage-subscriptions</td>
      <td>Node owners may manage subscriptions.</td>
      <td>OPTIONAL</td>
      <td><link url='#owner-subscriptions'>Manage Subscriptions</link></td>
    </tr>
    <tr>
      <td>member-affiliation</td>
      <td>The member affiliation is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#affiliations'>Affiliations</link></td>
    </tr>
    <tr>
      <td>meta-data</td>
      <td>Node meta-data is supported.</td>
      <td>RECOMMENDED</td>
      <td>&#160;</td>
    </tr>
    <tr>
      <td>modify-affiliations</td>
      <td>Node owners may modify affiliations.</td>
      <td>OPTIONAL</td>
      <td><link url='#owner-affiliations'>Manage Affiliations</link></td>
    </tr>
    <tr>
      <td>multi-collection</td>
      <td>A single leaf node can be associated with multiple collections.</td>
      <td>OPTIONAL</td>
      <td>Refer to <cite>XEP-0248</cite></td>
    </tr>
    <tr>
      <td>multi-subscribe</td>
      <td>A single entity may subscribe to a node multiple times.</td>
      <td>OPTIONAL</td>
      <td><link url='#subscriber-subscribe-multi'>Multiple Subscriptions</link></td>
    </tr>
    <tr>
      <td>outcast-affiliation</td>
      <td>The outcast affiliation is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#affiliations'>Affiliations</link></td>
    </tr>
    <tr>
      <td>persistent-items</td>
      <td>Persistent items are supported.</td>
      <td>RECOMMENDED</td>
      <td>&#160;</td>
    </tr>
    <tr>
      <td>presence-notifications</td>
      <td>Presence-based delivery of event notifications is supported.</td>
      <td>OPTIONAL</td>
      <td>&#160;</td>
    </tr>
    <tr>
      <td>presence-subscribe</td>
      <td>Authorized contacts are automatically subscribed to a user's virtual pubsub service.</td>
      <td>RECOMMENDED</td>
      <td><link url='#auto-subscribe'>Auto-Subscribe</link></td>
    </tr>
    <tr>
      <td>publish</td>
      <td>Publishing items is supported.</td>
      <td>REQUIRED</td>
      <td><link url='#publisher-publish'>Publish an Item to a Node</link></td>
    </tr>
    <tr>
      <td>publish-options</td>
      <td>Publishing an item with options is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#publisher-publish-options'>Publishing Options</link></td>
    </tr>
    <tr>
      <td>publish-only-affiliation</td>
      <td>The publish-only affiliation is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#affiliations'>Affiliations</link></td>
    </tr>
    <tr>
      <td>publisher-affiliation</td>
      <td>The publisher affiliation is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#affiliations'>Affiliations</link></td>
    </tr>
    <tr>
      <td>purge-nodes</td>
      <td>Purging of nodes is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#owner-purge'>Purge All Node Items</link></td>
    </tr>
    <tr>
      <td>retract-items</td>
      <td>Item retraction is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#publisher-delete'>Delete an Item from a Node</link></td>
    </tr>
    <tr>
      <td>retrieve-affiliations</td>
      <td>Retrieval of current affiliations is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#entity-affiliations'>Retrieve Affiliations</link></td>
    </tr>
    <tr>
      <td>retrieve-default</td>
      <td>Retrieval of default node configuration is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#owner-default'>Request Default Node Configuration Options</link></td>
    </tr>
    <tr>
      <td>retrieve-default-sub</td>
      <td>Retrieval of default subscription configuration is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#subscribe-default'>Request Default Subscription Configuration Options</link></td>
    </tr>
    <tr>
      <td>retrieve-items</td>
      <td>Item retrieval is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#subscriber-retrieve'>Retrieve Items from a Node</link></td>
    </tr>
    <tr>
      <td>retrieve-subscriptions</td>
      <td>Retrieval of current subscriptions is supported.</td>
      <td>RECOMMENDED</td>
      <td><link url='#entity-subscriptions'>Retrieve Subscriptions</link></td>
    </tr>
    <tr>
      <td>subscribe</td>
      <td>Subscribing and unsubscribing are supported.</td>
      <td>REQUIRED</td>
      <td><link url='#subscriber-subscribe'>Subscribe to a Node</link> and <link url='#subscriber-unsubscribe'>Unsubscribe from a Node</link></td>
    </tr>
    <tr>
      <td>subscription-options</td>
      <td>Configuration of subscription options is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#subscriber-configure'>Configure Subscription Options</link></td>
    </tr>
    <tr>
      <td>subscription-notifications</td>
      <td>Notification of subscription state changes is supported.</td>
      <td>OPTIONAL</td>
      <td><link url='#impl-subchange'>Notification of Subscription State Changes</link></td>
    </tr>
  </table>
</section1>

<section1 topic='Error Conditions' anchor='errors'>
  <table caption='Error conditions and typical causes'>
    <tr>
      <th>Condition</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>&conflict;</td>
      <td>The node already exists.</td>
    </tr>
    <tr>
      <td>&feature;</td>
      <td>The operation being attempted on a node (or the system) has failed because the service or node does not support the operation; the error SHOULD also specify which feature is unsupported.</td>
    </tr>
    <tr>
      <td>&forbidden;</td>
      <td>An entity does not have sufficient privileges to perform the action, is requesting an operation for another Jabber ID (e.g., francisco@denmark.lit attempts to subscribe bernardo@denmark.lit to a node), or the requesting entity has an affiliation of "outcast".</td>
    </tr>
    <tr>
      <td>&notfound;</td>
      <td>The node or item specified for some operation does not exist.</td>
    </tr>
    <tr>
      <td>&notallowed;</td>
      <td>An entity has attempted to perform an action which the service implements; however the service-wide admin or the node owner has disabled the action for that service or node.</td>
    </tr>
    <tr>
      <td>&notauthorized;</td>
      <td>An entity has attempted to subscribe to or retrieve items from a node but is not authorized to see the account owner's presence, is not in the appropriate roster group, or is not on the whitelist for subscriptions.</td>
    </tr>
    <tr>
      <td>&payment;</td>
      <td>Subscriptions and item retrieval are based on some kind payment service. Payments would be done out-of-band using some agreed-upon method (not defined herein).</td>
    </tr>
    <tr>
      <td>&registration;</td>
      <td>Entities are required to register before node creation is allowed.</td>
    </tr>
  </table>
  <p>Note: Refer to &xep0086; for more information regarding error syntax.</p>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>

  <section2 topic='Notification Triggers' anchor='impl-notify'>
    <p>There are many possible triggers for sending an event notification to an entity for the currently published item or the last published item, as summarized below:</p>
    <ol>
      <li>The entity explicitly requests one or more items from the node and is authorized to retrieve items; when the service receives such a request, it sends the items to the entity.</li>
      <li>The entity is an authorized subscriber to the node (explicitly via subscription or implicitly based on a role of owner or publisher); when the publisher sends a publish request, the service sends the currently published item to the entity (subject to presence checks and notification filtering if appropriate).</li>
      <li>The entity is not subscribed but is eligible to do so and has sent presence containing appropriate entity capabilities data to a service that supports filtered notifications (effectively establishing a "temporary subscription" based on an expressed notification interest); when the service first receives such presence, it sends the last published item to the entity (sending it only once upon first receiving such presence, not on subsequent presence updates that contain the same notification interest).</li>
      <li>The entity is not subscribed but is eligible to do so and has sent presence containing appropriate entity capabilities data to a service that supports filtered notifications (effectively establishing a "temporary subscription"); when the publisher sends a publish request that matches the entity's expressed notification interest, the service sends the currently published item to the entity.</li>
      <li>The entity gains access to the node because of a change to the node access model; as a result, the service sends the last published item to the entity.</li>
      <li>The entity is added to the roster group associated with a node access model of "roster"; as a result, the service sends the last published item to the entity.</li>
    </ol>
  </section2>

  <section2 topic='Intended Recipients for Notifications' anchor='impl-recipients'>
    <p>When a pubsub service generates notifications, it MUST adhere to the delivery rules implicit in the subscription option configuration for each subscriber. In particular, the 'to' address SHOULD be that of the subscribed JID only. The service SHOULD NOT attempt to guess at the most available resource associated with the subscribed JID (e.g., in the context of instant messaging systems).</p>
  </section2>

  <section2 topic='Handling Notification-Related Errors' anchor='impl-bounce'>
    <p>As noted above, a pubsub service SHOULD ensure that the &MESSAGE; stanza for each event notification it generates possesses an 'id' attribute with a value. (This notification ID is not to be confused with either the node ID or the item ID.) This ID MUST be unique within the context of the pubsub service in order to ensure proper tracking of any delivery-related errors.</p>
    <p>Exactly how a service shall handle delivery-related errors is a matter of implementation. In general, such handling is effectively similar to the bounce processing performed by other message delivery systems, such as mail transfer agents and mailing list software. The following are some suggested guidelines regarding the handling of XMPP-specific error conditions in relation to pubsub event notifications (see <cite>RFC 3920</cite> and <cite>XEP-0086</cite> regarding XMPP error condition semantics):</p>
    <ul>
      <li>If the XMPP error is of type "cancel" (e.g., &notfound;), or the error condition is &gone;, the pubsub service SHOULD terminate the subscription of the entity to that node and MAY terminate the subscription of that entity to all nodes hosted at the service.</li>
      <li>If the XMPP error is of type "auth" (e.g., &registration;) or "wait" (e.g., &timeout;), or the error condition is &badrequest;, &redirect;, or &notacceptable;, the pubsub service SHOULD increment a bounce counter for that entity and MAY attempt to resend the event notification after some configurable amount of time. The service MAY terminate the subscription of the entity to that node if the bounce counter has reached some configurable limit.</li>
    </ul>
  </section2>

  <section2 topic='Temporary Subscriptions' anchor='impl-tempsub'>
    <p>An implementation MAY enable an entity to subscribe to a node temporarily, i.e., only for as long as the subscriber is online in its current presence session. To subscribe temporarily, the subscriber MUST set the "pubsub#expire" subscription configuration option to a literal value of "presence".</p>
    <example caption='A Temporary Subscription'><![CDATA[
<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='lease3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'>
        <x xmlns='jabber:x:data' type='submit'>
          <field var='FORM_TYPE' type='hidden'>
            <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
          </field>
          ...
          <field var='pubsub#expire'><value>presence</value></field>
          ...
        </x>
     </options>
  </pubsub>
</iq>
]]></example>
    <p>The service will then automatically cancel the subscription when it receives presence of type "unavailable" from the subscriber.</p>
    <p>An implementation MAY enable the node owner to force all subscriptions to be temporary, which is useful for nodes that are also configured to use presence-based delivery. This setting uses the "pubsub#tempsub" node configuration option set to a value of true.</p>
    <example caption='Owner sets all subscriptions to temporary'><![CDATA[
<iq type='set'
    from='hamlet@denmark.lit/elsinore'
    to='pubsub.shakespeare.lit'
    id='configtemp'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <configure node='princely_musings'>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#tempsub'><value>true</value></field>
      </x>
    </configure>
  </pubsub>
</iq>
]]></example>
  </section2>

  <section2 topic='Presence-Based Delivery of Events' anchor='impl-presence'>
    <p>Implementations of pubsub MAY deliver event notifications only when the subscriber is online. In these cases, the option may be a node configuration option as shown in the examples above. To facilitate this, the pubsub service needs to subscribe to the subscriber's presence and check the subscriber's current presence information before sending any event notifications (as described in <cite>RFC 3921</cite>). Presence subscriptions MUST be based on the subscribed JID.</p>
  </section2>

  <section2 topic='Not Routing Events to Offline Storage' anchor='impl-offline'>
    <p>Sending events to users of existing XMPP servers may force event notifications to be routed to offline storage for later delivery (as described in &xep0160;). This may not always be desirable. The possible ways of preventing this behavior include:</p>
    <ul>
      <li>Use presence-based subscription options as described above.</li>
      <li>Use delivery semantics as defined by &xep0079;.</li>
      <li>Specify a message type of "headline", which in most existing server implementations will prevent offline storage.</li>
    </ul>
  </section2>

  <section2 topic='Including a Message Body' anchor='impl-body'>
    <p>If a service understands the semantics for a particular payload type and an entity's subscription is so configured (by the "pubsub#include_body" subscription option to true), the service SHOULD include an appropriate XMPP &BODY; child element along with the payloads it sends in event notifications for a given node, where the body's XML character data summarizes or represents the information contained in the payload (this enables clients that do not understand the payload format to present the appropriate information to an end user). For example, the Atom &lt;summary/&gt; element (see <cite>RFC 4287</cite>) could be mapped to the XMPP &BODY; element. A service MUST NOT provide the "pubsub#include_body" subscription option for a node if it does not have a defined way to transform part or all of the payload format into a sensible message body. A node owner MAY define an XSLT for transforming the payload format into a message body, via the "pubsub#body_xslt" node configuration option. This XSLT is applied by the pubsub service after receiving a publish request and before sending the appropriate notifications, not by the client before sending a publish request.</p>
    <p>If the service does not understand the semantics for a particular payload type and therefore cannot transform the payload into a human-readable message body, it SHOULD NOT include a &lt;body/&gt; child.</p>
    <p>If a subscriber has multiple subscriptions to the same node, where some of the SubIDs have include_body set to true and others have include_body set to false, the service SHOULD include a body with all notifications.</p>
  </section2>

  <section2 topic='Node ID and Item ID Uniqueness' anchor='impl-uniqueness'>
    <p>NodeIDs MUST be treated as unique identifiers within the context of a particular pubsub service.</p>
    <p>If item identifiers are used, they MUST be treated as unique within the scope of the node. The combination of the NodeID + ItemID MUST be unique within a given service, and MUST specify a single published item at a single node.</p>
    <p>If a publisher publishes an item and the ItemID matches that of an existing item, the pubsub service MUST overwrite the existing item and generate a new event notification.</p>
    <p>Because it is possible for a node's configuration to change such that ItemIDs are required (e.g., a change from transient to persistent), a service SHOULD use ItemIDs for internal tracking purposes even if it does not include them with the notifications it generates prior to the configuration change.</p>
  </section2>

  <section2 topic='Item Caching' anchor='impl-caching'>
    <p>A service MAY cache the last item published to a node, even if the node is configured for transient publication (i.e., configured to not persist items). The last published item SHOULD be sent to new subscribers upon successful processing of a subscription request or approval by a node owner.</p>
    <p>Note: Particular profiles of the generic publish-subscribe protocol MAY define more stringent requirements regarding the "cache-last-item" feature.</p>
  </section2>

  <section2 topic='Batch Processing' anchor='impl-batch'>
    <p>A publisher MAY include multiple &ITEM; elements in a publish request and MAY include multiple &ITEM; elements in a retract request. This results in "batch processing" of publications or retractions.</p>
    <p>If the service cannot process any one of the items to be published or retracted, the entire batch MUST fail and the service MUST NOT publish or retract any of the items.</p>
    <p>If a batch publish contains so many items that publication of all the items would exceed the maximum number of items for the node, the service MUST return a &notallowed; error, which SHOULD also include a pubsub-specific error condition of &lt;max-items-exceeded/&gt;.</p>
    <p>Note: Batch publication renders the concept of "last published item" problematic; therefore, if information coherence is needed, a publisher SHOULD publish items in separate requests rather than in batch mode.</p>
  </section2>

  <section2 topic='Auto-Subscribing Owners and Publishers' anchor='impl-autosubscribe'>
    <p>A service MUST allow owners and publishers to subscribe to a node, and to retrieve items from a node even if they are not subscribed. A service MAY auto-subscribe owners and publishers if they are not already subscribed, in which case it SHOULD generate a subscription ID if necessary for the subscription and SHOULD send a notification of successful subscription as described in the <link url='#impl-subchange'>Notification of Subscription State Changes</link> section of this document.</p>
  </section2>

  <section2 topic='Authorizing Subscription Requests (Pending Subscribers)' anchor='impl-authorize'>
    <p>How subscription requests are sent to node owners is a matter of implementation. Possibilities include:</p>
    <ul>
      <li>Send requests to all owners (these may be placed in offline storage as described in <cite>XEP-0160</cite>) and first approval wins.</li>
      <li>The service could subscribe to owner presence, and send only to the owners that are online.</li>
      <li>All owners vote on the new subscriber.</li>
      <li>Any owner is allowed to veto the subscriber.</li>
    </ul>
    <p>An implementation MAY use any of these methods, or some other method not defined herein.</p>
  </section2>

  <section2 topic='Notification of Subscription State Changes' anchor='impl-subchange'>
    <p>Various actions and events may result in changes to a subscription state:</p>
    <ul>
      <li><p>Approval or denial of a subscription request as described in the <link url='#owner-subreq'>Manage Subscription Requests</link> use case</p></li>
      <li><p>Cancellation of an existing subscription, for which many "triggers" are possible:</p>
        <ul>
          <li>The entity simply unsubscribes from the node</li>
          <li>The node is of type "presence" and the underlying presence subscription is cancelled</li>
          <li>The node is of type "roster" and the entity is moved to an unauthorized roster group</li>
        </ul>
      </li>
    </ul>
    <p>When a subscription state change occurs, a service SHOULD send a message to the (new, former, or denied) subscriber informing it of the change, where the message contains an &lt;event/&gt; element with a single &lt;subscription/&gt; child that specifies the node, JID, and subscription state. The notification MAY contain a &BODY; element specifying natural-language text regarding the subscription change. The JID to which the service sends the notification is the address that was set in the 'jid' attribute of the subscription request. Examples are shown below.</p>
    <example caption='Subscription approval notification'><![CDATA[
<message
    from='pubsub.shakespeare.lit'
    to='horatio@denmark.lit'
    id='approvalnotify1'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <subscription node='princely_musings' jid='horatio@denmark.lit' subscription='subscribed'/>
  </event>
</message>
]]></example>
    <example caption='Subscription cancellation / denial notification'><![CDATA[
<message
    from='pubsub.shakespeare.lit'
    to='horatio@denmark.lit'
    id='unsubnotify1'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <subscription node='princely_musings' jid='horatio@denmark.lit' subscription='none'/>
  </event>
</message>
]]></example>
    <p>If the service has knowledge of the (former or denied) subscriber's presence, it SHOULD send the message to all of the subscriber's resources; if not, it MUST send the message to the subscriber's affiliated JID.</p>
    <p>If a service or node supports this feature, it MUST return a feature of "subscription-notifications" in its response to service discovery information requests.</p>
  </section2>

  <section2 topic='NodeID Semantics' anchor='impl-semantics'>
    <p>NodeIDs MAY have semantic meaning in particular profiles, implementations, or deployments of pubsub. However, it is STRONGLY RECOMMENDED that such semantic meaning not be used to encapsulate the hierarchical structure of nodes; instead, node hierarchy SHOULD be encapsulated using collections and their associated child nodes as described in <cite>XEP-0248</cite>.</p>
  </section2>

  <section2 topic='Inclusion of SHIM Headers' anchor='impl-shim'>
    <p>When SubIDs are used, <cite>Stanza Headers and Internet Metadata (SHIM)</cite> headers are to be included in order to differentiate notifications sent regarding a particular subscription. The relevant use cases and scenarios are:</p>
    <ul>
      <li>Sending notifications regarding newly-published items as described in the <link url='#publisher-publish'>Publish an Item to a Node</link> use case.</li>
      <li>Sending notifications regarding deleted items as described in the <link url='#publisher-delete'>Delete an Item from a Node</link> use case.</li>
    </ul>
    <p>The SHIM headers are generated by the node to which the subscriber has a subscription, which may be either a leaf node or a collection node (refer to <cite>XEP-0248</cite>).</p>
    <p>SHIM headers are not to be included when the content does not differ based on subscription ID, e.g., when a node sends notification of a configuration change to the node itself, notification that the node has been purged, or notification that the node has been deleted.</p>
  </section2>

  <section2 topic='Associating Events and Payloads with the Generating Entity' anchor='impl-association'>
    <p>An implementation MAY enable the node configuration to specify an association between the event notification and the entity to which the published information pertains, but such a feature is OPTIONAL. Here are some possible examples:</p>
    <ul>
      <li>In the context of a geolocation notification service using &xep0080;, the user may generate the geolocation information or the information may be generated by an automated service (e.g., a service offered by a mobile telephony provider), but in either case the information is <em>about</em> the user's geolocation and therefore all replies should go to the user (who is probably the node owner).</li>
      <li>In the context of a group weblog, different users might publish to the weblog and replies might go to the publisher of an entry rather than to the weblog owner.</li>
      <li>In the context of an integrated pubsub and multi-user chat system, the node owner might be the room owner but all replies need to be sent to the room rather than to the owner.</li>
    </ul>
    <p>Therefore we define the "itemreply" node configuration option, with two possible values:</p>
    <ul>
      <li>"owner" (i.e., the node owner or an alias for the node owners)</li>
      <li>"publisher" (i.e., the item publisher)</li>
    </ul>
    <p>A node owner MUST NOT define more than one of these options.</p>
    <p>An example is shown below.</p>
    <example caption='Event notification with publisher JID'><![CDATA[
<message from='pubsub.shakespeare.lit'
         to='bassanio@merchantofvenice.lit'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='n48ad4fj78zn38st734'>
      <item id='i1s2d3f4g5h6bjeh936'
            publisher='portia@merchantofvenice.lit'>
        <geoloc xmlns='http://jabber.org/protocol/geoloc'>
          <description>Venice</description>
          <lat>45.44</lat>
          <lon>12.33</lon>
        </geoloc>
      </item>
    </items>
  </event>
</message>
]]></example>
    <p>Alternatively, if a service implements the personal eventing subset of this protocol, the virtual pubsub service is the account owner's bare JID and notifications are sent from that JID; for details, refer to <cite>XEP-0163</cite>.</p>
  </section2>

  <section2 topic='Chaining' anchor='impl-chaining'>
    <p>The word "chaining" refers to the practice of subscribing one node to another node. For instance, consider a scenario in which the node &lt;pubsub@example.net/NewsBroadcaster&gt; wants to distribute information received from the node "NewsFeed" at &lt;pubsub.example.com&gt;. While it is theoretically possible for &lt;pubsub@example.net/NewsBroadcaster&gt; to directly subscribe to the NewsFeed node (since the former node is directly addressable as a JID), implementations MUST NOT chain nodes in this fashion. Instead, implementations MUST subscribe from the address of the pubsub service rather than the node (in the example shown here, the subscription would be sent from &lt;pubsub@example.net&gt; rather than &lt;pubsub@example.net/NewsBroadcaster&gt;).</p>

  </section2>

  <section2 topic='Time-Based Subscriptions (Leases)' anchor='impl-leases'>
    <p>In some systems it may be desirable to provide a subscription "leasing" feature in order to expire old or stale subscriptions. Leases can be implemented using configurable subscription options; specifically, when an entity subscribes, the service would require configuration of subscription options and the configuration form would contain a field of "pubsub#expire". This field MUST contain a dateTime (as specified in &xep0082;).</p>
    <p>The leasing process is shown below.</p>
    <example caption='Leasing process'><![CDATA[
<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='lease1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscribe
        node='princely_musings'
        jid='francisco@denmark.lit'/>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='lease1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='francisco@denmark.lit'
        subscription='unconfigured'>
      <subscribe-options>
        <required/>
      </subscribe-options>
    </subscription>
  </pubsub>
</iq>

<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='lease2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'/>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='lease2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'>
      <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        ...
        <field var='pubsub#expire' type='text-single'
               label='Requested lease period'/>
        ...
      </x>
    </options>
  </pubsub>
</iq>

<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='lease3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'>
        <x xmlns='jabber:x:data' type='submit'>
          <field var='FORM_TYPE' type='hidden'>
            <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
          </field>
          ...
          <field var='pubsub#expire'><value>2006-02-28T11:59Z</value></field>
          ...
        </x>
     </options>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='lease3'/>
]]></example>
    <p>The service MAY send a message to the subscriber when the lease is almost over (e.g., 24 hours before the end of the lease term). This MUST be done by sending a &MESSAGE; containing a &lt;subscription/&gt; element qualified by the 'http://jabber.org/protocol/pubsub#event' namespace and including an 'expiry' attribute.</p>
    <example caption='Service notifies subscriber of impending lease end'><![CDATA[
<message from='pubsub.shakespeare.lit' to='francisco@denmark.lit/barracks'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <subscription
        expiry='2006-02-28T23:59Z'
        jid='francisco@denmark.lit'
        node='princely_musings'
        subid='ba49252aaa4f5d320c24d3766f0bdcade78c78d3'
        subscription='subscribed'/>
  </event>
</message>
]]></example>
    <p>When the subscriber wants to renew the lease, it would get the current subscription options, change the value of the "pubsub#expire" field, and submit the new subscription options back to the service. If the new expire value exceeds the maximum value allowed for subscription leases, the service MUST change the value of the field to be the current date/time plus the maximum allowed lease period.</p>
    <example caption='Renewing a lease'><![CDATA[
<iq type='get'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='renew1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'/>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='renew1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'>
      <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        ...
        <field var='pubsub#expire' type='text-single'
               label='Requested lease period'/>
        ...
      </x>
    </options>
  </pubsub>
</iq>

<iq type='set'
    from='francisco@denmark.lit/barracks'
    to='pubsub.shakespeare.lit'
    id='renew2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings' jid='francisco@denmark.lit'>
        <x xmlns='jabber:x:data' type='submit'>
          <field var='FORM_TYPE' type='hidden'>
            <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
          </field>
          ...
          <field var='pubsub#expire'><value>2006-03-31T23:59Z</value></field>
          ...
        </x>
     </options>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='francisco@denmark.lit/barracks'
    id='renew2'/>
]]></example>
  </section2>

  <section2 topic='Content-Based Pubsub Systems' anchor='impl-content'>
    <p>A service MAY enable entities to subscribe to nodes and apply a filter to notifications (e.g., keyword matching such as "send me all news entries from Slashdot that match the term 'XMPP'"). Such a content-based service SHOULD allow an entity to subscribe more than once to the same node and, if so, MUST use subscription identifiers (SubIDs) to distinguish between multiple subscriptions. In order to prevent collisions, a service that supports content-based subscriptions using SubIDs SHOULD generate SubIDs on behalf of subscribers rather than allowing subscribers to set their own SubIDs. <note>Another way to implement content-based subscriptions is to host one node per keyword or other filter; however, this is likely to require an extremely large number of nodes.</note></p>
    <p>Content-based services SHOULD use subscription options to specify the filter(s) to be applied. Because there many possible filtering mechanisms (many of which may be application-specific), this document does not define any such method. However, filtering mechanisms may be defined in separate specifications.</p>
    <p>A fictional example of the subscription options configuration process for content-based pubsub is shown below.</p>
    <example caption='A content-based subscription'><![CDATA[
<iq type='set'
    from='bard@shakespeare.lit/globe'
    to='pubsub.shakespeare.lit'
    id='filter1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscribe
        node='princely_musings'
        jid='francisco@denmark.lit'/>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='bard@shakespeare.lit/globe'
    id='filter1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscription
        node='princely_musings'
        jid='bard@shakespeare.lit'
        subid='991d7fd1616fd041015064133cd097a10030819e'
        subscription='unconfigured'>
      <subscribe-options>
        <required/>
      </subscribe-options>
    </subscription>
  </pubsub>
</iq>

<iq type='get'
    from='bard@shakespeare.lit/globe'
    to='pubsub.shakespeare.lit'
    id='filter2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings'
             jid='bard@shakespeare.lit'
             subid='991d7fd1616fd041015064133cd097a10030819e'/>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='bard@shakespeare.lit/globe'
    id='filter2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings'
             jid='bard@shakespeare.lit'
             subid='991d7fd1616fd041015064133cd097a10030819e'>
      <x xmlns='jabber:x:data' type='form'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
        </field>
        ...
        <field var='x-http://shakespeare.lit/search#keyword'
               type='text-single'
               label='Keyword to match'/>
        ...
      </x>
    </options>
  </pubsub>
</iq>

<iq type='set'
    from='bard@shakespeare.lit/globe'
    to='pubsub.shakespeare.lit'
    id='filter3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <options node='princely_musings'
             jid='bard@shakespeare.lit'
             subid='991d7fd1616fd041015064133cd097a10030819e'>
        <x xmlns='jabber:x:data' type='submit'>
          <field var='FORM_TYPE' type='hidden'>
            <value>http://jabber.org/protocol/pubsub#subscribe_options</value>
          </field>
          ...
          <field var='x-http://shakespeare.lit/search#keyword'><value>peasant</value></field>
          ...
        </x>
     </options>
  </pubsub>
</iq>

<iq type='result'
    from='pubsub.shakespeare.lit'
    to='bard@shakespeare.lit/globe'
    id='filter3'/>
]]></example>
    <p>The subscriber will then be notified about events that match the keyword.</p>
    <example caption='Event notification for matched keyword'><![CDATA[
<message from='pubsub.shakespeare.lit' to='bard@shakespeare.lit'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='princely_musings'>
      <item id='4e30f35051b7b8b42abe083742187228'>
        <entry xmlns='http://www.w3.org/2005/Atom'>
          <title>Alone</title>
          <summary>
Now I am alone.
O, what a rogue and peasant slave am I!
          </summary>
          <link rel='alternate' type='text/html'
                href='http://denmark.lit/2003/12/13/atom03'/>
          <id>tag:denmark.lit,2003:entry-32396</id>
          <published>2003-12-13T11:09:53Z</published>
          <updated>2003-12-13T11:09:53Z</updated>
        </entry>
      </item>
    </items>
  </event>
  <headers xmlns='http://jabber.org/protocol/shim'>
    <header name='SubID'>991d7fd1616fd041015064133cd097a10030819e</header>
  </headers>
</message>
]]></example>
  </section2>
  <section2 topic='Singleton Nodes' anchor='impl-singleton'>
    <p>For some nodes, it is desirable to have at most one item associated with the node at any one time (for example, a client may want to store its preferences using a node name that is a namespace controlled by that client). When this pattern is desired, it is RECOMMENDED for the publisher to specify an ItemID of "current" to ensure that the publication of a new item will overwrite the existing item.</p>
    <example caption='Publishing to a Singleton Node'><![CDATA[
<iq type='set'
    from='horatio@denmark.lit/mobile'
    to='pubsub.shakespeare.lit'
    id='single1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='elsinore-doorbell'>
      <item id='current'/>
    </publish>
  </pubsub>
</iq>
]]></example>
    <p>Naturally, the node owner can enforce the singleton node pattern by setting the max_items configuration option to "1".</p>
  </section2>
  <section2 topic='PubSub URIs' anchor='impl-uri'>
    <p>An XMPP URI (see &rfc5122;) can be used for the purpose of identification or interaction. Some examples are provided below.</p>
    <p>The following URI merely identifies a pubsub node.</p>
    <example caption='XMPP URI for a node'><![CDATA[
xmpp:pubsub.shakespeare.lit?;node=princely_musings
]]></example>
    <p>The following URI identifies a specific item at a node.</p>
    <example caption='XMPP URI for a pubsub item'><![CDATA[
xmpp:pubsub.shakespeare.lit?;node=princely_musings;item=ae890ac52d0df67ed7cfdf51b644e901
]]></example>
    <p>The following URI defines how to subscribe to a node (for details, see the <link url='#registrar-querytypes'>URI Query Types</link> section of this document).</p>
    <example caption='URI for subscribing to a pubsub node'><![CDATA[
xmpp:pubsub.shakespeare.lit?pubsub;action=subscribe;node=princely_musings
]]></example>
    <p>The following URI defines how to retrieve a specific item from a node.</p>
    <example caption='URI for retrieving a pubsub item'><![CDATA[
xmpp:pubsub.shakespeare.lit?pubsub;action=retrieve;node=princely_musings;item=ae890ac52d0df67ed7cfdf51b644e901
]]></example>
  </section2>
</section1>

<section1 topic='Internationalization Considerations' anchor='i18n'>
  <section2 topic='Field Labels' anchor='i18n-formtypes'>
    <p>The Data Forms shown in this specification include English-language labels for various fields; implementations that will display such forms to human users SHOULD provide localized label text for fields that are defined for the registered FORM_TYPEs.</p>
  </section2>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <section2 topic='Private Information' anchor='security-privacy'>
    <p>The data published to a pubsub node might contain sensitive information (e.g., a user's geolocation). Therefore, node owners SHOULD exercise care in approving subscription requests. Security considerations regarding particular kinds of information are the responsibility of the "using protocol".</p>
  </section2>
  <section2 topic='Authorization' anchor='security-authorization'>
    <p>XMPP PubSub contains a hierarchy of affiliations for the purpose of authorization and access control. A service MUST NOT allow non-owners or other unauthorized entities to complete any actions defined under the <link url='#owner'>Owner Use Cases</link> section of this document.</p>
  </section2>
  <section2 topic='Access Models' anchor='security-access'>
    <p>A service MUST adhere to the defined access model in determining whether to send event notifications or payloads to an entity, or allow an entity to retrieve items from a node. A service MAY enforce additional privacy and security policies when determining whether an entity is allowed to subscribe to a node or retrieve items from a node; however, any such policies shall be considered specific to an implementation or deployment and are out of scope for this document.</p>
  </section2>
  <section2 topic='Presence Leaks' anchor='security-presence'>
    <p>In the context of instant messaging systems it is possible for the act of publishing an item to reveal the node owner or item publisher's network availability. However, this risk is mitigated by the following factors:</p>
    <ol>
      <li>A node does not necessarily reveal the existence of the publishing entity.</li>
      <li>XMPP PubSub systems are not necessarily tied to instant messaging systems.</li>
      <li>Even in the context of IM systems, a node provides information distinct from network availability (e.g., user tunes).</li>
      <li>Even then, the actual publisher might not be an IM user (e.g., an automated calendaring or geolocation system).</li>
    </ol>
  </section2>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document does not require interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>

  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>The &REGISTRAR; includes the following namespaces in its registry of protocol namespaces (see &NAMESPACES;):</p>
    <ul>
      <li>http://jabber.org/protocol/pubsub</li>
      <li>http://jabber.org/protocol/pubsub#errors</li>
      <li>http://jabber.org/protocol/pubsub#event</li>
      <li>http://jabber.org/protocol/pubsub#owner</li>
    </ul>
  </section2>

  <section2 topic='Service Discovery Category/Type' anchor='registrar-disco'>
    <p>The XMPP Registrar includes a category of "pubsub" in its registry of Service Discovery identities (see &DISCOCATEGORIES;), as well as three specific types within that category:</p>
    <table caption='Service Discovery Types in Pubsub Category'>
      <tr>
        <td>collection</td>
        <td>A pubsub node of the "collection" type as described in XEP-0248.</td>
      </tr>
      <tr>
        <td>leaf</td>
        <td>A pubsub node of the "leaf" type as described in XEP-0060.</td>
      </tr>
      <tr>
        <td>service</td>
        <td>A pubsub service that supports the functionality defined in XEP-0060. <note>Prior to version 1.5 of XEP-0060, this type was called "generic".</note></td>
      </tr>
    </table>
    <p>The registry submission is as follows:</p>
    <code><![CDATA[
<category>
  <name>pubsub</name>
  <desc>Services and nodes that adhere to XEP-0060.</desc>
  <type>
    <name>collection</name>
    <desc>A pubsub node of the "collection" type.</desc>
    <doc>XEP-0248</doc>
  </type>
  <type>
    <name>leaf</name>
    <desc>A pubsub node of the "leaf" type.</desc>
    <doc>XEP-0060</doc>
  </type>
  <type>
    <name>service</name>
    <desc>A pubsub service that supports the functionality defined in XEP-0060.</desc>
    <doc>XEP-0060</doc>
  </type>
</category>
]]></code>
    <p>Future submissions to the XMPP Registrar may register additional types.</p>
  </section2>

  <section2 topic='Service Discovery Features' anchor='registrar-features'>
    <p>The XMPP Registrar maintains a registry of service discovery features (see &DISCOFEATURES;), which includes a number of features that may be returned by pubsub services. The following registry submission has been provided to the XMPP Registrar for that purpose.</p>
    <code><![CDATA[
<var>
  <name>http://jabber.org/protocol/pubsub#access-authorize</name>
  <desc>The default node access model is authorize.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#access-open</name>
  <desc>The default node access model is open.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#access-presence</name>
  <desc>The default node access model is presence.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#access-roster</name>
  <desc>The default node access model is roster.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#access-whitelist</name>
  <desc>The default node access model is whitelist.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#auto-create</name>
  <desc>The service supports automatic creation of nodes on first publish.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#auto-subscribe</name>
  <desc>The service supports automatic subscription to a nodes based on presence subscription.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#collections</name>
  <desc>Collection nodes are supported.</desc>
  <doc>XEP-0248</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#config-node</name>
  <desc>Configuration of node options is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#create-and-configure</name>
  <desc>Simultaneous creation and configuration of nodes is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#create-nodes</name>
  <desc>Creation of nodes is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#delete-items</name>
  <desc>Deletion of items is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#delete-nodes</name>
  <desc>Deletion of nodes is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#filtered-notifications</name>
  <desc>The service supports filtering of notifications based on Entity Capabilities.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#get-pending</name>
  <desc>Retrieval of pending subscription approvals is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#instant-nodes</name>
  <desc>Creation of instant nodes is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#item-ids</name>
  <desc>Publishers may specify item identifiers.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#last-published</name>
  <desc>
    The service supports sending of the last published item to new
    subscribers and to newly available resources.
  </desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#leased-subscription</name>
  <desc>Time-based subscriptions are supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#manage-subscriptions</name>
  <desc>Node owners may manage subscriptions.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#member-affiliation</name>
  <desc>The member affiliation is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#meta-data</name>
  <desc>Node meta-data is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#modify-affiliations</name>
  <desc>Node owners may modify affiliations.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#multi-collection</name>
  <desc>A single leaf node can be associated with multiple collections.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#multi-subscribe</name>
  <desc>A single entity may subscribe to a node multiple times.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#outcast-affiliation</name>
  <desc>The outcast affiliation is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#persistent-items</name>
  <desc>Persistent items are supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#presence-notifications</name>
  <desc>Presence-based delivery of event notifications is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#presence-subscribe</name>
  <desc>Implicit presence-based subscriptions are supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#publish</name>
  <desc>Publishing items is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#publish-options</name>
  <desc>Publication with publish options is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#publish-only-affiliation</name>
  <desc>The publish-only affiliation is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#publisher-affiliation</name>
  <desc>The publisher affiliation is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#purge-nodes</name>
  <desc>Purging of nodes is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#retract-items</name>
  <desc>Item retraction is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#retrieve-affiliations</name>
  <desc>Retrieval of current affiliations is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#retrieve-default</name>
  <desc>Retrieval of default node configuration is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#retrieve-items</name>
  <desc>Item retrieval is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#retrieve-subscriptions</name>
  <desc>Retrieval of current subscriptions is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#subscribe</name>
  <desc>Subscribing and unsubscribing are supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#subscription-options</name>
  <desc>Configuration of subscription options is supported.</desc>
  <doc>XEP-0060</doc>
</var>
<var>
  <name>http://jabber.org/protocol/pubsub#subscription-notifications</name>
  <desc>Notification of subscription state changes is supported.</desc>
  <doc>XEP-0060</doc>
</var>
]]></code>
  </section2>

  <section2 topic='Field Standardization' anchor='registrar-formtypes'>
    <p>XEP-0068 defines a process for standardizing the fields used within Data Forms scoped by a particular namespace, and the XMPP Registrar maintains a registry of such FORM_TYPES (see &FORMTYPES;). Within pubsub, there are four uses of such forms:</p>
    <ol>
      <li>Authorization of subscriptions using the 'http://jabber.org/protocol/pubsub#subscribe_authorization' namespace.</li>
      <li>Configuration of subscription options using the 'http://jabber.org/protocol/pubsub#subscribe_options' namespace.</li>
      <li>Configuration of a node using the 'http://jabber.org/protocol/pubsub#node_config' namespace.</li>
      <li>Setting of metadata information using the 'http://jabber.org/protocol/pubsub#meta-data' namespace.</li>
    </ol>
    <p>The registry submissions associated with these namespaces are defined below.</p>
    <p>Note: There is no requirement that configuration fields need to be registered with the XMPP Registrar. However, as specified in Section 3.4 of <cite>XEP-0068</cite>, names of custom (unregistered) fields MUST begin with the characters "x-" if the form itself is scoped by a registered FORM_TYPE.</p>

    <section3 topic='pubsub#subscribe_authorization FORM_TYPE' anchor='registrar-formtypes-auth'>
      <code><![CDATA[
<form_type>
  <name>http://jabber.org/protocol/pubsub#subscribe_authorization</name>
  <doc>XEP-0060</doc>
  <desc>Forms enabling authorization of subscriptions to pubsub nodes</desc>
  <field
      var='pubsub#allow'
      type='boolean'
      label='Whether to allow the subscription'/>
  <field
      var='pubsub#node'
      type='text-single'
      label='The NodeID of the relevant node'/>
  <field
      var='pubsub#subscriber_jid'
      type='jid-single'
      label='The address (JID) of the subscriber'/>
  <field
      var='pubsub#subid'
      type='text-single'
      label='The subscription identifier associated with the subscription request'/>
</form_type>
]]></code>
    </section3>
    <section3 topic='pubsub#subscribe_options FORM_TYPE' anchor='registrar-formtypes-subscribe'>
      <code><![CDATA[
<form_type>
  <name>http://jabber.org/protocol/pubsub#subscribe_options</name>
  <doc>XEP-0060</doc>
  <desc>Forms enabling configuration of subscription options for pubsub nodes</desc>
  <field
      var='pubsub#deliver'
      type='boolean'
      label='Whether an entity wants to receive
             or disable notifications'/>
  <field
      var='pubsub#digest'
      type='boolean'
      label='Whether an entity wants to receive digests
             (aggregations) of notifications or all
             notifications individually'/>
  <field var='pubsub#digest_frequency'
         type='text-single'
         label='The minimum number of milliseconds between
                sending any two notification digests'/>
  <field
      var='pubsub#expire'
      type='text-single'
      label='The DateTime at which a leased subscription
             will end or has ended'/>
  <field
      var='pubsub#include_body'
      type='boolean'
      label='Whether an entity wants to receive an XMPP
             message body in addition to the payload
             format'/>
  <field
      var='pubsub#show-values'
      type='list-multi'
      label='The presence states for which an entity
             wants to receive notifications'>
    <option label='XMPP Show Value of Away'>
      <value>away</value>
    </option>
    <option label='XMPP Show Value of Chat'>
      <value>chat</value>
    </option>
    <option label='XMPP Show Value of DND (Do Not Disturb)'>
      <value>dnd</value>
    </option>
    <option label='Mere Availability in XMPP (No Show Value)'>
      <value>online</value>
    </option>
    <option label='XMPP Show Value of XA (Extended Away)'>
      <value>xa</value>
    </option>
  </field>
  <field var='pubsub#subscription_type'
         type='list-single'>
    <option label='Receive notification of new items only'>
      <value>items</value>
    </option>
    <option label='Receive notification of new nodes only'>
      <value>nodes</value>
    </option>
  </field>
  <field var='pubsub#subscription_depth'
         type='list-single'>
    <option label='Receive notification from direct child nodes only'>
      <value>1</value>
    </option>
    <option label='Receive notification from all descendent nodes'>
      <value>all</value>
    </option>
  </field>
</form_type>
]]></code>
    </section3>
    <section3 topic='pubsub#meta-data FORM_TYPE' anchor='registrar-formtypes-metadata'>
      <code><![CDATA[
<form_type>
  <name>http://jabber.org/protocol/pubsub#meta-data</name>
  <doc>XEP-0060</doc>
  <desc>Forms enabling setting of metadata information about pubsub nodes</desc>
  <field var='pubsub#contact'
         type='jid-multi'
         label='The JIDs of those to contact with questions'/>
  <field var='pubsub#creation_date'
         type='text-single'
         label='The datetime when the node was created'/>
  <field var='pubsub#creator'
         type='jid-single'
         label='The JID of the node creator'/>
  <field var='pubsub#description'
         type='text-single'
         label='A description of the node'/>
  <field var='pubsub#language'
         type='list-single'
         label='The default language of the node'/>
  <field var='pubsub#num_subscribers'
         type='text-single'
         label='The number of subscribers to the node'/>
  <field var='pubsub#owner'
         type='jid-multi'
         label='The JIDs of those with an affiliation of owner'/>
  <field var='pubsub#publisher'
         type='jid-multi'
         label='The JIDs of those with an affiliation of publisher'/>
  <field var='pubsub#title'
         type='text-single'
         label='The name of the node'/>
  <field var='pubsub#type'
         type='text-single'
         label='Payload type'/>
</form_type>
]]></code>
    </section3>
    <section3 topic='pubsub#node_config FORM_TYPE' anchor='registrar-formtypes-config'>
      <code><![CDATA[
<form_type>
  <name>http://jabber.org/protocol/pubsub#node_config</name>
  <doc>XEP-0060</doc>
  <desc>Forms enabling configuration of pubsub nodes</desc>
  <field var='pubsub#access_model'
         type='list-single'
         label='Who may subscribe and retrieve items'>
    <option label='Subscription requests must be approved and only subscribers may retrieve items'>
      <value>authorize</value>
    </option>
    <option label='Anyone may subscribe and retrieve items'>
      <value>open</value>
    </option>
    <option label='Anyone with a presence subscription of both or from may subscribe and retrieve items'>
      <value>presence</value>
    </option>
    <option label='Anyone in the specified roster group(s) may subscribe and retrieve items'>
      <value>roster</value>
    </option>
    <option label='Only those on a whitelist may subscribe and retrieve items'>
      <value>whitelist</value>
    </option>
  </field>
  <field var='pubsub#body_xslt'
         type='text-single'
         label='The URL of an XSL transformation which can be
                applied to payloads in order to generate an
                appropriate message body element.'/>
  <field var='pubsub#children_association_policy'
         type='list-single'
         label='Who may associate leaf nodes with a collection'>
    <option label='Anyone may associate leaf nodes with the collection'>
      <value>all</value>
    </option>
    <option label='Only collection node owners may associate leaf nodes with the collection'>
      <value>owners</value>
    </option>
    <option label='Only those on a whitelist may associate leaf nodes with the collection'>
      <value>whitelist</value>
    </option>
  </field>
  <field var='pubsub#children_association_whitelist'
         type='jid-multi'
         label='The list of JIDs that may associate leaf nodes with a collection'/>
  <field var='pubsub#children'
         type='text-multi'
         label='The child nodes (leaf or collection) associated with a collection'/>
  <field var='pubsub#children_max'
         type='text-single'
         label='The maximum number of child nodes that can be associated with a collection'/>
  <field var='pubsub#collection'
         type='text-multi'
         label='The collection(s) with which a node is affiliated'/>
  <field var='pubsub#contact'
         type='jid-multi'
         label='The JIDs of those to contact with questions'/>
  <field var='pubsub#dataform_xslt'
         type='text-single'
         label='The URL of an XSL transformation which can be
                applied to the payload format in order to generate
                a valid Data Forms result that the client could
                display using a generic Data Forms rendering
                engine'/>
  <field var='pubsub#deliver_notifications' type='boolean'
         label='Whether to deliver event notifications'>
    <value>true</value>
  </field>
  <field var='pubsub#deliver_payloads'
         type='boolean'
         label='Whether to deliver payloads with event notifications; applies only to leaf nodes'/>
  <field var='pubsub#description'
         type='text-single'
         label='A description of the node'/>
  <field var='pubsub#item_expire'
         type='text-single'
         label='Number of seconds after which to automatically purge items'/>
  <field var='pubsub#itemreply'
         type='list-single'
         label='Whether owners or publisher should receive replies to items'>
    <option label='Statically specify a replyto of the node owner(s)'>
      <value>owner</value>
    </option>
    <option label='Dynamically specify a replyto of the item publisher'>
      <value>publisher</value>
    </option>
  </field>
  <field var='pubsub#language'
         type='list-single'
         label='The default language of the node'/>
  <field var='pubsub#max_items'
         type='text-single'
         label='The maximum number of items to persist'/>
  <field var='pubsub#max_payload_size'
         type='text-single'
         label='The maximum payload size in bytes'/>
  <field var='pubsub#node_type'
         type='list-single'
         label='Whether the node is a leaf (default) or a collection'>
    <option label='The node is a leaf node (default)'>
      <value>leaf</value>
    </option>
    <option label='The node is a collection node'>
      <value>collection</value>
    </option>
  </field>
  <field var='pubsub#notification_type' type='list-single'
         label='Specify the delivery style for notifications'>
    <option label='Messages of type normal'>
      <value>normal</value>
    </option>
    <option label='Messages of type headline'>
      <value>headline</value>
    </option>
  </field>
  <field var='pubsub#notify_config'
         type='boolean'
         label='Whether to notify subscribers when the node configuration changes'/>
  <field var='pubsub#notify_delete'
         type='boolean'
         label='Whether to notify subscribers when the node is deleted'/>
  <field var='pubsub#notify_retract'
         type='boolean'
         label='Whether to notify subscribers when items are removed from the node'/>
  <field var='pubsub#notify_sub'
         type='boolean'
         label='Whether to notify owners about new subscribers and unsubscribes'/>
  <field var='pubsub#persist_items'
         type='boolean'
         label='Whether to persist items to storage'/>
  <field var='pubsub#presence_based_delivery'
         type='boolean'
         label='Whether to deliver notifications to available users only'/>
  <field var='pubsub#publish_model'
         type='list-single'
         label='The publisher model'>
    <option label='Only publishers may publish'>
      <value>publishers</value>
    </option>
    <option label='Subscribers may publish'>
      <value>subscribers</value>
    </option>
    <option label='Anyone may publish'>
      <value>open</value>
    </option>
  </field>
  <field var='pubsub#purge_offline'
         type='boolean'
         label='Whether to purge all items when the relevant publisher goes offline'/>
  <field var='pubsub#roster_groups_allowed'
         type='list-multi'
         label='The roster group(s) allowed to subscribe and retrieve items'/>
  <field var='pubsub#send_last_published_item'
         type='list-single'
         label='When to send the last published item'>
    <option label='Never'>
      <value>never</value>
    </option>
    <option label='When a new subscription is processed'>
      <value>on_sub</value>
    </option>
    <option label='When a new subscription is processed and whenever a subscriber comes online'>
      <value>on_sub_and_presence</value>
    </option>
  </field>
  <field var='pubsub#tempsub'
         type='boolean'
         label='Whether to make all subscriptions temporary, based on subscriber presence'/>
  <field var='pubsub#subscribe' type='boolean'
         label='Whether to allow subscriptions'>
    <value>1</value>
  </field>
  <field var='pubsub#title'
         type='text-single'
         label='A friendly name for the node'/>
  <field var='pubsub#type'
         type='text-single'
         label='The type of node data, usually specified by
                the namespace of the payload (if any)'/>
</form_type>
]]></code>
    </section3>
    <section3 topic='pubsub#publish-options FORM_TYPE' anchor='registrar-formtypes-publish'>
      <code><![CDATA[
<form_type>
  <name>http://jabber.org/protocol/pubsub#publish-options</name>
  <doc>XEP-0060</doc>
  <desc>
    Forms enabling publication with options; each field must specify whether it
    defines METADATA to be attached to the item, a per-item OVERRIDE of the node
    configuration, or a PRECONDITION to be checked against the node configuration.
  </desc>
  <field var='pubsub#access_model'
         type='list-single'
         label='Precondition: node configuration with the specified access model'>
    <option label='Access model of authorize'>
      <value>authorize</value>
    </option>
    <option label='Access model of open'>
      <value>open</value>
    </option>
    <option label='Access model of presence'>
      <value>presence</value>
    </option>
    <option label='Access model of roster'>
      <value>roster</value>
    </option>
    <option label='Access model of whitelist'>
      <value>whitelist</value>
    </option>
  </field>
</form_type>
]]></code>
    </section3>
  </section2>
  <section2 topic='SHIM Headers' anchor='registrar-shim'>
    <p>The XMPP Registrar includes "Collection" and "SubID" in its registry of SHIM headers (see &SHIMHEADERS;). The registry submission is as follows:</p>
    <code><![CDATA[
<header>
  <name>Collection</name>
  <desc>The collection via which an event notification was received from the originating node.</desc>
  <doc>XEP-0248</doc>
</header>
<header>
  <name>SubID</name>
  <desc>A subscription identifer within the pubsub protocol.</desc>
  <doc>XEP-0060</doc>
</header>
]]></code>
    <p>Future submissions to the XMPP Registrar may register additional SHIM headers that can be used in relation to the pubsub protocol, and such submission may occur without updating this specification.</p>
  </section2>
  <section2 topic='URI Query Types' anchor='registrar-querytypes'>
    <p>As authorized by &xep0147;, the XMPP Registrar maintains a registry of queries and key-value pairs for use in XMPP URIs (see &QUERYTYPES;).</p>
    <p>The "pubsub" querytype is defined herein for interaction with pubsub services, with three keys: (1) "action" (whose defined values are "subscribe", "unsubscribe", and "retrieve"), (2) "node" (to specify a pubsub node), and optionally "item" (to specify a particular item at a node).</p>
    <example caption='Pubsub Subscribe Action: IRI/URI'><![CDATA[
xmpp:pubsub.shakespeare.lit?pubsub;action=subscribe;node=princely_musings
]]></example>
    <example caption='Pubsub Subscribe Action: Resulting Stanza'><![CDATA[
<iq to='pubsub.shakespeare.lit' type='set'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <subscribe node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
    <example caption='Pubsub Unsubscribe Action: IRI/URI'><![CDATA[
xmpp:pubsub.shakespeare.lit?pubsub;action=unsubscribe;node=princely_musings
]]></example>
    <example caption='Pubsub Unsubscribe Action: Resulting Stanza'><![CDATA[
<iq to='pubsub.shakespeare.lit' type='set'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <unsubscribe node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
    <example caption='Pubsub Retrieve Action: IRI/URI'><![CDATA[
xmpp:pubsub.shakespeare.lit?pubsub;action=retrieve;node=princely_musings
]]></example>
    <example caption='Pubsub Retrieve Action: Resulting Stanza'><![CDATA[
<iq to='pubsub.shakespeare.lit' type='get'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='princely_musings'/>
  </pubsub>
</iq>
]]></example>
    <p>The following submission registers the "pubsub" querytype.</p>
    <code><![CDATA[
<querytype>
  <name>pubsub</name>
  <proto>http://jabber.org/protocol/pubsub</proto>
  <desc>enables interaction with a publish-subscribe service</desc>
  <doc>XEP-0060</doc>
  <keys>
    <key>
      <name>action</name>
      <desc>the pubsub action</desc>
      <values>
        <value>
	  <name>subscribe</name>
          <desc>enables subscribing to a pubsub node</desc>
        </value>
        <value>
	  <name>unsubscribe</name>
          <desc>enables unsubscribing from a pubsub node</desc>
        </value>
      </values>
    </key>
    <key>
      <name>node</name>
      <desc>the pubsub node</desc>
    </key>
  </keys>
</querytype>
]]></code>
  </section2>
</section1>

<section1 topic='XML Schemas' anchor='schemas'>
  <section2 topic='http://jabber.org/protocol/pubsub' anchor='schemas-pubsub'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/pubsub'
    xmlns='http://jabber.org/protocol/pubsub'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0060: http://xmpp.org/extensions/xep-0060.html
    </xs:documentation>
  </xs:annotation>

  <xs:import
      namespace='jabber:x:data'
      schemaLocation='http://xmpp.org/schemas/x-data.xsd'/>

  <xs:element name='pubsub'>
    <xs:complexType>
      <xs:choice>
        <xs:sequence>
          <xs:element ref='create'/>
          <xs:element ref='configure' minOccurs='0'/>
        </xs:sequence>
        <xs:sequence>
          <xs:element ref='subscribe' minOccurs='0'/>
          <xs:element ref='options' minOccurs='0'/>
        </xs:sequence>
        <xs:sequence>
          <xs:element ref='publish'/>
          <xs:element ref='publish-options' minOccurs='0'/>
        </xs:sequence>
        <xs:choice minOccurs='0'>
          <xs:element ref='affiliations'/>
          <xs:element ref='default'/>
          <xs:element ref='items'/>
          <xs:element ref='publish'/>
          <xs:element ref='retract'/>
          <xs:element ref='subscription'/>
          <xs:element ref='subscriptions'/>
          <xs:element ref='unsubscribe'/>
        </xs:choice>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='affiliations'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='affiliation' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='affiliation'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='affiliation' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='member'/>
                <xs:enumeration value='none'/>
                <xs:enumeration value='outcast'/>
                <xs:enumeration value='owner'/>
                <xs:enumeration value='publisher'/>
                <xs:enumeration value='publish-only'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='node' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='configure'>
    <xs:complexType>
      <xs:choice minOccurs='0' xmlns:xdata='jabber:x:data'>
        <xs:element ref='xdata:x'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='create'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='node' type='xs:string' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='default'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='node' type='xs:string' use='optional'/>
          <xs:attribute name='type'
                        use='optional'
                        default='leaf'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='collection'/>
                <xs:enumeration value='leaf'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='items'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='item' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='max_items' type='xs:positiveInteger' use='optional'/>
      <xs:attribute name='node' type='xs:string' use='required'/>
      <xs:attribute name='subid' type='xs:string' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='item'>
    <xs:complexType>
      <xs:sequence minOccurs='0'>
        <xs:any namespace='##other'/>
      </xs:sequence>
      <xs:attribute name='id' type='xs:string' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='options'>
    <xs:complexType>
      <xs:sequence minOccurs='0'>
        <xs:any namespace='jabber:x:data'/>
      </xs:sequence>
      <xs:attribute name='jid' type='xs:string' use='required'/>
      <xs:attribute name='node' type='xs:string' use='optional'/>
      <xs:attribute name='subid' type='xs:string' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='publish'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='item' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='publish-options'>
    <xs:complexType>
      <xs:choice minOccurs='0' xmlns:xdata='jabber:x:data'>
        <xs:element ref='xdata:x'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='retract'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='item' minOccurs='1' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='required'/>
      <xs:attribute name='notify' type='xs:boolean' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='subscribe-options'>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='required' type='empty' minOccurs='0'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='subscribe'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='jid' type='xs:string' use='required'/>
          <xs:attribute name='node' type='xs:string' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subscriptions'>
    <xs:complexType>
      <xs:sequence minOccurs='0' maxOccurs='unbounded'>
        <xs:element ref='subscription'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='subscription'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='subscribe-options' minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='jid' type='xs:string' use='required'/>
      <xs:attribute name='node' type='xs:string' use='optional'/>
      <xs:attribute name='subid' type='xs:string' use='optional'/>
      <xs:attribute name='subscription' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='none'/>
            <xs:enumeration value='pending'/>
            <xs:enumeration value='subscribed'/>
            <xs:enumeration value='unconfigured'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name='unsubscribe'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='jid' type='xs:string' use='required'/>
          <xs:attribute name='node' type='xs:string' use='optional'/>
          <xs:attribute name='subid' type='xs:string' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
]]></code>
  </section2>

  <section2 topic='http://jabber.org/protocol/pubsub#errors' anchor='schemas-error'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/pubsub#errors'
    xmlns='http://jabber.org/protocol/pubsub#errors'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      This namespace is used for error reporting only, as
      defined in XEP-0060:

      http://xmpp.org/extensions/xep-0060.html
    </xs:documentation>
  </xs:annotation>

  <xs:element name='closed-node' type='empty'/>
  <xs:element name='configuration-required' type='empty'/>
  <xs:element name='invalid-jid' type='empty'/>
  <xs:element name='invalid-options' type='empty'/>
  <xs:element name='invalid-payload' type='empty'/>
  <xs:element name='invalid-subid' type='empty'/>
  <xs:element name='item-forbidden' type='empty'/>
  <xs:element name='item-required' type='empty'/>
  <xs:element name='jid-required' type='empty'/>
  <xs:element name='max-items-exceeded' type='empty'/>
  <xs:element name='max-nodes-exceeded' type='empty'/>
  <xs:element name='nodeid-required' type='empty'/>
  <xs:element name='not-in-roster-group' type='empty'/>
  <xs:element name='not-subscribed' type='empty'/>
  <xs:element name='payload-too-big' type='empty'/>
  <xs:element name='payload-required' type='empty'/>
  <xs:element name='pending-subscription' type='empty'/>
  <xs:element name='presence-subscription-required' type='empty'/>
  <xs:element name='subid-required' type='empty'/>
  <xs:element name='too-many-subscriptions' type='empty'/>
  <xs:element name='unsupported'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='feature' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='access-authorize'/>
                <xs:enumeration value='access-open'/>
                <xs:enumeration value='access-presence'/>
                <xs:enumeration value='access-roster'/>
                <xs:enumeration value='access-whitelist'/>
                <xs:enumeration value='auto-create'/>
                <xs:enumeration value='auto-subscribe'/>
                <xs:enumeration value='collections'/>
                <xs:enumeration value='config-node'/>
                <xs:enumeration value='create-and-configure'/>
                <xs:enumeration value='create-nodes'/>
                <xs:enumeration value='delete-items'/>
                <xs:enumeration value='delete-nodes'/>
                <xs:enumeration value='filtered-notifications'/>
                <xs:enumeration value='get-pending'/>
                <xs:enumeration value='instant-nodes'/>
                <xs:enumeration value='item-ids'/>
                <xs:enumeration value='last-published'/>
                <xs:enumeration value='leased-subscription'/>
                <xs:enumeration value='manage-subscriptions'/>
                <xs:enumeration value='member-affiliation'/>
                <xs:enumeration value='meta-data'/>
                <xs:enumeration value='modify-affiliations'/>
                <xs:enumeration value='multi-collection'/>
                <xs:enumeration value='multi-subscribe'/>
                <xs:enumeration value='outcast-affiliation'/>
                <xs:enumeration value='persistent-items'/>
                <xs:enumeration value='presence-notifications'/>
                <xs:enumeration value='presence-subscribe'/>
                <xs:enumeration value='publish'/>
                <xs:enumeration value='publish-options'/>
                <xs:enumeration value='publish-only-affiliation'/>
                <xs:enumeration value='publisher-affiliation'/>
                <xs:enumeration value='purge-nodes'/>
                <xs:enumeration value='retract-items'/>
                <xs:enumeration value='retrieve-affiliations'/>
                <xs:enumeration value='retrieve-default'/>
                <xs:enumeration value='retrieve-items'/>
                <xs:enumeration value='retrieve-subscriptions'/>
                <xs:enumeration value='subscribe'/>
                <xs:enumeration value='subscription-options'/>
                <xs:enumeration value='subscription-notifications'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='unsupported-access-model' type='empty'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
]]></code>
  </section2>

  <section2 topic='http://jabber.org/protocol/pubsub#event' anchor='schemas-event'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/pubsub#event'
    xmlns='http://jabber.org/protocol/pubsub#event'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0060: http://xmpp.org/extensions/xep-0060.html
    </xs:documentation>
  </xs:annotation>

  <xs:import
      namespace='jabber:x:data'
      schemaLocation='http://xmpp.org/schemas/x-data.xsd'/>

  <xs:element name='event'>
    <xs:complexType>
      <xs:choice>
        <xs:element ref='collection'/>
        <xs:element ref='configuration'/>
        <xs:element ref='delete'/>
        <xs:element ref='items'/>
        <xs:element ref='purge'/>
        <xs:element ref='subscription'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='collection'>
    <xs:complexType>
      <xs:choice>
        <xs:element ref='associate'/>
        <xs:element ref='disassociate'/>
      </xs:choice>
      <xs:attribute name='node' type='xs:string' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='associate'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='node' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='disassociate'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='node' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='configuration'>
    <xs:complexType>
      <xs:sequence minOccurs='0' xmlns:xdata='jabber:x:data'>
        <xs:element ref='xdata:x'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='delete'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='redirect' minOccurs='0' maxOccurs='1'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='items'>
    <xs:complexType>
      <xs:choice>
        <xs:element ref='item' minOccurs='0' maxOccurs='unbounded'/>
        <xs:element ref='retract' minOccurs='0' maxOccurs='unbounded'/>
      </xs:choice>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='item'>
    <xs:complexType>
      <xs:choice minOccurs='0'>
        <xs:any namespace='##other'/>
      </xs:choice>
      <xs:attribute name='id' type='xs:string' use='optional'/>
      <xs:attribute name='node' type='xs:string' use='optional'/>
      <xs:attribute name='publisher' type='xs:string' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='purge'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='node' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='redirect'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='uri' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='retract'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='id' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subscription'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='expiry' type='xs:dateTime' use='optional'/>
          <xs:attribute name='jid' type='xs:string' use='required'/>
          <xs:attribute name='node' type='xs:string' use='optional'/>
          <xs:attribute name='subid' type='xs:string' use='optional'/>
          <xs:attribute name='subscription' use='optional'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='none'/>
                <xs:enumeration value='pending'/>
                <xs:enumeration value='subscribed'/>
                <xs:enumeration value='unconfigured'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
]]></code>
  </section2>

  <section2 topic='http://jabber.org/protocol/pubsub#owner' anchor='schemas-owner'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/pubsub#owner'
    xmlns='http://jabber.org/protocol/pubsub#owner'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0060: http://xmpp.org/extensions/xep-0060.html
    </xs:documentation>
  </xs:annotation>

  <xs:import
      namespace='jabber:x:data'
      schemaLocation='http://xmpp.org/schemas/x-data.xsd'/>

  <xs:element name='pubsub'>
    <xs:complexType>
      <xs:choice>
        <xs:element ref='affiliations'/>
        <xs:element ref='configure'/>
        <xs:element ref='default'/>
        <xs:element ref='delete'/>
        <xs:element ref='purge'/>
        <xs:element ref='subscriptions'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='affiliations'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='affiliation' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='affiliation'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='affiliation' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='member'/>
                <xs:enumeration value='none'/>
                <xs:enumeration value='outcast'/>
                <xs:enumeration value='owner'/>
                <xs:enumeration value='publisher'/>
                <xs:enumeration value='publish-only'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='jid' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='configure'>
    <xs:complexType>
      <xs:choice minOccurs='0' xmlns:xdata='jabber:x:data'>
        <xs:element ref='xdata:x'/>
      </xs:choice>
      <xs:attribute name='node' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='default'>
    <xs:complexType>
      <xs:choice minOccurs='0' xmlns:xdata='jabber:x:data'>
        <xs:element ref='xdata:x'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='delete'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='redirect' minOccurs='0' maxOccurs='1'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='purge'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='node' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='redirect'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='uri' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subscriptions'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='subscription' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='node' type='xs:string' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='subscription'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='subscription' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='none'/>
                <xs:enumeration value='pending'/>
                <xs:enumeration value='subscribed'/>
                <xs:enumeration value='unconfigured'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='jid' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
]]></code>
  </section2>

</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to Kirk Bateman, Robin Collier, Blaine Cook, Ovidiu Craciun, Brian Cully, Dave Cridland, Guillaume Desmottes, Gaston Dombiak, William Edney, Seth Fitzsimmons, Fabio Forno, Nathan Fritz, Julien Genestoux, Anastasia Gornostaeva, Joe Hildebrand, Curtis King, Tuomas Koski, Petri Liimatta, Tobias Markmann, Pedro Melo, Dirk Meyer, Tory Patnoe, Peter Petrov, Sonny Piers, Christophe Romain, Pavel Šimerda, Andy Skelton, Kevin Smith, Chris Teegarden, Simon Tennant, Matt Tucker, Matthew Wild, Bob Wyman, Matus Zamborsky, and Brett Zamir for their feedback.</p>
</section1>

<section1 topic='Author Note' anchor='authornote'>
  <p>Peter Millard, primary author of this specification from version 0.1 through version 1.7, died on April 26, 2006. The remaining co-authors are indebted to him for his many years of work on publish-subscribe technologies.</p>
</section1>

</xep>
