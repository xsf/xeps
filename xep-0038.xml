<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM "xep.ent">
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Icon Styles</title>
  <abstract>A protocol for specifying exchangeable styles of emoticons and genicons within Jabber IM clients.</abstract>
  &LEGALNOTICE;
  <number>0038</number>
  <status>Deferred</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies/>
  <supersedes/>
  <supersededby/>
  <shortname>None</shortname>
  <author>
    <firstname>Adam</firstname>
    <surname>Theo</surname>
    <email>theo@theoretic.com</email>
    <jid>theo@theoretic.com</jid>
  </author>
  <revision>
    <version>0.5</version>
    <date>2003-06-02</date>
    <initials>at</initials>
    <remark>Bent to public will on using a common object element and enveloping all meta information into a meta element.</remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2003-03-05</date>
    <initials>at</initials>
    <remark>Added "format" back in. Refused to simplify to use "object" for everything. Fixed some typos.</remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2002-11-05</date>
    <initials>at</initials>
    <remark>Simplified, even though it loses some flexibility. Should be the final version.</remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2002-07-24</date>
    <initials>at</initials>
    <remark>Added feedback, still needs serious Schema work</remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2002-06-28</date>
    <initials>at</initials>
    <remark>Initial version</remark>
  </revision>
</header>

<section1 topic='Introduction'>
  <p>This proposal standardizes the use of graphical emoticons and "genicons" in Jabber IM clients to prevent confusion and competing conventions that will soon arise, enabling client developers to spend their energy on more important parts of their projects.</p>
  <p><link url="http://www.wikipedia.com/wiki/Emoticon">Emoticons</link> are the text string 'smiley' or 'frowny' faces such as <tt>:-)</tt> and <tt>:-(</tt> that people often use in email or instant messaging to represent emotions. Genicons are a term being coined here to mean non-emotive text pictures (often called '<link url="http://en.wikipedia.org/wiki/ASCII_art">ASCII Art</link>') that serve to replace typing the full word or to simply be cute or creative in the conversation.</p>
  <p>Many new Internet users demand graphical emoticon and genicon support in their IM clients. We should satisfy their needs if we ever wish to see them use Jabber instead of another IM system.</p>
  <p>While traditionally emoticons and genicons have been typed and displayed as text, the recent trend of using graphics, and sometimes sounds, instead of text to represent these pictures will be assumed for purposes of this proposal. Also, the term "icon" will be used in place of "emoticon" and "genicon" for purposes of convenience.</p>
</section1>

<section1 topic='Requirements'>
  <p>The following issues must be solved for in this specification.</p>
  <ul>
    <li><strong>Here and Now</strong>: The convention should not rely on technologies such as feature negotiation or generic pub/sub which do not exist yet in Jabber in order to work properly. The convention should be a "here and now" solution, relying only on the current Jabber protocol.</li>
    <li><strong>Meaningful</strong>: The convention for creating the icons must be meaningful to users of clients without icon support, or even users on the other side of transports. Whatever method is used, it should not be cryptic or difficult to understand in text-only mode, in case the user does not have or want the capability to view the icons.</li>
    <li><strong>Component Friendly</strong>: In order for gateways, bots, and other "semi-intelligent" components to be able to convert or otherwise use the specification (such as to and from the MSN icon style, or use icons in conversations with Artificially Intelligent bots), a specific list of icons must be possible. Since these bots do not have an intelligent human behind them deciding their every action, they cannot deal with unlimited possibilities.</li>
    <li><strong>Protect Privacy</strong>: Sender-defined external data must not be required to properly display the icons because it can be used by the sender to track the user, circumventing their privacy. When the sender can define their own graphics or sounds to be used for the icons, they can use unique URLs and monitor when these unique URLs are accessed. External data may be allowed as long as it is not required for proper use of the icons, but it would be best to leave external data completely out of the system.</li>
    <li><strong>Conserve Bandwidth</strong>: The amount of markup used within the messages to define the icons should be kept to a minimum, as well as keeping the media files used for the icons from being transferred over the wire with the messages themselves. These easily consume too much bandwidth, a precious resource to most of the Internet.</li>
    <li><strong>Be Passive</strong>: The convention should not force transports or recipients to take any action to properly display the icons. Not only does it put extra strain on the components, but it would also unnecessarily break old clients. Transports and recieving clients may have the option of taking some actions, but they should not be forced to.</li>
    <li><strong>Internationalization</strong>: The convention must be inherently international in order to ease adoption of Jabber throughout the world and prevent later growing pains. The use of English must be kept to a minimum, restricted to "meta information" about the icons themselves, and must dynamically allow for non-English language sets.</li>
  </ul>
  <p>Because icons in Jabber should be easy to use, extensible, and customizable, they will be created using style definition files which can be exchanged between users and supporting clients. The specification will not allow external data, in order to protect the privacy of users, and will not rely on file transfers or directory services in order to not break old clients or components.</p>
</section1>

<section1 topic='Discovery'>
  <p>To find out if an entity supports Jabber Icon Styles, look for the feature category of <tt>http://jabber.org/protocol/icon-styles</tt> using <tt>jabber:iq:browse</tt> or <tt>http://jabber.org/protocol/disco</tt>. The same feature category can be used with feature negotiation.</p>
</section1>

<section1 topic='Specification'>
  <p>Because icons in Jabber should be easy to use, extensible, and customizable, they will be created using style definition files which can be exchanged between users and supporting clients. The specification will not require external data, in order to protect the privacy of users, and will not rely on file transfers or directory services in order to not break old clients or components. How these icon styles are exchanged - as well as advertised - is out of the scope of this specification. The text strings representing the icons will be sent like any other text (this document doesn't require extra tags or attributes in the messages being sent).</p>
  <p>All icons are created by defining each icon then grouping them together into "Icon Definition Files". These files, along with the object files associated with the icons, are called "icon styles". Icon styles may be traded and shared among users of all supporting clients like skins or themes, similar to WinAmp, XMMS, GNOME, and other customizable applications. This creates a platform-independent system, providing a great degree of customization for the user, and allowing client developers to focus on other features.</p>

  <section2 topic="Definition File">
    <p>Each icon in a style is defined and grouped together in an XML document, the "Icon Definition File". Each definition file for all styles is named "icondef.xml". There is only one such Icon Definition File per style. The W3C Schema for the Icon Definition File plus an example finished Icon Definition File can be found under Schema, below.</p>
  </section2>

  <section2 topic="Meta Elements">
    <p>The meta elements contain information about the Icon Style itself, rather that the individual icons. They are contained within the <tt>&lt;meta&gt;</tt> element, which is directly under the root element. There is one and only one the <tt>&lt;meta&gt;</tt> element.</p>
    <ul>
      <li><strong>Name</strong>: This is an arbitrary text string (spaces allowed) which is the full name of the Icon Style. Only one name can be included.</li>
      <li><strong>Version</strong>: This is an arbitrary text string (no spaces allowed) which is the version number of the Icon Style. Any version format is allowed, but the <tt>major.minor</tt> or <tt>major.minor.trivial</tt> formats are recommended. Only one version can be included.</li>
      <li><strong>Description</strong>: This is the full description of the Icon Style. It summarizes the look and types of the icons, and can be used for keywords in searching. This is optional, but recommended.</li>
      <li><strong>Author</strong>: This is the full name of the author. Multiple authors are allowed.</li>
      <li><strong>Creation</strong>: This is the date of the creation of this version of the Icon Style. The date is in the <link url="http://www.w3.org/TR/NOTE-datetime">ISO 8601</link> standard format.</li>
      <li><strong>Home</strong>: This is the full HTTP web address of the Icon Style's homepage. This is optional.</li>
    </ul>
  </section2>

  <section2 topic="Text Strings">
    <p>The <tt>&lt;text/&gt;</tt> element defines what text string(s) are recognized by the client as an icon. There may be multiple <tt>&lt;text/&gt;</tt> elements in an <tt>&lt;icon/&gt;</tt>, such as for different languages or simply for multiple text strings producing the same result (for example: <tt>:-)</tt> and <tt>:)</tt>)</p>

    <section3 topic="Internationalization">
      <p>Each may have an <tt>xml:lang</tt> attribute, as defined in Section 2.12 in the official <link url="http://www.w3.org/TR/REC-xml#sec-lang-tag">XML 1.0 reference document</link>. The <tt>xml:lang</tt> attribute allows for two-letter language codes, dialects, and custom "languages" to define foreign IM protocols, for example.</p>
    </section3>

    <section3 topic="Whitespace">
      <p>In order to be more accurate in recognizing text strings intended to be icons from those that are just coincidences in normal conversation, the client should follow the "whitespace rule" of making sure there is some form of whitespace on at least one side of the text string. This is only a guideline; individual clients can implement different rules as needed. A newline and tabs count as whitespace in addition to spaces. This is to make sure that chunks of code and URIs are not accidentally converted into graphical pictures. Also, text strings cannot include newlines or tabs. All characters must be on the same line with only spaces within the string, and extra spaces should not be ignored. This is to make it much easier on text parsers looking for these text strings.</p>
    </section3>

    <section3 topic="Case Sensitivity">
      <p>The text strings must be case sensitive. This is a rule that compliant clients must follow. "Cat" cannot be used in place of "cat" or "CAT". All three are separate text strings, and therefore must have separate <tt>&lt;text/&gt;</tt> elements, although they may of course use the same objects.</p>
    </section3>
  </section2>

  <section2 topic="Objects">
    <p>The <tt>&lt;object/&gt;</tt> element defines what multimedia objects are inserted into the displayed message, replacing the text string(s) defined in <tt>&lt;text/&gt;</tt>. An object may be a bitmap graphic, vector graphic, audio clip, rich text formatting rules, or any other media that can be stored in a separate file. The <tt>&lt;object/&gt;</tt> element is identical to <link url="http://www.w3.org/TR/2003/WD-xhtml2-20030131/mod-object.html#s_objectmodule">the OBJECT element used in XHTML 2.0</link>, and the specification used there should be used to govern the <tt>&lt;object/&gt;</tt> element here. Note that because the XHTML 2.0 OBJECT specification is quite complex (although very flexible and future-proof), client developers are encouraged to only implement compliant sub-sets of the OBJECT specification for their clients. There may be one or multiple <tt>&lt;object/&gt;</tt> elements in an <tt>&lt;icon/&gt;</tt>, such as for alternative file formats (such as <tt>
 GIF</tt> vs. <tt>PNG</tt>), or multiple objects to use at the same time (such as graphic and sound files).</p>
  </section2>

  <section2 topic="X Tags">
    <p>The <tt>&lt;x/&gt;</tt> element allows any type of extensions to the <tt>icondef.xml</tt> file, such as to specify how the user's nickname can be colored in multi-user chat windows or defining additional data about the style or authors. Each must have an <tt>xmlns</tt> attribute with a namespace that the extension operates under. Multiple <tt>&lt;x/&gt;</tt> elements may be in the <tt>&lt;icon/&gt;</tt> or <tt>&lt;icondef/&gt;</tt> elements. This functionality is optional for clients to support, and clients should ignore all extensions they do not understand.</p>
  </section2>

  <section2 topic="Hierarchy">
    <p>The <tt>icondef.xml</tt> file must all be located in the root directory, which is named after the style and version (example: <tt>./happy_days-1.2</tt> or <tt>./gold_angelic-1.0.0</tt>). There is only one root directory per style. The object files may either be in the root directory as well, or be in sub-directories for categorization and easier maintenance reasons. If sub-directories are used, they must match the URIs used in the <tt>&lt;object/&gt;</tt> element in the <tt>icondef.xml</tt> file.</p>

<example caption="Gold Angelic v1.0.0 Hierarchy Example">
./gold_angelic-1.0.0
./gold_angelic-1.0.0/icondef.xml
./gold_angelic-1.0.0/alert.ogg
./gold_angelic-1.0.0/red-exclamation-mark.svg
./gold_angelic-1.0.0/shocked.svg
./gold_angelic-1.0.0/woman.svg
./gold_angelic-1.0.0/pngs/happy.png
./gold_angelic-1.0.0/pngs/sad.png
./gold_angelic-1.0.0/pngs/man.png
./gold_angelic-1.0.0/pngs/woman.png
./gold_angelic-1.0.0/wavs/boohoo.wav
./gold_angelic-1.0.0/wavs/choir.wav
./gold_angelic-1.0.0/wavs/alert.wav
</example>
  </section2>

  <section2 topic="Packaging">
    <p>The <tt>icondef.xml</tt> file and all object files must be packaged in the <tt>ZIP</tt> format following the above hierarchy (the directory must exist in the package, with all files in it). The package must have the file extension <tt>.jisp</tt> (Jabber Icon Style Package), and the MIME type <tt>application/vnd.jisp</tt> as defined in the official <link url="http://www.iana.org/assignments/media-types/application/vnd.jisp">IANA registration</link>. This allows Jabber clients to automatically install icon styles through web browsers. When the client installs the package, it should probably be kept in the archived format, instead of unzipped. This not only saves disk space, but also makes the packages easier to manage and exchange.</p>
  </section2>
</section1>

<section1 topic='Implementation Notes'>
  <p>Icons styles should be easy to create, distribute, and most importantly, use. The packaging and official MIME type helps with the first steps, but it is ultimately up to the client developers to fully support the specification and make sure it is easy for users to manage.</p>

   <section2 topic='Procedure'>
     <p>The procedure for using Jabber icons is simple and straightforward.</p>
     <ol>
       <li>The user installs and turns on ("activates") an icon style (using their client's GUI, most likely) they have received off the Internet or somewhere else.</li>
       <li>The user selects the desired icon they wish to include in their message from their client's GUI (a drop-down list of installed icons, for example).</li>
       <li>The client translates the selected icon into its main text string equivelent, which is found in the icon's <tt>&lt;text&gt;</tt> element. If there are multiple <tt>&lt;text&gt;</tt> elements, follow the procedure under "Text Strings", below.</li>
       <li>The client sends the message with the text string to the intended recipient.</li>
       <li>The recipient client receives the message with the text string.</li>
       <li>If the recipient has an icon style activated that defines that text string, it is converted into the appropriate object. If there are multiple objects files for each icon, follow the procedure under "Object Files", below. If there are multiple icon styles installed which define that text string, follow the procedure under "Combining Styles", below. If the recipient does not have such an icon activated, then they simply see the text string without any changes.</li>
     </ol>
   </section2>

  <section2 topic='Text Strings'>
    <p>Because icons may have multiple text strings associated with them, clients need to be able to figure out which one to use when a user selects the desired icon from their GUI. This is ultimately completely up to the implementation, but here is a suggestion:</p>
    <ol>
      <li>First look for any text strings that are the same language as what the user is using (if the user is using english, then look for English text strings, ignoring languages like German or Simplified Chinese). Optionally, if the client is smart enough, it can instead look for text strings in the language that the intended recipient is using (using Browse/Disco or simply keeping track of languages used in an ongoing conversation). The language for text strings is found in the <tt>xml:lang</tt> attribute for <tt>&lt;text/&gt;</tt> elements.</li>
      <li>If there are no text strings that match the user's language, then look for one that has no defined language.</li>
      <li>If there are multiple options even after the above steps, select the one that comes first in the <tt>&lt;icon/&gt;</tt> element.</li>
      <li>If there are no text strings that are in the user's language or no language defined at all, then it is probably best for the client to not even display the icon as a choice at all. But if the client still wants to allow it, then simply select the text string of any language that comes first in the <tt>&lt;icon/&gt;</tt> element.</li>
    </ol>
  </section2>

  <section2 topic='Objects'>
    <p>Like multiple text strings, icons can have multiple object data files associated with them, and therefore clients also need to be able to figure out which ones to use when a user selects the desired icon from their GUI. Here is a suggestion of how those files can be chosen among multiple options, although this is completely an implementation issue (as with multiple text strings).</p>
    <ol>
      <li>First look for any of these objects that are of MIME types the client can understand and use. For example, most clients could only use <tt>image/bmp</tt> and maybe <tt>audio/x-wav</tt>, but some newer clients may be able to support <tt>image/png</tt>, <tt>image/svg+xml</tt> and <tt>audio/x-ogg</tt>.</li>
      <li>If there are still multiple object MIME types which the client can understand and use, then the client should rank the MIME types it can support, choosing its favorite.</li>
      <li>If there are still multiple objects of the same MIME type, then the client should choose the first one in order in the <tt>&lt;icon/&gt;</tt> element.</li>
      <li>If there are no files of any MIME type the client can understand, then it should ignore using any objects or even the entire icon.</li>
    </ol>
    <p>The <link url="http://www.w3.org/TR/2003/WD-xhtml2-20030131/mod-object.html#sec_14.1.3.">Rules for processing objects</link> in the XHTML 2.0 OBJECT specification may also be of help in coding the procedure of choosing an object to use, especially when it comes to nested and author-preferred objects.</p>
    <p>The client should also take note of the file sizes. The client should set (possibly as a user-defined option) the maximum file size in kilobytes for object files. Anything above this amount implies the file will be too big to properly render, and the icon style developer is probably being abusive.</p>
    <p>Also, if you are developing an icon style, please make sure the MIME types specified in your <tt>icondef.xml</tt> file are correct. And also make sure that the files you use are reasonable in any byte, pixel, and timelength size. And although any file format can be supported, try to use <tt>BMP</tt>, <tt>PNG</tt>, <tt>SVG</tt>, <tt>WAV</tt>, <tt>OGG</tt> formats because they are open, free, and becoming increasingly supported in developer tools and programming languages.</p>
  </section2>

  <section2 topic='Combining Styles'>
    <p>A client may permit the user to activate multiple icon styles at one time. This would be useful for styles which make use of different text strings, and the user wants them all. The client should force the user to rank the multiple styles for purposes of conflict resolution between icons. The highest ranking style gets preference over lower ranking styles. This ranking doesn't have to be anything more than simply dragging the style names into top-to-bottom rows, with the styles on top being higher ranked than those below.</p>
  </section2>

  <section2 topic='Core Icons'>
    <p>Although any text string can be turned into an icon by defining it in an <tt>icondef.xml</tt> file, it is highly reccomended they either follow traditional ASCII Art (smileys and frownys, for example) or full keywords in simple markup such as double-colons. If you want to design icons, always keep in mind that not every Jabber user uses graphics to "translate" this to something visual, as explained in the "Meaningful" requirement, above. Here is a short list of recommended "core" icons that should be in most definitions, as well as possibly be used by transports:</p>
    <ul>
      <li><strong>:-)</strong> and <strong>:)</strong> - A smiling face.</li>
      <li><strong>:-(</strong> and <strong>:(</strong> - A frowing face.</li>
      <li><strong>;-)</strong> and <strong>;)</strong> - A winking smiling face.</li>
      <li><strong>:'-(</strong> and <strong>:'(</strong> - A crying face.</li>
      <li><strong>>:-(</strong> and <strong>>:(</strong> - An angry face.</li>
      <li><strong>:yes:</strong> - A thumbs-up or checkmark.</li>
      <li><strong>:no:</strong> - A thumbs-down or a crossmark.</li>
      <li><strong>:wait:</strong> - An open hand, palm outstretched.</li>
      <li><strong>@->--</strong> and <strong>:rose:</strong> - A rose flower.</li>
      <li><strong>:telephone:</strong> - A telephone.</li>
      <li><strong>:email:</strong> - An electronic-looking envelope.</li>
      <li><strong>:jabber:</strong> - Jabber's lightbulb logo.</li>
      <li><strong>:cake:</strong> - A birthday cake.</li>
      <li><strong>:kiss:</strong> - A pair of puckered lips.</li>
      <li><strong>:heart:</strong> and <strong>:love:</strong> - A heart.</li>
      <li><strong>:brokenheart:</strong> - A broken heart.</li>
      <li><strong>:music:</strong> - A musical note or instrument.</li>
      <li><strong>:beer:</strong> - A beer mug.</li>
      <li><strong>:coffee:</strong> - A cup of coffee.</li>
      <li><strong>:money:</strong> - A gold coin.</li>
      <li><strong>:moon:</strong> - A moon.</li>
      <li><strong>:sun:</strong> - A sun.</li>
      <li><strong>:star:</strong> - A star.</li>
    </ul>
  </section2>
</section1>

<section1 topic='Security Considerations'>
  <p>There are no security features or concerns related to this proposal.</p>
</section1>

<section1 topic='IANA Considerations'>
  <p>The &XSF; shall register and maintain a MIME type and file extension for icon style packages with the IANA. Ones have already been registered by Sebastiaan Deckers (aka 'CBAS') as <tt>application/vnd.jisp</tt> and <tt>.jisp</tt>, respectively. The registration can be found at <link url="http://www.iana.org/assignments/media-types/application/vnd.jisp">http://www.iana.org/assignments/media-types/application/vnd.jisp</link>. Sebastiaan's registration shall be considered the official MIME type and file extension of this specification.</p>
  <p>Also, this specification uses other MIME types that are maintained by IANA for the object and xml files that are included in the icon style packages.</p>
</section1>

<section1 topic='XMPP Registrar Considerations'>
  <p>JANA shall register the namespace <tt>http://jabber.org/protocol/icon-styles</tt> as an official feature category.</p>
  <p>Also, JANA may choose to define IM-specific <tt>xml:lang</tt> "language codes" for use within Jabber (in addition to those defined in the XML specification). Such language codes would allow Jabber developers to support icons from MSN, Yahoo, and popular web message programs.</p>
</section1>

<section1 topic='Formal Definition'>
  <section2 topic='Schema'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="icondef">
    <xs:complexType>
      <xs:sequence>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="name" type="xs:string"/>
            <xs:element name="version" type="xs:string"/>
            <xs:element name="description" type="xs:string"/>
            <xs:element name="author" type="xs:string" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="jid" type="xs:string" use="optional"/>
              </xs:complexType>
            </xs:element>
            <xs:element name="creation" type="xs:date"/>
          </xs:sequence>
        </xs:complexType>
        <xs:element name="icon" minOccurs="1" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="text" type="xs:string" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:attribute name="xml:lang" type="xs:language" use="optional"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="object" type="xs:string" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:attribute name="mime" type="xs:string" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="x" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:attribute name="xmlns" type="xs:anyURI" use="required"/>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="x" type="xs:string" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="xmlns" type="xs:anyURI" use="required"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
]]></code>
  </section2>

  <section2 topic="icondef.xml file example">
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>
<icondef>
  <meta>
    <name>Gold Angelic</name>
    <version>1.0.0</version>
    <description>Angelic faces and themes with gold highlights.</description>
    <author jid="theo@theoretic.com">Adam Theo</author>
    <author jid="cbas@rhymbox.com">Sebastiaan Deckers</author>
    <author jid="cobnet@jabber.org">Mattias Campe</author>
    <creation>2002-10-31</creation>
    <home>http://icon-styles.jabberstudio.org/Gold_Angelic</home>
  </meta>
  <icon>
    <text>:-)</text>
    <text>:)</text>
    <object mime="image/png">happy.png</object>
    <object mime="audio/x-wav">choir.wav</object>
  </icon>
  <icon>
    <text>:-(</text>
    <text>:(</text>
    <object mime="image/png">sad.png</object>
    <object mime="audio/x-wav">boohoo.wav</object>
  </icon>
  <icon>
    <text>:-O</text>
    <text>:O</text>
    <object mime="image/svg+xml">shocked.svg</object>
  </icon>
  <icon>
    <text xml:lang="en">::man::</text>
    <text xml:lang="de">::mann::</text>
    <text xml:lang="cs">::muz::</text>
    <text xml:lang="x-msn">(z)</text>
    <object mime="image/png">man.png</object>
  </icon>
  <icon>
    <text xml:lang="en">::woman::</text>
    <text xml:lang="x-msn">(x)</text>
    <object mime="image/svg+xml">woman.svg</object>
    <object mime="image/png">woman.png</object>
  </icon>
  <icon>
    <text xml:lang="en">::alert::</text>
    <object mime="image/svg+xml">red-exclamation-mark.svg</object>
    <object mime="audio/x-ogg">alert.ogg</object>
    <object mime="audio/x-wav">alert.wav</object>
  </icon>
</icondef>
]]></code>
  </section2>
</section1>

<section1 topic='Future Considerations'>
  <ol>
    <li>This proposes a standard, simple, plaintext-based icon convention. It does not attempt to create a powerful XML-based convention wherein XML tags are used to extensibly represent the icons. However, this proposal isn't exclusive, and does not prevent such an XML-based convention from being created at a later date. It may also be possible to build such an extensible XML-based convention on top of this plaintext one.</li>
    <li>The Icon Styles that the sender used to create the message may be of use to the recipient. A separate specification can be developed for the transferring of the name and version of the Icon Styles used by the sender. The recipient's client may then be smart enough to automatically use the same icons as the sender intended, possibly even fetching and downloading the icon styles as needed. This would likely require directory services, so has not been included in this proposal.</li>
    <li>The functionality of the <tt>icondef.xml</tt> files may be useful for variable text strings. Text strings that may change from session to session, such as the user's nickname in a multi-user chat. A set of variables could be defined that represent these variable datas, therefore allowing them to be manipulated in the same way set text strings are.</li>
    <li>This convention may be adopted beyond the scope of Jabber into web browsers, email clients, and Wiki sites. There is great potential for a generalized, exchangeable convention for emoticons and genicons.</li>
    <li>A "SVG Transport" may be created to enable clients to send <tt>SVG</tt> icons to it and get back icons in another format of their choice, such as <tt>PNG</tt> or <tt>JPG</tt>. This would speed up the adoption of <tt>SVG</tt> within Jabber greatly.</li>
    <li>An online Web- (or even Jabber-) based editor to create icon style packages from the individual components would be a great tool for developers. This would be a great project for <link url="http://www.jabberstudio.org">JabberStudio</link> or even the <link url="http://www.theoretic.com/Ransom">Ransom model</link>.</li>
  </ol>
</section1>

</xep>
